'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="tse_erp")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertfecha(instance As fecha)
    End Sub
  Partial Private Sub Updatefecha(instance As fecha)
    End Sub
  Partial Private Sub Deletefecha(instance As fecha)
    End Sub
  Partial Private Sub Insertfechas_viaje(instance As fechas_viaje)
    End Sub
  Partial Private Sub Updatefechas_viaje(instance As fechas_viaje)
    End Sub
  Partial Private Sub Deletefechas_viaje(instance As fechas_viaje)
    End Sub
  Partial Private Sub Insertfechas_ordene(instance As fechas_ordene)
    End Sub
  Partial Private Sub Updatefechas_ordene(instance As fechas_ordene)
    End Sub
  Partial Private Sub Deletefechas_ordene(instance As fechas_ordene)
    End Sub
  Partial Private Sub Insertempleado(instance As empleado)
    End Sub
  Partial Private Sub Updateempleado(instance As empleado)
    End Sub
  Partial Private Sub Deleteempleado(instance As empleado)
    End Sub
  Partial Private Sub Insertpersona(instance As persona)
    End Sub
  Partial Private Sub Updatepersona(instance As persona)
    End Sub
  Partial Private Sub Deletepersona(instance As persona)
    End Sub
  Partial Private Sub Insertconta_saldo(instance As conta_saldo)
    End Sub
  Partial Private Sub Updateconta_saldo(instance As conta_saldo)
    End Sub
  Partial Private Sub Deleteconta_saldo(instance As conta_saldo)
    End Sub
  Partial Private Sub Inserttipos_moneda(instance As tipos_moneda)
    End Sub
  Partial Private Sub Updatetipos_moneda(instance As tipos_moneda)
    End Sub
  Partial Private Sub Deletetipos_moneda(instance As tipos_moneda)
    End Sub
  Partial Private Sub Inserttipo_equipo(instance As tipo_equipo)
    End Sub
  Partial Private Sub Updatetipo_equipo(instance As tipo_equipo)
    End Sub
  Partial Private Sub Deletetipo_equipo(instance As tipo_equipo)
    End Sub
  Partial Private Sub Insertcomprobantes_fiscale(instance As comprobantes_fiscale)
    End Sub
  Partial Private Sub Updatecomprobantes_fiscale(instance As comprobantes_fiscale)
    End Sub
  Partial Private Sub Deletecomprobantes_fiscale(instance As comprobantes_fiscale)
    End Sub
  Partial Private Sub Insertformas_pago(instance As formas_pago)
    End Sub
  Partial Private Sub Updateformas_pago(instance As formas_pago)
    End Sub
  Partial Private Sub Deleteformas_pago(instance As formas_pago)
    End Sub
  Partial Private Sub Insertconta_Movimiento(instance As conta_Movimiento)
    End Sub
  Partial Private Sub Updateconta_Movimiento(instance As conta_Movimiento)
    End Sub
  Partial Private Sub Deleteconta_Movimiento(instance As conta_Movimiento)
    End Sub
  Partial Private Sub Inserttipos_movimiento(instance As tipos_movimiento)
    End Sub
  Partial Private Sub Updatetipos_movimiento(instance As tipos_movimiento)
    End Sub
  Partial Private Sub Deletetipos_movimiento(instance As tipos_movimiento)
    End Sub
  Partial Private Sub Insertaplicacion_movimiento(instance As aplicacion_movimiento)
    End Sub
  Partial Private Sub Updateaplicacion_movimiento(instance As aplicacion_movimiento)
    End Sub
  Partial Private Sub Deleteaplicacion_movimiento(instance As aplicacion_movimiento)
    End Sub
  Partial Private Sub Insertfacturacion(instance As facturacion)
    End Sub
  Partial Private Sub Updatefacturacion(instance As facturacion)
    End Sub
  Partial Private Sub Deletefacturacion(instance As facturacion)
    End Sub
  Partial Private Sub Insertmarca(instance As marca)
    End Sub
  Partial Private Sub Updatemarca(instance As marca)
    End Sub
  Partial Private Sub Deletemarca(instance As marca)
    End Sub
  Partial Private Sub Insertcontacto(instance As contacto)
    End Sub
  Partial Private Sub Updatecontacto(instance As contacto)
    End Sub
  Partial Private Sub Deletecontacto(instance As contacto)
    End Sub
  Partial Private Sub Insertfechas_facturacion(instance As fechas_facturacion)
    End Sub
  Partial Private Sub Updatefechas_facturacion(instance As fechas_facturacion)
    End Sub
  Partial Private Sub Deletefechas_facturacion(instance As fechas_facturacion)
    End Sub
  Partial Private Sub Insertlote_aprobacion(instance As lote_aprobacion)
    End Sub
  Partial Private Sub Updatelote_aprobacion(instance As lote_aprobacion)
    End Sub
  Partial Private Sub Deletelote_aprobacion(instance As lote_aprobacion)
    End Sub
  Partial Private Sub Insertrecoleccione(instance As recoleccione)
    End Sub
  Partial Private Sub Updaterecoleccione(instance As recoleccione)
    End Sub
  Partial Private Sub Deleterecoleccione(instance As recoleccione)
    End Sub
  Partial Private Sub Inserttipo_cambio(instance As tipo_cambio)
    End Sub
  Partial Private Sub Updatetipo_cambio(instance As tipo_cambio)
    End Sub
  Partial Private Sub Deletetipo_cambio(instance As tipo_cambio)
    End Sub
  Partial Private Sub Insertconta_cuenta(instance As conta_cuenta)
    End Sub
  Partial Private Sub Updateconta_cuenta(instance As conta_cuenta)
    End Sub
  Partial Private Sub Deleteconta_cuenta(instance As conta_cuenta)
    End Sub
  Partial Private Sub Insertfacturas_caja(instance As facturas_caja)
    End Sub
  Partial Private Sub Updatefacturas_caja(instance As facturas_caja)
    End Sub
  Partial Private Sub Deletefacturas_caja(instance As facturas_caja)
    End Sub
  Partial Private Sub Insertorden_caja(instance As orden_caja)
    End Sub
  Partial Private Sub Updateorden_caja(instance As orden_caja)
    End Sub
  Partial Private Sub Deleteorden_caja(instance As orden_caja)
    End Sub
  Partial Private Sub Insertrecargas_interna(instance As recargas_interna)
    End Sub
  Partial Private Sub Updaterecargas_interna(instance As recargas_interna)
    End Sub
  Partial Private Sub Deleterecargas_interna(instance As recargas_interna)
    End Sub
  Partial Private Sub Insertrecargas_externa(instance As recargas_externa)
    End Sub
  Partial Private Sub Updaterecargas_externa(instance As recargas_externa)
    End Sub
  Partial Private Sub Deleterecargas_externa(instance As recargas_externa)
    End Sub
  Partial Private Sub Insertlugares_recarga(instance As lugares_recarga)
    End Sub
  Partial Private Sub Updatelugares_recarga(instance As lugares_recarga)
    End Sub
  Partial Private Sub Deletelugares_recarga(instance As lugares_recarga)
    End Sub
  Partial Private Sub Insertliquidacione(instance As liquidacione)
    End Sub
  Partial Private Sub Updateliquidacione(instance As liquidacione)
    End Sub
  Partial Private Sub Deleteliquidacione(instance As liquidacione)
    End Sub
  Partial Private Sub Insertseguimiento(instance As seguimiento)
    End Sub
  Partial Private Sub Updateseguimiento(instance As seguimiento)
    End Sub
  Partial Private Sub Deleteseguimiento(instance As seguimiento)
    End Sub
  Partial Private Sub Insertpuntos_predeterminado(instance As puntos_predeterminado)
    End Sub
  Partial Private Sub Updatepuntos_predeterminado(instance As puntos_predeterminado)
    End Sub
  Partial Private Sub Deletepuntos_predeterminado(instance As puntos_predeterminado)
    End Sub
  Partial Private Sub Inserttipos_pausa(instance As tipos_pausa)
    End Sub
  Partial Private Sub Updatetipos_pausa(instance As tipos_pausa)
    End Sub
  Partial Private Sub Deletetipos_pausa(instance As tipos_pausa)
    End Sub
  Partial Private Sub Insertarrivo(instance As arrivo)
    End Sub
  Partial Private Sub Updatearrivo(instance As arrivo)
    End Sub
  Partial Private Sub Deletearrivo(instance As arrivo)
    End Sub
  Partial Private Sub InsertPausa(instance As Pausa)
    End Sub
  Partial Private Sub UpdatePausa(instance As Pausa)
    End Sub
  Partial Private Sub DeletePausa(instance As Pausa)
    End Sub
  Partial Private Sub Inserthora(instance As hora)
    End Sub
  Partial Private Sub Updatehora(instance As hora)
    End Sub
  Partial Private Sub Deletehora(instance As hora)
    End Sub
  Partial Private Sub Insertvariacion_precio(instance As variacion_precio)
    End Sub
  Partial Private Sub Updatevariacion_precio(instance As variacion_precio)
    End Sub
  Partial Private Sub Deletevariacion_precio(instance As variacion_precio)
    End Sub
  Partial Private Sub Insertdetalle_arrivo(instance As detalle_arrivo)
    End Sub
  Partial Private Sub Updatedetalle_arrivo(instance As detalle_arrivo)
    End Sub
  Partial Private Sub Deletedetalle_arrivo(instance As detalle_arrivo)
    End Sub
  Partial Private Sub Insertnotificaciones_seguimiento(instance As notificaciones_seguimiento)
    End Sub
  Partial Private Sub Updatenotificaciones_seguimiento(instance As notificaciones_seguimiento)
    End Sub
  Partial Private Sub Deletenotificaciones_seguimiento(instance As notificaciones_seguimiento)
    End Sub
  Partial Private Sub Insertcomunicacion(instance As comunicacion)
    End Sub
  Partial Private Sub Updatecomunicacion(instance As comunicacion)
    End Sub
  Partial Private Sub Deletecomunicacion(instance As comunicacion)
    End Sub
  Partial Private Sub Inserttipo_comunicacion(instance As tipo_comunicacion)
    End Sub
  Partial Private Sub Updatetipo_comunicacion(instance As tipo_comunicacion)
    End Sub
  Partial Private Sub Deletetipo_comunicacion(instance As tipo_comunicacion)
    End Sub
  Partial Private Sub Insertllave_ruta(instance As llave_ruta)
    End Sub
  Partial Private Sub Updatellave_ruta(instance As llave_ruta)
    End Sub
  Partial Private Sub Deletellave_ruta(instance As llave_ruta)
    End Sub
  Partial Private Sub Insertruta(instance As ruta)
    End Sub
  Partial Private Sub Updateruta(instance As ruta)
    End Sub
  Partial Private Sub Deleteruta(instance As ruta)
    End Sub
  Partial Private Sub Insertubicacione(instance As ubicacione)
    End Sub
  Partial Private Sub Updateubicacione(instance As ubicacione)
    End Sub
  Partial Private Sub Deleteubicacione(instance As ubicacione)
    End Sub
  Partial Private Sub Inserttarifas_chofere(instance As tarifas_chofere)
    End Sub
  Partial Private Sub Updatetarifas_chofere(instance As tarifas_chofere)
    End Sub
  Partial Private Sub Deletetarifas_chofere(instance As tarifas_chofere)
    End Sub
  Partial Private Sub Inserttarifas_trayecto(instance As tarifas_trayecto)
    End Sub
  Partial Private Sub Updatetarifas_trayecto(instance As tarifas_trayecto)
    End Sub
  Partial Private Sub Deletetarifas_trayecto(instance As tarifas_trayecto)
    End Sub
  Partial Private Sub Insertllave_trayecto(instance As llave_trayecto)
    End Sub
  Partial Private Sub Updatellave_trayecto(instance As llave_trayecto)
    End Sub
  Partial Private Sub Deletellave_trayecto(instance As llave_trayecto)
    End Sub
  Partial Private Sub Inserttrayecto_ruta(instance As trayecto_ruta)
    End Sub
  Partial Private Sub Updatetrayecto_ruta(instance As trayecto_ruta)
    End Sub
  Partial Private Sub Deletetrayecto_ruta(instance As trayecto_ruta)
    End Sub
  Partial Private Sub Inserttrayecto(instance As trayecto)
    End Sub
  Partial Private Sub Updatetrayecto(instance As trayecto)
    End Sub
  Partial Private Sub Deletetrayecto(instance As trayecto)
    End Sub
  Partial Private Sub Inserttipos_arrivo(instance As tipos_arrivo)
    End Sub
  Partial Private Sub Updatetipos_arrivo(instance As tipos_arrivo)
    End Sub
  Partial Private Sub Deletetipos_arrivo(instance As tipos_arrivo)
    End Sub
  Partial Private Sub InsertTipo_reparacion(instance As Tipo_reparacion)
    End Sub
  Partial Private Sub UpdateTipo_reparacion(instance As Tipo_reparacion)
    End Sub
  Partial Private Sub DeleteTipo_reparacion(instance As Tipo_reparacion)
    End Sub
  Partial Private Sub Insertprogramacion_servicio(instance As programacion_servicio)
    End Sub
  Partial Private Sub Updateprogramacion_servicio(instance As programacion_servicio)
    End Sub
  Partial Private Sub Deleteprogramacion_servicio(instance As programacion_servicio)
    End Sub
  Partial Private Sub Insertcosto_combustible(instance As costo_combustible)
    End Sub
  Partial Private Sub Updatecosto_combustible(instance As costo_combustible)
    End Sub
  Partial Private Sub Deletecosto_combustible(instance As costo_combustible)
    End Sub
  Partial Private Sub Insertguia(instance As guia)
    End Sub
  Partial Private Sub Updateguia(instance As guia)
    End Sub
  Partial Private Sub Deleteguia(instance As guia)
    End Sub
  Partial Private Sub Insertgastos_reparacion(instance As gastos_reparacion)
    End Sub
  Partial Private Sub Updategastos_reparacion(instance As gastos_reparacion)
    End Sub
  Partial Private Sub Deletegastos_reparacion(instance As gastos_reparacion)
    End Sub
  Partial Private Sub InsertsolicitudCotizacion(instance As solicitudCotizacion)
    End Sub
  Partial Private Sub UpdatesolicitudCotizacion(instance As solicitudCotizacion)
    End Sub
  Partial Private Sub DeletesolicitudCotizacion(instance As solicitudCotizacion)
    End Sub
  Partial Private Sub Insertprecio(instance As precio)
    End Sub
  Partial Private Sub Updateprecio(instance As precio)
    End Sub
  Partial Private Sub Deleteprecio(instance As precio)
    End Sub
  Partial Private Sub Insertmargen(instance As margen)
    End Sub
  Partial Private Sub Updatemargen(instance As margen)
    End Sub
  Partial Private Sub Deletemargen(instance As margen)
    End Sub
  Partial Private Sub Insertpreventivo(instance As preventivo)
    End Sub
  Partial Private Sub Updatepreventivo(instance As preventivo)
    End Sub
  Partial Private Sub Deletepreventivo(instance As preventivo)
    End Sub
  Partial Private Sub InsertlistaDistribucion(instance As listaDistribucion)
    End Sub
  Partial Private Sub UpdatelistaDistribucion(instance As listaDistribucion)
    End Sub
  Partial Private Sub DeletelistaDistribucion(instance As listaDistribucion)
    End Sub
  Partial Private Sub InsertcontactosServicio(instance As contactosServicio)
    End Sub
  Partial Private Sub UpdatecontactosServicio(instance As contactosServicio)
    End Sub
  Partial Private Sub DeletecontactosServicio(instance As contactosServicio)
    End Sub
  Partial Private Sub Insertcorreo(instance As correo)
    End Sub
  Partial Private Sub Updatecorreo(instance As correo)
    End Sub
  Partial Private Sub Deletecorreo(instance As correo)
    End Sub
  Partial Private Sub InsertOrdene(instance As Ordene)
    End Sub
  Partial Private Sub UpdateOrdene(instance As Ordene)
    End Sub
  Partial Private Sub DeleteOrdene(instance As Ordene)
    End Sub
  Partial Private Sub InsertOdometro(instance As Odometro)
    End Sub
  Partial Private Sub UpdateOdometro(instance As Odometro)
    End Sub
  Partial Private Sub DeleteOdometro(instance As Odometro)
    End Sub
  Partial Private Sub InsertlotesFactura(instance As lotesFactura)
    End Sub
  Partial Private Sub UpdatelotesFactura(instance As lotesFactura)
    End Sub
  Partial Private Sub DeletelotesFactura(instance As lotesFactura)
    End Sub
  Partial Private Sub Insertcontrarecibo(instance As contrarecibo)
    End Sub
  Partial Private Sub Updatecontrarecibo(instance As contrarecibo)
    End Sub
  Partial Private Sub Deletecontrarecibo(instance As contrarecibo)
    End Sub
  Partial Private Sub InserttiposViaje(instance As tiposViaje)
    End Sub
  Partial Private Sub UpdatetiposViaje(instance As tiposViaje)
    End Sub
  Partial Private Sub DeletetiposViaje(instance As tiposViaje)
    End Sub
  Partial Private Sub InsertclasificacionViaje(instance As clasificacionViaje)
    End Sub
  Partial Private Sub UpdateclasificacionViaje(instance As clasificacionViaje)
    End Sub
  Partial Private Sub DeleteclasificacionViaje(instance As clasificacionViaje)
    End Sub
  Partial Private Sub InsertnotificacionesPersonalizada(instance As notificacionesPersonalizada)
    End Sub
  Partial Private Sub UpdatenotificacionesPersonalizada(instance As notificacionesPersonalizada)
    End Sub
  Partial Private Sub DeletenotificacionesPersonalizada(instance As notificacionesPersonalizada)
    End Sub
  Partial Private Sub InsertseguimientoPorRecorrer(instance As seguimientoPorRecorrer)
    End Sub
  Partial Private Sub UpdateseguimientoPorRecorrer(instance As seguimientoPorRecorrer)
    End Sub
  Partial Private Sub DeleteseguimientoPorRecorrer(instance As seguimientoPorRecorrer)
    End Sub
  Partial Private Sub InsertCargosAdicionale(instance As CargosAdicionale)
    End Sub
  Partial Private Sub UpdateCargosAdicionale(instance As CargosAdicionale)
    End Sub
  Partial Private Sub DeleteCargosAdicionale(instance As CargosAdicionale)
    End Sub
  Partial Private Sub InsertConcepto(instance As Concepto)
    End Sub
  Partial Private Sub UpdateConcepto(instance As Concepto)
    End Sub
  Partial Private Sub DeleteConcepto(instance As Concepto)
    End Sub
  Partial Private Sub InsertcajaAsignada(instance As cajaAsignada)
    End Sub
  Partial Private Sub UpdatecajaAsignada(instance As cajaAsignada)
    End Sub
  Partial Private Sub DeletecajaAsignada(instance As cajaAsignada)
    End Sub
  Partial Private Sub InsertContactosCFDI(instance As ContactosCFDI)
    End Sub
  Partial Private Sub UpdateContactosCFDI(instance As ContactosCFDI)
    End Sub
  Partial Private Sub DeleteContactosCFDI(instance As ContactosCFDI)
    End Sub
  Partial Private Sub Inserttipos_combustible(instance As tipos_combustible)
    End Sub
  Partial Private Sub Updatetipos_combustible(instance As tipos_combustible)
    End Sub
  Partial Private Sub Deletetipos_combustible(instance As tipos_combustible)
    End Sub
  Partial Private Sub Insertinsite(instance As insite)
    End Sub
  Partial Private Sub Updateinsite(instance As insite)
    End Sub
  Partial Private Sub Deleteinsite(instance As insite)
    End Sub
  Partial Private Sub InsertcfdiPendienteCancelar(instance As cfdiPendienteCancelar)
    End Sub
  Partial Private Sub UpdatecfdiPendienteCancelar(instance As cfdiPendienteCancelar)
    End Sub
  Partial Private Sub DeletecfdiPendienteCancelar(instance As cfdiPendienteCancelar)
    End Sub
  Partial Private Sub InsertrecorridoEquipo(instance As recorridoEquipo)
    End Sub
  Partial Private Sub UpdaterecorridoEquipo(instance As recorridoEquipo)
    End Sub
  Partial Private Sub DeleterecorridoEquipo(instance As recorridoEquipo)
    End Sub
  Partial Private Sub InsertrecorridoEquipo1(instance As recorridoEquipo1)
    End Sub
  Partial Private Sub UpdaterecorridoEquipo1(instance As recorridoEquipo1)
    End Sub
  Partial Private Sub DeleterecorridoEquipo1(instance As recorridoEquipo1)
    End Sub
  Partial Private Sub InsertfallasSinReporte(instance As fallasSinReporte)
    End Sub
  Partial Private Sub UpdatefallasSinReporte(instance As fallasSinReporte)
    End Sub
  Partial Private Sub DeletefallasSinReporte(instance As fallasSinReporte)
    End Sub
  Partial Private Sub Insertreparacione1(instance As reparacione1)
    End Sub
  Partial Private Sub Updatereparacione1(instance As reparacione1)
    End Sub
  Partial Private Sub Deletereparacione1(instance As reparacione1)
    End Sub
  Partial Private Sub Insertreparacione(instance As reparacione)
    End Sub
  Partial Private Sub Updatereparacione(instance As reparacione)
    End Sub
  Partial Private Sub Deletereparacione(instance As reparacione)
    End Sub
  Partial Private Sub Insertempresa(instance As empresa)
    End Sub
  Partial Private Sub Updateempresa(instance As empresa)
    End Sub
  Partial Private Sub Deleteempresa(instance As empresa)
    End Sub
  Partial Private Sub Insertrendimiento(instance As rendimiento)
    End Sub
  Partial Private Sub Updaterendimiento(instance As rendimiento)
    End Sub
  Partial Private Sub Deleterendimiento(instance As rendimiento)
    End Sub
  Partial Private Sub InsertfacturasOtro(instance As facturasOtro)
    End Sub
  Partial Private Sub UpdatefacturasOtro(instance As facturasOtro)
    End Sub
  Partial Private Sub DeletefacturasOtro(instance As facturasOtro)
    End Sub
  Partial Private Sub Insertproveedores_pago(instance As proveedores_pago)
    End Sub
  Partial Private Sub Updateproveedores_pago(instance As proveedores_pago)
    End Sub
  Partial Private Sub Deleteproveedores_pago(instance As proveedores_pago)
    End Sub
  Partial Private Sub Insertgasto(instance As gasto)
    End Sub
  Partial Private Sub Updategasto(instance As gasto)
    End Sub
  Partial Private Sub Deletegasto(instance As gasto)
    End Sub
  Partial Private Sub Insertreportes_falla(instance As reportes_falla)
    End Sub
  Partial Private Sub Updatereportes_falla(instance As reportes_falla)
    End Sub
  Partial Private Sub Deletereportes_falla(instance As reportes_falla)
    End Sub
  Partial Private Sub Insertdatos_facturacion(instance As datos_facturacion)
    End Sub
  Partial Private Sub Updatedatos_facturacion(instance As datos_facturacion)
    End Sub
  Partial Private Sub Deletedatos_facturacion(instance As datos_facturacion)
    End Sub
  Partial Private Sub Insertcfdi(instance As cfdi)
    End Sub
  Partial Private Sub Updatecfdi(instance As cfdi)
    End Sub
  Partial Private Sub Deletecfdi(instance As cfdi)
    End Sub
  Partial Private Sub Inserttrayectos_asignado(instance As trayectos_asignado)
    End Sub
  Partial Private Sub Updatetrayectos_asignado(instance As trayectos_asignado)
    End Sub
  Partial Private Sub Deletetrayectos_asignado(instance As trayectos_asignado)
    End Sub
  Partial Private Sub Insertconfiguracion_cotizador(instance As configuracion_cotizador)
    End Sub
  Partial Private Sub Updateconfiguracion_cotizador(instance As configuracion_cotizador)
    End Sub
  Partial Private Sub Deleteconfiguracion_cotizador(instance As configuracion_cotizador)
    End Sub
  Partial Private Sub Insertprecios_caja(instance As precios_caja)
    End Sub
  Partial Private Sub Updateprecios_caja(instance As precios_caja)
    End Sub
  Partial Private Sub Deleteprecios_caja(instance As precios_caja)
    End Sub
  Partial Private Sub InsertnotasCredito(instance As notasCredito)
    End Sub
  Partial Private Sub UpdatenotasCredito(instance As notasCredito)
    End Sub
  Partial Private Sub DeletenotasCredito(instance As notasCredito)
    End Sub
  Partial Private Sub Insertfactura(instance As factura)
    End Sub
  Partial Private Sub Updatefactura(instance As factura)
    End Sub
  Partial Private Sub Deletefactura(instance As factura)
    End Sub
  Partial Private Sub InsertfacturasConCredito(instance As facturasConCredito)
    End Sub
  Partial Private Sub UpdatefacturasConCredito(instance As facturasConCredito)
    End Sub
  Partial Private Sub DeletefacturasConCredito(instance As facturasConCredito)
    End Sub
  Partial Private Sub Insertequipo_operacion(instance As equipo_operacion)
    End Sub
  Partial Private Sub Updateequipo_operacion(instance As equipo_operacion)
    End Sub
  Partial Private Sub Deleteequipo_operacion(instance As equipo_operacion)
    End Sub
  Partial Private Sub InsertCaja(instance As Caja)
    End Sub
  Partial Private Sub UpdateCaja(instance As Caja)
    End Sub
  Partial Private Sub DeleteCaja(instance As Caja)
    End Sub
  Partial Private Sub Insertdatos_caja(instance As datos_caja)
    End Sub
  Partial Private Sub Updatedatos_caja(instance As datos_caja)
    End Sub
  Partial Private Sub Deletedatos_caja(instance As datos_caja)
    End Sub
  Partial Private Sub InsertllegadaDestino(instance As llegadaDestino)
    End Sub
  Partial Private Sub UpdatellegadaDestino(instance As llegadaDestino)
    End Sub
  Partial Private Sub DeletellegadaDestino(instance As llegadaDestino)
    End Sub
  Partial Private Sub Insertequipo_asignado(instance As equipo_asignado)
    End Sub
  Partial Private Sub Updateequipo_asignado(instance As equipo_asignado)
    End Sub
  Partial Private Sub Deleteequipo_asignado(instance As equipo_asignado)
    End Sub
  Partial Private Sub Insertcotizacione(instance As cotizacione)
    End Sub
  Partial Private Sub Updatecotizacione(instance As cotizacione)
    End Sub
  Partial Private Sub Deletecotizacione(instance As cotizacione)
    End Sub
  Partial Private Sub Insertrecargas_combustible(instance As recargas_combustible)
    End Sub
  Partial Private Sub Updaterecargas_combustible(instance As recargas_combustible)
    End Sub
  Partial Private Sub Deleterecargas_combustible(instance As recargas_combustible)
    End Sub
  Partial Private Sub Insertviaje(instance As viaje)
    End Sub
  Partial Private Sub Updateviaje(instance As viaje)
    End Sub
  Partial Private Sub Deleteviaje(instance As viaje)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("tse_erpConnectionString2").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property fechas() As System.Data.Linq.Table(Of fecha)
		Get
			Return Me.GetTable(Of fecha)
		End Get
	End Property
	
	Public ReadOnly Property fechas_viajes() As System.Data.Linq.Table(Of fechas_viaje)
		Get
			Return Me.GetTable(Of fechas_viaje)
		End Get
	End Property
	
	Public ReadOnly Property fechas_ordenes() As System.Data.Linq.Table(Of fechas_ordene)
		Get
			Return Me.GetTable(Of fechas_ordene)
		End Get
	End Property
	
	Public ReadOnly Property empleados() As System.Data.Linq.Table(Of empleado)
		Get
			Return Me.GetTable(Of empleado)
		End Get
	End Property
	
	Public ReadOnly Property personas() As System.Data.Linq.Table(Of persona)
		Get
			Return Me.GetTable(Of persona)
		End Get
	End Property
	
	Public ReadOnly Property conta_saldos() As System.Data.Linq.Table(Of conta_saldo)
		Get
			Return Me.GetTable(Of conta_saldo)
		End Get
	End Property
	
	Public ReadOnly Property tipos_monedas() As System.Data.Linq.Table(Of tipos_moneda)
		Get
			Return Me.GetTable(Of tipos_moneda)
		End Get
	End Property
	
	Public ReadOnly Property tipo_equipos() As System.Data.Linq.Table(Of tipo_equipo)
		Get
			Return Me.GetTable(Of tipo_equipo)
		End Get
	End Property
	
	Public ReadOnly Property comprobantes_fiscales() As System.Data.Linq.Table(Of comprobantes_fiscale)
		Get
			Return Me.GetTable(Of comprobantes_fiscale)
		End Get
	End Property
	
	Public ReadOnly Property formas_pagos() As System.Data.Linq.Table(Of formas_pago)
		Get
			Return Me.GetTable(Of formas_pago)
		End Get
	End Property
	
	Public ReadOnly Property conta_Movimientos() As System.Data.Linq.Table(Of conta_Movimiento)
		Get
			Return Me.GetTable(Of conta_Movimiento)
		End Get
	End Property
	
	Public ReadOnly Property tipos_movimientos() As System.Data.Linq.Table(Of tipos_movimiento)
		Get
			Return Me.GetTable(Of tipos_movimiento)
		End Get
	End Property
	
	Public ReadOnly Property aplicacion_movimientos() As System.Data.Linq.Table(Of aplicacion_movimiento)
		Get
			Return Me.GetTable(Of aplicacion_movimiento)
		End Get
	End Property
	
	Public ReadOnly Property facturacions() As System.Data.Linq.Table(Of facturacion)
		Get
			Return Me.GetTable(Of facturacion)
		End Get
	End Property
	
	Public ReadOnly Property marcas() As System.Data.Linq.Table(Of marca)
		Get
			Return Me.GetTable(Of marca)
		End Get
	End Property
	
	Public ReadOnly Property contactos() As System.Data.Linq.Table(Of contacto)
		Get
			Return Me.GetTable(Of contacto)
		End Get
	End Property
	
	Public ReadOnly Property fechas_facturacions() As System.Data.Linq.Table(Of fechas_facturacion)
		Get
			Return Me.GetTable(Of fechas_facturacion)
		End Get
	End Property
	
	Public ReadOnly Property lote_aprobacions() As System.Data.Linq.Table(Of lote_aprobacion)
		Get
			Return Me.GetTable(Of lote_aprobacion)
		End Get
	End Property
	
	Public ReadOnly Property recolecciones() As System.Data.Linq.Table(Of recoleccione)
		Get
			Return Me.GetTable(Of recoleccione)
		End Get
	End Property
	
	Public ReadOnly Property tipo_cambios() As System.Data.Linq.Table(Of tipo_cambio)
		Get
			Return Me.GetTable(Of tipo_cambio)
		End Get
	End Property
	
	Public ReadOnly Property conta_cuentas() As System.Data.Linq.Table(Of conta_cuenta)
		Get
			Return Me.GetTable(Of conta_cuenta)
		End Get
	End Property
	
	Public ReadOnly Property facturas_cajas() As System.Data.Linq.Table(Of facturas_caja)
		Get
			Return Me.GetTable(Of facturas_caja)
		End Get
	End Property
	
	Public ReadOnly Property orden_cajas() As System.Data.Linq.Table(Of orden_caja)
		Get
			Return Me.GetTable(Of orden_caja)
		End Get
	End Property
	
	Public ReadOnly Property recargas_internas() As System.Data.Linq.Table(Of recargas_interna)
		Get
			Return Me.GetTable(Of recargas_interna)
		End Get
	End Property
	
	Public ReadOnly Property recargas_externas() As System.Data.Linq.Table(Of recargas_externa)
		Get
			Return Me.GetTable(Of recargas_externa)
		End Get
	End Property
	
	Public ReadOnly Property lugares_recargas() As System.Data.Linq.Table(Of lugares_recarga)
		Get
			Return Me.GetTable(Of lugares_recarga)
		End Get
	End Property
	
	Public ReadOnly Property liquidaciones() As System.Data.Linq.Table(Of liquidacione)
		Get
			Return Me.GetTable(Of liquidacione)
		End Get
	End Property
	
	Public ReadOnly Property seguimientos() As System.Data.Linq.Table(Of seguimiento)
		Get
			Return Me.GetTable(Of seguimiento)
		End Get
	End Property
	
	Public ReadOnly Property puntos_predeterminados() As System.Data.Linq.Table(Of puntos_predeterminado)
		Get
			Return Me.GetTable(Of puntos_predeterminado)
		End Get
	End Property
	
	Public ReadOnly Property tipos_pausas() As System.Data.Linq.Table(Of tipos_pausa)
		Get
			Return Me.GetTable(Of tipos_pausa)
		End Get
	End Property
	
	Public ReadOnly Property arrivos() As System.Data.Linq.Table(Of arrivo)
		Get
			Return Me.GetTable(Of arrivo)
		End Get
	End Property
	
	Public ReadOnly Property Pausas() As System.Data.Linq.Table(Of Pausa)
		Get
			Return Me.GetTable(Of Pausa)
		End Get
	End Property
	
	Public ReadOnly Property horas() As System.Data.Linq.Table(Of hora)
		Get
			Return Me.GetTable(Of hora)
		End Get
	End Property
	
	Public ReadOnly Property variacion_precios() As System.Data.Linq.Table(Of variacion_precio)
		Get
			Return Me.GetTable(Of variacion_precio)
		End Get
	End Property
	
	Public ReadOnly Property detalle_arrivos() As System.Data.Linq.Table(Of detalle_arrivo)
		Get
			Return Me.GetTable(Of detalle_arrivo)
		End Get
	End Property
	
	Public ReadOnly Property notificaciones_seguimientos() As System.Data.Linq.Table(Of notificaciones_seguimiento)
		Get
			Return Me.GetTable(Of notificaciones_seguimiento)
		End Get
	End Property
	
	Public ReadOnly Property comunicacions() As System.Data.Linq.Table(Of comunicacion)
		Get
			Return Me.GetTable(Of comunicacion)
		End Get
	End Property
	
	Public ReadOnly Property tipo_comunicacions() As System.Data.Linq.Table(Of tipo_comunicacion)
		Get
			Return Me.GetTable(Of tipo_comunicacion)
		End Get
	End Property
	
	Public ReadOnly Property llave_rutas() As System.Data.Linq.Table(Of llave_ruta)
		Get
			Return Me.GetTable(Of llave_ruta)
		End Get
	End Property
	
	Public ReadOnly Property rutas() As System.Data.Linq.Table(Of ruta)
		Get
			Return Me.GetTable(Of ruta)
		End Get
	End Property
	
	Public ReadOnly Property ubicaciones() As System.Data.Linq.Table(Of ubicacione)
		Get
			Return Me.GetTable(Of ubicacione)
		End Get
	End Property
	
	Public ReadOnly Property tarifas_choferes() As System.Data.Linq.Table(Of tarifas_chofere)
		Get
			Return Me.GetTable(Of tarifas_chofere)
		End Get
	End Property
	
	Public ReadOnly Property tarifas_trayectos() As System.Data.Linq.Table(Of tarifas_trayecto)
		Get
			Return Me.GetTable(Of tarifas_trayecto)
		End Get
	End Property
	
	Public ReadOnly Property llave_trayectos() As System.Data.Linq.Table(Of llave_trayecto)
		Get
			Return Me.GetTable(Of llave_trayecto)
		End Get
	End Property
	
	Public ReadOnly Property trayecto_rutas() As System.Data.Linq.Table(Of trayecto_ruta)
		Get
			Return Me.GetTable(Of trayecto_ruta)
		End Get
	End Property
	
	Public ReadOnly Property trayectos() As System.Data.Linq.Table(Of trayecto)
		Get
			Return Me.GetTable(Of trayecto)
		End Get
	End Property
	
	Public ReadOnly Property tipos_arrivos() As System.Data.Linq.Table(Of tipos_arrivo)
		Get
			Return Me.GetTable(Of tipos_arrivo)
		End Get
	End Property
	
	Public ReadOnly Property Tipo_reparacions() As System.Data.Linq.Table(Of Tipo_reparacion)
		Get
			Return Me.GetTable(Of Tipo_reparacion)
		End Get
	End Property
	
	Public ReadOnly Property programacion_servicios() As System.Data.Linq.Table(Of programacion_servicio)
		Get
			Return Me.GetTable(Of programacion_servicio)
		End Get
	End Property
	
	Public ReadOnly Property costo_combustibles() As System.Data.Linq.Table(Of costo_combustible)
		Get
			Return Me.GetTable(Of costo_combustible)
		End Get
	End Property
	
	Public ReadOnly Property guias() As System.Data.Linq.Table(Of guia)
		Get
			Return Me.GetTable(Of guia)
		End Get
	End Property
	
	Public ReadOnly Property gastos_reparacions() As System.Data.Linq.Table(Of gastos_reparacion)
		Get
			Return Me.GetTable(Of gastos_reparacion)
		End Get
	End Property
	
	Public ReadOnly Property solicitudCotizacions() As System.Data.Linq.Table(Of solicitudCotizacion)
		Get
			Return Me.GetTable(Of solicitudCotizacion)
		End Get
	End Property
	
	Public ReadOnly Property precios() As System.Data.Linq.Table(Of precio)
		Get
			Return Me.GetTable(Of precio)
		End Get
	End Property
	
	Public ReadOnly Property margens() As System.Data.Linq.Table(Of margen)
		Get
			Return Me.GetTable(Of margen)
		End Get
	End Property
	
	Public ReadOnly Property preventivos() As System.Data.Linq.Table(Of preventivo)
		Get
			Return Me.GetTable(Of preventivo)
		End Get
	End Property
	
	Public ReadOnly Property listaDistribucions() As System.Data.Linq.Table(Of listaDistribucion)
		Get
			Return Me.GetTable(Of listaDistribucion)
		End Get
	End Property
	
	Public ReadOnly Property contactosServicios() As System.Data.Linq.Table(Of contactosServicio)
		Get
			Return Me.GetTable(Of contactosServicio)
		End Get
	End Property
	
	Public ReadOnly Property correos() As System.Data.Linq.Table(Of correo)
		Get
			Return Me.GetTable(Of correo)
		End Get
	End Property
	
	Public ReadOnly Property Ordenes() As System.Data.Linq.Table(Of Ordene)
		Get
			Return Me.GetTable(Of Ordene)
		End Get
	End Property
	
	Public ReadOnly Property Odometros() As System.Data.Linq.Table(Of Odometro)
		Get
			Return Me.GetTable(Of Odometro)
		End Get
	End Property
	
	Public ReadOnly Property lotesFacturas() As System.Data.Linq.Table(Of lotesFactura)
		Get
			Return Me.GetTable(Of lotesFactura)
		End Get
	End Property
	
	Public ReadOnly Property contrarecibos() As System.Data.Linq.Table(Of contrarecibo)
		Get
			Return Me.GetTable(Of contrarecibo)
		End Get
	End Property
	
	Public ReadOnly Property tiposViajes() As System.Data.Linq.Table(Of tiposViaje)
		Get
			Return Me.GetTable(Of tiposViaje)
		End Get
	End Property
	
	Public ReadOnly Property clasificacionViajes() As System.Data.Linq.Table(Of clasificacionViaje)
		Get
			Return Me.GetTable(Of clasificacionViaje)
		End Get
	End Property
	
	Public ReadOnly Property notificacionesPersonalizadas() As System.Data.Linq.Table(Of notificacionesPersonalizada)
		Get
			Return Me.GetTable(Of notificacionesPersonalizada)
		End Get
	End Property
	
	Public ReadOnly Property seguimientoPorRecorrers() As System.Data.Linq.Table(Of seguimientoPorRecorrer)
		Get
			Return Me.GetTable(Of seguimientoPorRecorrer)
		End Get
	End Property
	
	Public ReadOnly Property CargosAdicionales() As System.Data.Linq.Table(Of CargosAdicionale)
		Get
			Return Me.GetTable(Of CargosAdicionale)
		End Get
	End Property
	
	Public ReadOnly Property Conceptos() As System.Data.Linq.Table(Of Concepto)
		Get
			Return Me.GetTable(Of Concepto)
		End Get
	End Property
	
	Public ReadOnly Property cajaAsignadas() As System.Data.Linq.Table(Of cajaAsignada)
		Get
			Return Me.GetTable(Of cajaAsignada)
		End Get
	End Property
	
	Public ReadOnly Property ContactosCFDIs() As System.Data.Linq.Table(Of ContactosCFDI)
		Get
			Return Me.GetTable(Of ContactosCFDI)
		End Get
	End Property
	
	Public ReadOnly Property tipos_combustibles() As System.Data.Linq.Table(Of tipos_combustible)
		Get
			Return Me.GetTable(Of tipos_combustible)
		End Get
	End Property
	
	Public ReadOnly Property insites() As System.Data.Linq.Table(Of insite)
		Get
			Return Me.GetTable(Of insite)
		End Get
	End Property
	
	Public ReadOnly Property cfdiPendienteCancelars() As System.Data.Linq.Table(Of cfdiPendienteCancelar)
		Get
			Return Me.GetTable(Of cfdiPendienteCancelar)
		End Get
	End Property
	
	Public ReadOnly Property recorridoEquipos() As System.Data.Linq.Table(Of recorridoEquipo)
		Get
			Return Me.GetTable(Of recorridoEquipo)
		End Get
	End Property
	
	Public ReadOnly Property recorridoEquipo1s() As System.Data.Linq.Table(Of recorridoEquipo1)
		Get
			Return Me.GetTable(Of recorridoEquipo1)
		End Get
	End Property
	
	Public ReadOnly Property fallasSinReportes() As System.Data.Linq.Table(Of fallasSinReporte)
		Get
			Return Me.GetTable(Of fallasSinReporte)
		End Get
	End Property
	
	Public ReadOnly Property reparacione1s() As System.Data.Linq.Table(Of reparacione1)
		Get
			Return Me.GetTable(Of reparacione1)
		End Get
	End Property
	
	Public ReadOnly Property reparaciones() As System.Data.Linq.Table(Of reparacione)
		Get
			Return Me.GetTable(Of reparacione)
		End Get
	End Property
	
	Public ReadOnly Property empresas() As System.Data.Linq.Table(Of empresa)
		Get
			Return Me.GetTable(Of empresa)
		End Get
	End Property
	
	Public ReadOnly Property rendimientos() As System.Data.Linq.Table(Of rendimiento)
		Get
			Return Me.GetTable(Of rendimiento)
		End Get
	End Property
	
	Public ReadOnly Property facturasOtros() As System.Data.Linq.Table(Of facturasOtro)
		Get
			Return Me.GetTable(Of facturasOtro)
		End Get
	End Property
	
	Public ReadOnly Property proveedores_pagos() As System.Data.Linq.Table(Of proveedores_pago)
		Get
			Return Me.GetTable(Of proveedores_pago)
		End Get
	End Property
	
	Public ReadOnly Property gastos() As System.Data.Linq.Table(Of gasto)
		Get
			Return Me.GetTable(Of gasto)
		End Get
	End Property
	
	Public ReadOnly Property reportes_fallas() As System.Data.Linq.Table(Of reportes_falla)
		Get
			Return Me.GetTable(Of reportes_falla)
		End Get
	End Property
	
	Public ReadOnly Property datos_facturacions() As System.Data.Linq.Table(Of datos_facturacion)
		Get
			Return Me.GetTable(Of datos_facturacion)
		End Get
	End Property
	
	Public ReadOnly Property cfdis() As System.Data.Linq.Table(Of cfdi)
		Get
			Return Me.GetTable(Of cfdi)
		End Get
	End Property
	
	Public ReadOnly Property trayectos_asignados() As System.Data.Linq.Table(Of trayectos_asignado)
		Get
			Return Me.GetTable(Of trayectos_asignado)
		End Get
	End Property
	
	Public ReadOnly Property configuracion_cotizadors() As System.Data.Linq.Table(Of configuracion_cotizador)
		Get
			Return Me.GetTable(Of configuracion_cotizador)
		End Get
	End Property
	
	Public ReadOnly Property precios_cajas() As System.Data.Linq.Table(Of precios_caja)
		Get
			Return Me.GetTable(Of precios_caja)
		End Get
	End Property
	
	Public ReadOnly Property notasCreditos() As System.Data.Linq.Table(Of notasCredito)
		Get
			Return Me.GetTable(Of notasCredito)
		End Get
	End Property
	
	Public ReadOnly Property facturas() As System.Data.Linq.Table(Of factura)
		Get
			Return Me.GetTable(Of factura)
		End Get
	End Property
	
	Public ReadOnly Property facturasConCreditos() As System.Data.Linq.Table(Of facturasConCredito)
		Get
			Return Me.GetTable(Of facturasConCredito)
		End Get
	End Property
	
	Public ReadOnly Property equipo_operacions() As System.Data.Linq.Table(Of equipo_operacion)
		Get
			Return Me.GetTable(Of equipo_operacion)
		End Get
	End Property
	
	Public ReadOnly Property Cajas() As System.Data.Linq.Table(Of Caja)
		Get
			Return Me.GetTable(Of Caja)
		End Get
	End Property
	
	Public ReadOnly Property datos_cajas() As System.Data.Linq.Table(Of datos_caja)
		Get
			Return Me.GetTable(Of datos_caja)
		End Get
	End Property
	
	Public ReadOnly Property llegadaDestinos() As System.Data.Linq.Table(Of llegadaDestino)
		Get
			Return Me.GetTable(Of llegadaDestino)
		End Get
	End Property
	
	Public ReadOnly Property equipo_asignados() As System.Data.Linq.Table(Of equipo_asignado)
		Get
			Return Me.GetTable(Of equipo_asignado)
		End Get
	End Property
	
	Public ReadOnly Property cotizaciones() As System.Data.Linq.Table(Of cotizacione)
		Get
			Return Me.GetTable(Of cotizacione)
		End Get
	End Property
	
	Public ReadOnly Property recargas_combustibles() As System.Data.Linq.Table(Of recargas_combustible)
		Get
			Return Me.GetTable(Of recargas_combustible)
		End Get
	End Property
	
	Public ReadOnly Property viajes() As System.Data.Linq.Table(Of viaje)
		Get
			Return Me.GetTable(Of viaje)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="fechas")>  _
Partial Public Class fecha
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_fecha As Integer
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _tipo_fecha As System.Nullable(Of Integer)
	
	Private _fechas_viajes As EntitySet(Of fechas_viaje)
	
	Private _fechas_ordenes As EntitySet(Of fechas_ordene)
	
	Private _fechas_facturacions As EntitySet(Of fechas_facturacion)
	
	Private _precios As EntitySet(Of precio)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_fechaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_fechaChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub Ontipo_fechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_fechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fechas_viajes = New EntitySet(Of fechas_viaje)(AddressOf Me.attach_fechas_viajes, AddressOf Me.detach_fechas_viajes)
		Me._fechas_ordenes = New EntitySet(Of fechas_ordene)(AddressOf Me.attach_fechas_ordenes, AddressOf Me.detach_fechas_ordenes)
		Me._fechas_facturacions = New EntitySet(Of fechas_facturacion)(AddressOf Me.attach_fechas_facturacions, AddressOf Me.detach_fechas_facturacions)
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_fecha() As Integer
		Get
			Return Me._id_fecha
		End Get
		Set
			If ((Me._id_fecha = value)  _
						= false) Then
				Me.Onid_fechaChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha = value
				Me.SendPropertyChanged("id_fecha")
				Me.Onid_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_fecha", DbType:="Int")>  _
	Public Property tipo_fecha() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_fecha
		End Get
		Set
			If (Me._tipo_fecha.Equals(value) = false) Then
				Me.Ontipo_fechaChanging(value)
				Me.SendPropertyChanging
				Me._tipo_fecha = value
				Me.SendPropertyChanged("tipo_fecha")
				Me.Ontipo_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_viaje", Storage:="_fechas_viajes", ThisKey:="id_fecha", OtherKey:="id_fecha")>  _
	Public Property fechas_viajes() As EntitySet(Of fechas_viaje)
		Get
			Return Me._fechas_viajes
		End Get
		Set
			Me._fechas_viajes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_ordene", Storage:="_fechas_ordenes", ThisKey:="id_fecha", OtherKey:="id_fecha")>  _
	Public Property fechas_ordenes() As EntitySet(Of fechas_ordene)
		Get
			Return Me._fechas_ordenes
		End Get
		Set
			Me._fechas_ordenes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_facturacion", Storage:="_fechas_facturacions", ThisKey:="id_fecha", OtherKey:="id_fecha")>  _
	Public Property fechas_facturacions() As EntitySet(Of fechas_facturacion)
		Get
			Return Me._fechas_facturacions
		End Get
		Set
			Me._fechas_facturacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_precio", Storage:="_precios", ThisKey:="id_fecha", OtherKey:="id_fecha")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fechas_viajes(ByVal entity As fechas_viaje)
		Me.SendPropertyChanging
		entity.fecha = Me
	End Sub
	
	Private Sub detach_fechas_viajes(ByVal entity As fechas_viaje)
		Me.SendPropertyChanging
		entity.fecha = Nothing
	End Sub
	
	Private Sub attach_fechas_ordenes(ByVal entity As fechas_ordene)
		Me.SendPropertyChanging
		entity.fecha = Me
	End Sub
	
	Private Sub detach_fechas_ordenes(ByVal entity As fechas_ordene)
		Me.SendPropertyChanging
		entity.fecha = Nothing
	End Sub
	
	Private Sub attach_fechas_facturacions(ByVal entity As fechas_facturacion)
		Me.SendPropertyChanging
		entity.fecha = Me
	End Sub
	
	Private Sub detach_fechas_facturacions(ByVal entity As fechas_facturacion)
		Me.SendPropertyChanging
		entity.fecha = Nothing
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.fecha = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.fecha = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class fechas_viaje
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_fecha_viaje As Integer
	
	Private _id_fecha As System.Nullable(Of Integer)
	
	Private _id_viaje As System.Nullable(Of Integer)
	
	Private _fecha As EntityRef(Of fecha)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_fecha_viajeChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_fecha_viajeChanged()
    End Sub
    Partial Private Sub Onid_fechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_fechaChanged()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fecha = CType(Nothing, EntityRef(Of fecha))
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha_viaje", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_fecha_viaje() As Integer
		Get
			Return Me._id_fecha_viaje
		End Get
		Set
			If ((Me._id_fecha_viaje = value)  _
						= false) Then
				Me.Onid_fecha_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha_viaje = value
				Me.SendPropertyChanged("id_fecha_viaje")
				Me.Onid_fecha_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha", DbType:="Int")>  _
	Public Property id_fecha() As System.Nullable(Of Integer)
		Get
			Return Me._id_fecha
		End Get
		Set
			If (Me._id_fecha.Equals(value) = false) Then
				If Me._fecha.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_fechaChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha = value
				Me.SendPropertyChanged("id_fecha")
				Me.Onid_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", DbType:="Int")>  _
	Public Property id_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._id_viaje
		End Get
		Set
			If (Me._id_viaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_viaje", Storage:="_fecha", ThisKey:="id_fecha", OtherKey:="id_fecha", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property fecha() As fecha
		Get
			Return Me._fecha.Entity
		End Get
		Set
			Dim previousValue As fecha = Me._fecha.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fecha.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fecha.Entity = Nothing
					previousValue.fechas_viajes.Remove(Me)
				End If
				Me._fecha.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_viajes.Add(Me)
					Me._id_fecha = value.id_fecha
				Else
					Me._id_fecha = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("fecha")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_fechas_viaje", Storage:="_viaje", ThisKey:="id_viaje", OtherKey:="id_viaje", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.fechas_viajes.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_viajes.Add(Me)
					Me._id_viaje = value.id_viaje
				Else
					Me._id_viaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="fechas_ordenes")>  _
Partial Public Class fechas_ordene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_fecha_orden As Integer
	
	Private _id_orden As System.Nullable(Of Integer)
	
	Private _id_fecha As System.Nullable(Of Integer)
	
	Private _fecha As EntityRef(Of fecha)
	
	Private _Ordene As EntityRef(Of Ordene)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_fecha_ordenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_fecha_ordenChanged()
    End Sub
    Partial Private Sub Onid_ordenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ordenChanged()
    End Sub
    Partial Private Sub Onid_fechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_fechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fecha = CType(Nothing, EntityRef(Of fecha))
		Me._Ordene = CType(Nothing, EntityRef(Of Ordene))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha_orden", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_fecha_orden() As Integer
		Get
			Return Me._id_fecha_orden
		End Get
		Set
			If ((Me._id_fecha_orden = value)  _
						= false) Then
				Me.Onid_fecha_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha_orden = value
				Me.SendPropertyChanged("id_fecha_orden")
				Me.Onid_fecha_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden", DbType:="Int")>  _
	Public Property id_orden() As System.Nullable(Of Integer)
		Get
			Return Me._id_orden
		End Get
		Set
			If (Me._id_orden.Equals(value) = false) Then
				If Me._Ordene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_orden = value
				Me.SendPropertyChanged("id_orden")
				Me.Onid_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha", DbType:="Int")>  _
	Public Property id_fecha() As System.Nullable(Of Integer)
		Get
			Return Me._id_fecha
		End Get
		Set
			If (Me._id_fecha.Equals(value) = false) Then
				If Me._fecha.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_fechaChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha = value
				Me.SendPropertyChanged("id_fecha")
				Me.Onid_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_ordene", Storage:="_fecha", ThisKey:="id_fecha", OtherKey:="id_fecha", IsForeignKey:=true)>  _
	Public Property fecha() As fecha
		Get
			Return Me._fecha.Entity
		End Get
		Set
			Dim previousValue As fecha = Me._fecha.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fecha.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fecha.Entity = Nothing
					previousValue.fechas_ordenes.Remove(Me)
				End If
				Me._fecha.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_ordenes.Add(Me)
					Me._id_fecha = value.id_fecha
				Else
					Me._id_fecha = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("fecha")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_fechas_ordene", Storage:="_Ordene", ThisKey:="id_orden", OtherKey:="id_orden", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Ordene() As Ordene
		Get
			Return Me._Ordene.Entity
		End Get
		Set
			Dim previousValue As Ordene = Me._Ordene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ordene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ordene.Entity = Nothing
					previousValue.fechas_ordenes.Remove(Me)
				End If
				Me._Ordene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_ordenes.Add(Me)
					Me._id_orden = value.id_orden
				Else
					Me._id_orden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ordene")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="empleados")>  _
Partial Public Class empleado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_empleado As Integer
	
	Private _id_persona As System.Nullable(Of Integer)
	
	Private _id_estadocivil As System.Nullable(Of Integer)
	
	Private _id_puesto As System.Nullable(Of Integer)
	
	Private _equipo_asignados As EntitySet(Of equipo_asignado)
	
	Private _persona As EntityRef(Of persona)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_empleadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_empleadoChanged()
    End Sub
    Partial Private Sub Onid_personaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_personaChanged()
    End Sub
    Partial Private Sub Onid_estadocivilChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_estadocivilChanged()
    End Sub
    Partial Private Sub Onid_puestoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_puestoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._equipo_asignados = New EntitySet(Of equipo_asignado)(AddressOf Me.attach_equipo_asignados, AddressOf Me.detach_equipo_asignados)
		Me._persona = CType(Nothing, EntityRef(Of persona))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empleado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_empleado() As Integer
		Get
			Return Me._id_empleado
		End Get
		Set
			If ((Me._id_empleado = value)  _
						= false) Then
				Me.Onid_empleadoChanging(value)
				Me.SendPropertyChanging
				Me._id_empleado = value
				Me.SendPropertyChanged("id_empleado")
				Me.Onid_empleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_persona", DbType:="Int")>  _
	Public Property id_persona() As System.Nullable(Of Integer)
		Get
			Return Me._id_persona
		End Get
		Set
			If (Me._id_persona.Equals(value) = false) Then
				If Me._persona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_personaChanging(value)
				Me.SendPropertyChanging
				Me._id_persona = value
				Me.SendPropertyChanged("id_persona")
				Me.Onid_personaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_estadocivil", DbType:="Int")>  _
	Public Property id_estadocivil() As System.Nullable(Of Integer)
		Get
			Return Me._id_estadocivil
		End Get
		Set
			If (Me._id_estadocivil.Equals(value) = false) Then
				Me.Onid_estadocivilChanging(value)
				Me.SendPropertyChanging
				Me._id_estadocivil = value
				Me.SendPropertyChanged("id_estadocivil")
				Me.Onid_estadocivilChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_puesto", DbType:="Int")>  _
	Public Property id_puesto() As System.Nullable(Of Integer)
		Get
			Return Me._id_puesto
		End Get
		Set
			If (Me._id_puesto.Equals(value) = false) Then
				Me.Onid_puestoChanging(value)
				Me.SendPropertyChanging
				Me._id_puesto = value
				Me.SendPropertyChanged("id_puesto")
				Me.Onid_puestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empleado_equipo_asignado", Storage:="_equipo_asignados", ThisKey:="id_empleado", OtherKey:="idEmpleado")>  _
	Public Property equipo_asignados() As EntitySet(Of equipo_asignado)
		Get
			Return Me._equipo_asignados
		End Get
		Set
			Me._equipo_asignados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_empleado", Storage:="_persona", ThisKey:="id_persona", OtherKey:="id_persona", IsForeignKey:=true)>  _
	Public Property persona() As persona
		Get
			Return Me._persona.Entity
		End Get
		Set
			Dim previousValue As persona = Me._persona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._persona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._persona.Entity = Nothing
					previousValue.empleados.Remove(Me)
				End If
				Me._persona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.empleados.Add(Me)
					Me._id_persona = value.id_persona
				Else
					Me._id_persona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("persona")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.empleado = Me
	End Sub
	
	Private Sub detach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.empleado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="personas")>  _
Partial Public Class persona
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_persona As Integer
	
	Private _primer_nombre As String
	
	Private _segundo_nombre As String
	
	Private _apellido_paterno As String
	
	Private _apellido_materno As String
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _empleados As EntitySet(Of empleado)
	
	Private _contactos As EntitySet(Of contacto)
	
	Private _comunicacions As EntitySet(Of comunicacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_personaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_personaChanged()
    End Sub
    Partial Private Sub Onprimer_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onprimer_nombreChanged()
    End Sub
    Partial Private Sub Onsegundo_nombreChanging(value As String)
    End Sub
    Partial Private Sub Onsegundo_nombreChanged()
    End Sub
    Partial Private Sub Onapellido_paternoChanging(value As String)
    End Sub
    Partial Private Sub Onapellido_paternoChanged()
    End Sub
    Partial Private Sub Onapellido_maternoChanging(value As String)
    End Sub
    Partial Private Sub Onapellido_maternoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._empleados = New EntitySet(Of empleado)(AddressOf Me.attach_empleados, AddressOf Me.detach_empleados)
		Me._contactos = New EntitySet(Of contacto)(AddressOf Me.attach_contactos, AddressOf Me.detach_contactos)
		Me._comunicacions = New EntitySet(Of comunicacion)(AddressOf Me.attach_comunicacions, AddressOf Me.detach_comunicacions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_persona", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_persona() As Integer
		Get
			Return Me._id_persona
		End Get
		Set
			If ((Me._id_persona = value)  _
						= false) Then
				Me.Onid_personaChanging(value)
				Me.SendPropertyChanging
				Me._id_persona = value
				Me.SendPropertyChanged("id_persona")
				Me.Onid_personaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_primer_nombre", DbType:="NVarChar(50)")>  _
	Public Property primer_nombre() As String
		Get
			Return Me._primer_nombre
		End Get
		Set
			If (String.Equals(Me._primer_nombre, value) = false) Then
				Me.Onprimer_nombreChanging(value)
				Me.SendPropertyChanging
				Me._primer_nombre = value
				Me.SendPropertyChanged("primer_nombre")
				Me.Onprimer_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_segundo_nombre", DbType:="NVarChar(50)")>  _
	Public Property segundo_nombre() As String
		Get
			Return Me._segundo_nombre
		End Get
		Set
			If (String.Equals(Me._segundo_nombre, value) = false) Then
				Me.Onsegundo_nombreChanging(value)
				Me.SendPropertyChanging
				Me._segundo_nombre = value
				Me.SendPropertyChanged("segundo_nombre")
				Me.Onsegundo_nombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_paterno", DbType:="NVarChar(50)")>  _
	Public Property apellido_paterno() As String
		Get
			Return Me._apellido_paterno
		End Get
		Set
			If (String.Equals(Me._apellido_paterno, value) = false) Then
				Me.Onapellido_paternoChanging(value)
				Me.SendPropertyChanging
				Me._apellido_paterno = value
				Me.SendPropertyChanged("apellido_paterno")
				Me.Onapellido_paternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_materno", DbType:="NVarChar(50)")>  _
	Public Property apellido_materno() As String
		Get
			Return Me._apellido_materno
		End Get
		Set
			If (String.Equals(Me._apellido_materno, value) = false) Then
				Me.Onapellido_maternoChanging(value)
				Me.SendPropertyChanging
				Me._apellido_materno = value
				Me.SendPropertyChanged("apellido_materno")
				Me.Onapellido_maternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_empleado", Storage:="_empleados", ThisKey:="id_persona", OtherKey:="id_persona")>  _
	Public Property empleados() As EntitySet(Of empleado)
		Get
			Return Me._empleados
		End Get
		Set
			Me._empleados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_contacto", Storage:="_contactos", ThisKey:="id_persona", OtherKey:="id_persona")>  _
	Public Property contactos() As EntitySet(Of contacto)
		Get
			Return Me._contactos
		End Get
		Set
			Me._contactos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_comunicacion", Storage:="_comunicacions", ThisKey:="id_persona", OtherKey:="id_persona")>  _
	Public Property comunicacions() As EntitySet(Of comunicacion)
		Get
			Return Me._comunicacions
		End Get
		Set
			Me._comunicacions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_empleados(ByVal entity As empleado)
		Me.SendPropertyChanging
		entity.persona = Me
	End Sub
	
	Private Sub detach_empleados(ByVal entity As empleado)
		Me.SendPropertyChanging
		entity.persona = Nothing
	End Sub
	
	Private Sub attach_contactos(ByVal entity As contacto)
		Me.SendPropertyChanging
		entity.persona = Me
	End Sub
	
	Private Sub detach_contactos(ByVal entity As contacto)
		Me.SendPropertyChanging
		entity.persona = Nothing
	End Sub
	
	Private Sub attach_comunicacions(ByVal entity As comunicacion)
		Me.SendPropertyChanging
		entity.persona = Me
	End Sub
	
	Private Sub detach_comunicacions(ByVal entity As comunicacion)
		Me.SendPropertyChanging
		entity.persona = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="conta_saldos")>  _
Partial Public Class conta_saldo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_saldo As Integer
	
	Private _saldo As System.Nullable(Of Double)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _id_cuenta As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_saldoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_saldoChanged()
    End Sub
    Partial Private Sub OnsaldoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnsaldoChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub Onid_cuentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_cuentaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_saldo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_saldo() As Integer
		Get
			Return Me._id_saldo
		End Get
		Set
			If ((Me._id_saldo = value)  _
						= false) Then
				Me.Onid_saldoChanging(value)
				Me.SendPropertyChanging
				Me._id_saldo = value
				Me.SendPropertyChanged("id_saldo")
				Me.Onid_saldoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_saldo", DbType:="Float")>  _
	Public Property saldo() As System.Nullable(Of Double)
		Get
			Return Me._saldo
		End Get
		Set
			If (Me._saldo.Equals(value) = false) Then
				Me.OnsaldoChanging(value)
				Me.SendPropertyChanging
				Me._saldo = value
				Me.SendPropertyChanged("saldo")
				Me.OnsaldoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cuenta", DbType:="Int")>  _
	Public Property id_cuenta() As System.Nullable(Of Integer)
		Get
			Return Me._id_cuenta
		End Get
		Set
			If (Me._id_cuenta.Equals(value) = false) Then
				Me.Onid_cuentaChanging(value)
				Me.SendPropertyChanging
				Me._id_cuenta = value
				Me.SendPropertyChanged("id_cuenta")
				Me.Onid_cuentaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tipos_monedas")>  _
Partial Public Class tipos_moneda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_moneda As Integer
	
	Private _moneda As String
	
	Private _precios As EntitySet(Of precio)
	
	Private _precios_cajas As EntitySet(Of precios_caja)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_monedaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_monedaChanged()
    End Sub
    Partial Private Sub OnmonedaChanging(value As String)
    End Sub
    Partial Private Sub OnmonedaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		Me._precios_cajas = New EntitySet(Of precios_caja)(AddressOf Me.attach_precios_cajas, AddressOf Me.detach_precios_cajas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_moneda", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_moneda() As Integer
		Get
			Return Me._id_moneda
		End Get
		Set
			If ((Me._id_moneda = value)  _
						= false) Then
				Me.Onid_monedaChanging(value)
				Me.SendPropertyChanging
				Me._id_moneda = value
				Me.SendPropertyChanged("id_moneda")
				Me.Onid_monedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_moneda", DbType:="NVarChar(50)")>  _
	Public Property moneda() As String
		Get
			Return Me._moneda
		End Get
		Set
			If (String.Equals(Me._moneda, value) = false) Then
				Me.OnmonedaChanging(value)
				Me.SendPropertyChanging
				Me._moneda = value
				Me.SendPropertyChanged("moneda")
				Me.OnmonedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_moneda_precio", Storage:="_precios", ThisKey:="id_moneda", OtherKey:="id_moneda")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_moneda_precios_caja", Storage:="_precios_cajas", ThisKey:="id_moneda", OtherKey:="id_moneda")>  _
	Public Property precios_cajas() As EntitySet(Of precios_caja)
		Get
			Return Me._precios_cajas
		End Get
		Set
			Me._precios_cajas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.tipos_moneda = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.tipos_moneda = Nothing
	End Sub
	
	Private Sub attach_precios_cajas(ByVal entity As precios_caja)
		Me.SendPropertyChanging
		entity.tipos_moneda = Me
	End Sub
	
	Private Sub detach_precios_cajas(ByVal entity As precios_caja)
		Me.SendPropertyChanging
		entity.tipos_moneda = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tipo_equipos")>  _
Partial Public Class tipo_equipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_equipo As Integer
	
	Private _equipo As String
	
	Private _tarifas_choferes As EntitySet(Of tarifas_chofere)
	
	Private _tarifas_trayectos As EntitySet(Of tarifas_trayecto)
	
	Private _tarifas_trayectos1 As EntitySet(Of tarifas_trayecto)
	
	Private _precios As EntitySet(Of precio)
	
	Private _equipo_operacions As EntitySet(Of equipo_operacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_equipoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_equipoChanged()
    End Sub
    Partial Private Sub OnequipoChanging(value As String)
    End Sub
    Partial Private Sub OnequipoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tarifas_choferes = New EntitySet(Of tarifas_chofere)(AddressOf Me.attach_tarifas_choferes, AddressOf Me.detach_tarifas_choferes)
		Me._tarifas_trayectos = New EntitySet(Of tarifas_trayecto)(AddressOf Me.attach_tarifas_trayectos, AddressOf Me.detach_tarifas_trayectos)
		Me._tarifas_trayectos1 = New EntitySet(Of tarifas_trayecto)(AddressOf Me.attach_tarifas_trayectos1, AddressOf Me.detach_tarifas_trayectos1)
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		Me._equipo_operacions = New EntitySet(Of equipo_operacion)(AddressOf Me.attach_equipo_operacions, AddressOf Me.detach_equipo_operacions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_equipo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_tipo_equipo() As Integer
		Get
			Return Me._id_tipo_equipo
		End Get
		Set
			If ((Me._id_tipo_equipo = value)  _
						= false) Then
				Me.Onid_tipo_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_equipo = value
				Me.SendPropertyChanged("id_tipo_equipo")
				Me.Onid_tipo_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_equipo", DbType:="NVarChar(50)")>  _
	Public Property equipo() As String
		Get
			Return Me._equipo
		End Get
		Set
			If (String.Equals(Me._equipo, value) = false) Then
				Me.OnequipoChanging(value)
				Me.SendPropertyChanging
				Me._equipo = value
				Me.SendPropertyChanged("equipo")
				Me.OnequipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_chofere", Storage:="_tarifas_choferes", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_vehiculo")>  _
	Public Property tarifas_choferes() As EntitySet(Of tarifas_chofere)
		Get
			Return Me._tarifas_choferes
		End Get
		Set
			Me._tarifas_choferes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_trayecto", Storage:="_tarifas_trayectos", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_vehiculo")>  _
	Public Property tarifas_trayectos() As EntitySet(Of tarifas_trayecto)
		Get
			Return Me._tarifas_trayectos
		End Get
		Set
			Me._tarifas_trayectos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_trayecto1", Storage:="_tarifas_trayectos1", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_vehiculo")>  _
	Public Property tarifas_trayectos1() As EntitySet(Of tarifas_trayecto)
		Get
			Return Me._tarifas_trayectos1
		End Get
		Set
			Me._tarifas_trayectos1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_precio", Storage:="_precios", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_recurso")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_equipo_operacion", Storage:="_equipo_operacions", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_equipo")>  _
	Public Property equipo_operacions() As EntitySet(Of equipo_operacion)
		Get
			Return Me._equipo_operacions
		End Get
		Set
			Me._equipo_operacions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.tipo_equipo = Me
	End Sub
	
	Private Sub detach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.tipo_equipo = Nothing
	End Sub
	
	Private Sub attach_tarifas_trayectos(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.tipo_equipo = Me
	End Sub
	
	Private Sub detach_tarifas_trayectos(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.tipo_equipo = Nothing
	End Sub
	
	Private Sub attach_tarifas_trayectos1(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.tipo_equipo1 = Me
	End Sub
	
	Private Sub detach_tarifas_trayectos1(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.tipo_equipo1 = Nothing
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.tipo_equipo = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.tipo_equipo = Nothing
	End Sub
	
	Private Sub attach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.tipo_equipo = Me
	End Sub
	
	Private Sub detach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.tipo_equipo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="comprobantes_fiscales")>  _
Partial Public Class comprobantes_fiscale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _folio As String
	
	Private _tipo_comprobante As System.Nullable(Of Integer)
	
	Private _id_gasto As System.Nullable(Of Integer)
	
	Private _id_comprobante As Integer
	
	Private _gasto As EntityRef(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfolioChanging(value As String)
    End Sub
    Partial Private Sub OnfolioChanged()
    End Sub
    Partial Private Sub Ontipo_comprobanteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_comprobanteChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    Partial Private Sub Onid_comprobanteChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_comprobanteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gasto = CType(Nothing, EntityRef(Of gasto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folio", DbType:="NVarChar(50)")>  _
	Public Property folio() As String
		Get
			Return Me._folio
		End Get
		Set
			If (String.Equals(Me._folio, value) = false) Then
				Me.OnfolioChanging(value)
				Me.SendPropertyChanging
				Me._folio = value
				Me.SendPropertyChanged("folio")
				Me.OnfolioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_comprobante", DbType:="Int")>  _
	Public Property tipo_comprobante() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_comprobante
		End Get
		Set
			If (Me._tipo_comprobante.Equals(value) = false) Then
				Me.Ontipo_comprobanteChanging(value)
				Me.SendPropertyChanging
				Me._tipo_comprobante = value
				Me.SendPropertyChanged("tipo_comprobante")
				Me.Ontipo_comprobanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", DbType:="Int")>  _
	Public Property id_gasto() As System.Nullable(Of Integer)
		Get
			Return Me._id_gasto
		End Get
		Set
			If (Me._id_gasto.Equals(value) = false) Then
				If Me._gasto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_comprobante", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_comprobante() As Integer
		Get
			Return Me._id_comprobante
		End Get
		Set
			If ((Me._id_comprobante = value)  _
						= false) Then
				Me.Onid_comprobanteChanging(value)
				Me.SendPropertyChanging
				Me._id_comprobante = value
				Me.SendPropertyChanged("id_comprobante")
				Me.Onid_comprobanteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_comprobantes_fiscale", Storage:="_gasto", ThisKey:="id_gasto", OtherKey:="id_gasto", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property gasto() As gasto
		Get
			Return Me._gasto.Entity
		End Get
		Set
			Dim previousValue As gasto = Me._gasto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gasto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gasto.Entity = Nothing
					previousValue.comprobantes_fiscales.Remove(Me)
				End If
				Me._gasto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comprobantes_fiscales.Add(Me)
					Me._id_gasto = value.id_gasto
				Else
					Me._id_gasto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gasto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class formas_pago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_forma_pago As Integer
	
	Private _referencia As String
	
	Private _forma_pago As String
	
	Private _aplicacion_movimientos As EntitySet(Of aplicacion_movimiento)
	
	Private _gastos As EntitySet(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_forma_pagoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_forma_pagoChanged()
    End Sub
    Partial Private Sub OnreferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnreferenciaChanged()
    End Sub
    Partial Private Sub Onforma_pagoChanging(value As String)
    End Sub
    Partial Private Sub Onforma_pagoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aplicacion_movimientos = New EntitySet(Of aplicacion_movimiento)(AddressOf Me.attach_aplicacion_movimientos, AddressOf Me.detach_aplicacion_movimientos)
		Me._gastos = New EntitySet(Of gasto)(AddressOf Me.attach_gastos, AddressOf Me.detach_gastos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_forma_pago", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_forma_pago() As Integer
		Get
			Return Me._id_forma_pago
		End Get
		Set
			If ((Me._id_forma_pago = value)  _
						= false) Then
				Me.Onid_forma_pagoChanging(value)
				Me.SendPropertyChanging
				Me._id_forma_pago = value
				Me.SendPropertyChanged("id_forma_pago")
				Me.Onid_forma_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencia", DbType:="NChar(10)")>  _
	Public Property referencia() As String
		Get
			Return Me._referencia
		End Get
		Set
			If (String.Equals(Me._referencia, value) = false) Then
				Me.OnreferenciaChanging(value)
				Me.SendPropertyChanging
				Me._referencia = value
				Me.SendPropertyChanged("referencia")
				Me.OnreferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_forma_pago", DbType:="NVarChar(50)")>  _
	Public Property forma_pago() As String
		Get
			Return Me._forma_pago
		End Get
		Set
			If (String.Equals(Me._forma_pago, value) = false) Then
				Me.Onforma_pagoChanging(value)
				Me.SendPropertyChanging
				Me._forma_pago = value
				Me.SendPropertyChanged("forma_pago")
				Me.Onforma_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formas_pago_aplicacion_movimiento", Storage:="_aplicacion_movimientos", ThisKey:="id_forma_pago", OtherKey:="id_forma_pago")>  _
	Public Property aplicacion_movimientos() As EntitySet(Of aplicacion_movimiento)
		Get
			Return Me._aplicacion_movimientos
		End Get
		Set
			Me._aplicacion_movimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formas_pago_gasto", Storage:="_gastos", ThisKey:="id_forma_pago", OtherKey:="id_forma_pago")>  _
	Public Property gastos() As EntitySet(Of gasto)
		Get
			Return Me._gastos
		End Get
		Set
			Me._gastos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.formas_pago = Me
	End Sub
	
	Private Sub detach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.formas_pago = Nothing
	End Sub
	
	Private Sub attach_gastos(ByVal entity As gasto)
		Me.SendPropertyChanging
		entity.formas_pago = Me
	End Sub
	
	Private Sub detach_gastos(ByVal entity As gasto)
		Me.SendPropertyChanging
		entity.formas_pago = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="conta_Movimientos")>  _
Partial Public Class conta_Movimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_movimiento As Integer
	
	Private _cantidad As System.Nullable(Of Double)
	
	Private _iva As System.Nullable(Of Double)
	
	Private _neto As System.Nullable(Of Double)
	
	Private _referencia As System.Nullable(Of Integer)
	
	Private _aplicacion_movimientos As EntitySet(Of aplicacion_movimiento)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_movimientoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_movimientoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub OnivaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnivaChanged()
    End Sub
    Partial Private Sub OnnetoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnnetoChanged()
    End Sub
    Partial Private Sub OnreferenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnreferenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aplicacion_movimientos = New EntitySet(Of aplicacion_movimiento)(AddressOf Me.attach_aplicacion_movimientos, AddressOf Me.detach_aplicacion_movimientos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_movimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_movimiento() As Integer
		Get
			Return Me._id_movimiento
		End Get
		Set
			If ((Me._id_movimiento = value)  _
						= false) Then
				Me.Onid_movimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_movimiento = value
				Me.SendPropertyChanged("id_movimiento")
				Me.Onid_movimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Float")>  _
	Public Property cantidad() As System.Nullable(Of Double)
		Get
			Return Me._cantidad
		End Get
		Set
			If (Me._cantidad.Equals(value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iva", DbType:="Float")>  _
	Public Property iva() As System.Nullable(Of Double)
		Get
			Return Me._iva
		End Get
		Set
			If (Me._iva.Equals(value) = false) Then
				Me.OnivaChanging(value)
				Me.SendPropertyChanging
				Me._iva = value
				Me.SendPropertyChanged("iva")
				Me.OnivaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_neto", DbType:="Float")>  _
	Public Property neto() As System.Nullable(Of Double)
		Get
			Return Me._neto
		End Get
		Set
			If (Me._neto.Equals(value) = false) Then
				Me.OnnetoChanging(value)
				Me.SendPropertyChanging
				Me._neto = value
				Me.SendPropertyChanged("neto")
				Me.OnnetoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencia", DbType:="Int")>  _
	Public Property referencia() As System.Nullable(Of Integer)
		Get
			Return Me._referencia
		End Get
		Set
			If (Me._referencia.Equals(value) = false) Then
				Me.OnreferenciaChanging(value)
				Me.SendPropertyChanging
				Me._referencia = value
				Me.SendPropertyChanged("referencia")
				Me.OnreferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_Movimiento_aplicacion_movimiento", Storage:="_aplicacion_movimientos", ThisKey:="id_movimiento", OtherKey:="id_movimiento")>  _
	Public Property aplicacion_movimientos() As EntitySet(Of aplicacion_movimiento)
		Get
			Return Me._aplicacion_movimientos
		End Get
		Set
			Me._aplicacion_movimientos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.conta_Movimiento = Me
	End Sub
	
	Private Sub detach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.conta_Movimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tipos_movimientos")>  _
Partial Public Class tipos_movimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_movimiento As Integer
	
	Private _tipo_movimiento As String
	
	Private _aplicacion_movimientos As EntitySet(Of aplicacion_movimiento)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_movimientoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_movimientoChanged()
    End Sub
    Partial Private Sub Ontipo_movimientoChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_movimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aplicacion_movimientos = New EntitySet(Of aplicacion_movimiento)(AddressOf Me.attach_aplicacion_movimientos, AddressOf Me.detach_aplicacion_movimientos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_movimiento", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_tipo_movimiento() As Integer
		Get
			Return Me._id_tipo_movimiento
		End Get
		Set
			If ((Me._id_tipo_movimiento = value)  _
						= false) Then
				Me.Onid_tipo_movimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_movimiento = value
				Me.SendPropertyChanged("id_tipo_movimiento")
				Me.Onid_tipo_movimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_movimiento", DbType:="NVarChar(50)")>  _
	Public Property tipo_movimiento() As String
		Get
			Return Me._tipo_movimiento
		End Get
		Set
			If (String.Equals(Me._tipo_movimiento, value) = false) Then
				Me.Ontipo_movimientoChanging(value)
				Me.SendPropertyChanging
				Me._tipo_movimiento = value
				Me.SendPropertyChanged("tipo_movimiento")
				Me.Ontipo_movimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_movimiento_aplicacion_movimiento", Storage:="_aplicacion_movimientos", ThisKey:="id_tipo_movimiento", OtherKey:="id_tipo_movimiento")>  _
	Public Property aplicacion_movimientos() As EntitySet(Of aplicacion_movimiento)
		Get
			Return Me._aplicacion_movimientos
		End Get
		Set
			Me._aplicacion_movimientos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.tipos_movimiento = Me
	End Sub
	
	Private Sub detach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.tipos_movimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class aplicacion_movimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_aplicacion As Integer
	
	Private _id_movimiento As System.Nullable(Of Integer)
	
	Private _id_cuenta As System.Nullable(Of Integer)
	
	Private _fecha_programacion As System.Nullable(Of Date)
	
	Private _fecha_ejecucion As System.Nullable(Of Date)
	
	Private _id_tipo_movimiento As System.Nullable(Of Integer)
	
	Private _id_forma_pago As System.Nullable(Of Integer)
	
	Private _descripcion As String
	
	Private _formas_pago As EntityRef(Of formas_pago)
	
	Private _tipos_movimiento As EntityRef(Of tipos_movimiento)
	
	Private _conta_Movimiento As EntityRef(Of conta_Movimiento)
	
	Private _conta_cuenta As EntityRef(Of conta_cuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_aplicacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_aplicacionChanged()
    End Sub
    Partial Private Sub Onid_movimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_movimientoChanged()
    End Sub
    Partial Private Sub Onid_cuentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_cuentaChanged()
    End Sub
    Partial Private Sub Onfecha_programacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_programacionChanged()
    End Sub
    Partial Private Sub Onfecha_ejecucionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_ejecucionChanged()
    End Sub
    Partial Private Sub Onid_tipo_movimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_movimientoChanged()
    End Sub
    Partial Private Sub Onid_forma_pagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_forma_pagoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._formas_pago = CType(Nothing, EntityRef(Of formas_pago))
		Me._tipos_movimiento = CType(Nothing, EntityRef(Of tipos_movimiento))
		Me._conta_Movimiento = CType(Nothing, EntityRef(Of conta_Movimiento))
		Me._conta_cuenta = CType(Nothing, EntityRef(Of conta_cuenta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_aplicacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_aplicacion() As Integer
		Get
			Return Me._id_aplicacion
		End Get
		Set
			If ((Me._id_aplicacion = value)  _
						= false) Then
				Me.Onid_aplicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_aplicacion = value
				Me.SendPropertyChanged("id_aplicacion")
				Me.Onid_aplicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_movimiento", DbType:="Int")>  _
	Public Property id_movimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_movimiento
		End Get
		Set
			If (Me._id_movimiento.Equals(value) = false) Then
				If Me._conta_Movimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_movimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_movimiento = value
				Me.SendPropertyChanged("id_movimiento")
				Me.Onid_movimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cuenta", DbType:="Int")>  _
	Public Property id_cuenta() As System.Nullable(Of Integer)
		Get
			Return Me._id_cuenta
		End Get
		Set
			If (Me._id_cuenta.Equals(value) = false) Then
				If Me._conta_cuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_cuentaChanging(value)
				Me.SendPropertyChanging
				Me._id_cuenta = value
				Me.SendPropertyChanged("id_cuenta")
				Me.Onid_cuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_programacion", DbType:="SmallDateTime")>  _
	Public Property fecha_programacion() As System.Nullable(Of Date)
		Get
			Return Me._fecha_programacion
		End Get
		Set
			If (Me._fecha_programacion.Equals(value) = false) Then
				Me.Onfecha_programacionChanging(value)
				Me.SendPropertyChanging
				Me._fecha_programacion = value
				Me.SendPropertyChanged("fecha_programacion")
				Me.Onfecha_programacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_ejecucion", DbType:="SmallDateTime")>  _
	Public Property fecha_ejecucion() As System.Nullable(Of Date)
		Get
			Return Me._fecha_ejecucion
		End Get
		Set
			If (Me._fecha_ejecucion.Equals(value) = false) Then
				Me.Onfecha_ejecucionChanging(value)
				Me.SendPropertyChanging
				Me._fecha_ejecucion = value
				Me.SendPropertyChanged("fecha_ejecucion")
				Me.Onfecha_ejecucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_movimiento", DbType:="Int")>  _
	Public Property id_tipo_movimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_movimiento
		End Get
		Set
			If (Me._id_tipo_movimiento.Equals(value) = false) Then
				If Me._tipos_movimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_movimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_movimiento = value
				Me.SendPropertyChanged("id_tipo_movimiento")
				Me.Onid_tipo_movimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_forma_pago", DbType:="Int")>  _
	Public Property id_forma_pago() As System.Nullable(Of Integer)
		Get
			Return Me._id_forma_pago
		End Get
		Set
			If (Me._id_forma_pago.Equals(value) = false) Then
				If Me._formas_pago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_forma_pagoChanging(value)
				Me.SendPropertyChanging
				Me._id_forma_pago = value
				Me.SendPropertyChanged("id_forma_pago")
				Me.Onid_forma_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formas_pago_aplicacion_movimiento", Storage:="_formas_pago", ThisKey:="id_forma_pago", OtherKey:="id_forma_pago", IsForeignKey:=true)>  _
	Public Property formas_pago() As formas_pago
		Get
			Return Me._formas_pago.Entity
		End Get
		Set
			Dim previousValue As formas_pago = Me._formas_pago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._formas_pago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._formas_pago.Entity = Nothing
					previousValue.aplicacion_movimientos.Remove(Me)
				End If
				Me._formas_pago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aplicacion_movimientos.Add(Me)
					Me._id_forma_pago = value.id_forma_pago
				Else
					Me._id_forma_pago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("formas_pago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_movimiento_aplicacion_movimiento", Storage:="_tipos_movimiento", ThisKey:="id_tipo_movimiento", OtherKey:="id_tipo_movimiento", IsForeignKey:=true)>  _
	Public Property tipos_movimiento() As tipos_movimiento
		Get
			Return Me._tipos_movimiento.Entity
		End Get
		Set
			Dim previousValue As tipos_movimiento = Me._tipos_movimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_movimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_movimiento.Entity = Nothing
					previousValue.aplicacion_movimientos.Remove(Me)
				End If
				Me._tipos_movimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aplicacion_movimientos.Add(Me)
					Me._id_tipo_movimiento = value.id_tipo_movimiento
				Else
					Me._id_tipo_movimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_movimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_Movimiento_aplicacion_movimiento", Storage:="_conta_Movimiento", ThisKey:="id_movimiento", OtherKey:="id_movimiento", IsForeignKey:=true)>  _
	Public Property conta_Movimiento() As conta_Movimiento
		Get
			Return Me._conta_Movimiento.Entity
		End Get
		Set
			Dim previousValue As conta_Movimiento = Me._conta_Movimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._conta_Movimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._conta_Movimiento.Entity = Nothing
					previousValue.aplicacion_movimientos.Remove(Me)
				End If
				Me._conta_Movimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aplicacion_movimientos.Add(Me)
					Me._id_movimiento = value.id_movimiento
				Else
					Me._id_movimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("conta_Movimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_aplicacion_movimiento", Storage:="_conta_cuenta", ThisKey:="id_cuenta", OtherKey:="id_cuenta", IsForeignKey:=true)>  _
	Public Property conta_cuenta() As conta_cuenta
		Get
			Return Me._conta_cuenta.Entity
		End Get
		Set
			Dim previousValue As conta_cuenta = Me._conta_cuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._conta_cuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._conta_cuenta.Entity = Nothing
					previousValue.aplicacion_movimientos.Remove(Me)
				End If
				Me._conta_cuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aplicacion_movimientos.Add(Me)
					Me._id_cuenta = value.id_cuenta
				Else
					Me._id_cuenta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("conta_cuenta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class facturacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_viaje As System.Nullable(Of Integer)
	
	Private _id_factura As System.Nullable(Of Integer)
	
	Private _id_facturacion As Integer
	
	Private _factura As EntityRef(Of factura)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    Partial Private Sub Onid_facturacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_facturacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._factura = CType(Nothing, EntityRef(Of factura))
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", DbType:="Int")>  _
	Public Property id_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._id_viaje
		End Get
		Set
			If (Me._id_viaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", DbType:="Int")>  _
	Public Property id_factura() As System.Nullable(Of Integer)
		Get
			Return Me._id_factura
		End Get
		Set
			If (Me._id_factura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_facturacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_facturacion() As Integer
		Get
			Return Me._id_facturacion
		End Get
		Set
			If ((Me._id_facturacion = value)  _
						= false) Then
				Me.Onid_facturacionChanging(value)
				Me.SendPropertyChanging
				Me._id_facturacion = value
				Me.SendPropertyChanged("id_facturacion")
				Me.Onid_facturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturacion", Storage:="_factura", ThisKey:="id_factura", OtherKey:="id_factura", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.facturacions.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturacions.Add(Me)
					Me._id_factura = value.id_factura
				Else
					Me._id_factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_facturacion", Storage:="_viaje", ThisKey:="id_viaje", OtherKey:="id_viaje", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.facturacions.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturacions.Add(Me)
					Me._id_viaje = value.id_viaje
				Else
					Me._id_viaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="marcas")>  _
Partial Public Class marca
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_marca As Integer
	
	Private _marca As String
	
	Private _equipo_operacions As EntitySet(Of equipo_operacion)
	
	Private _Cajas As EntitySet(Of Caja)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_marcaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_marcaChanged()
    End Sub
    Partial Private Sub OnmarcaChanging(value As String)
    End Sub
    Partial Private Sub OnmarcaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._equipo_operacions = New EntitySet(Of equipo_operacion)(AddressOf Me.attach_equipo_operacions, AddressOf Me.detach_equipo_operacions)
		Me._Cajas = New EntitySet(Of Caja)(AddressOf Me.attach_Cajas, AddressOf Me.detach_Cajas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_marca", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_marca() As Integer
		Get
			Return Me._id_marca
		End Get
		Set
			If ((Me._id_marca = value)  _
						= false) Then
				Me.Onid_marcaChanging(value)
				Me.SendPropertyChanging
				Me._id_marca = value
				Me.SendPropertyChanged("id_marca")
				Me.Onid_marcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marca", DbType:="NVarChar(50)")>  _
	Public Property marca() As String
		Get
			Return Me._marca
		End Get
		Set
			If (String.Equals(Me._marca, value) = false) Then
				Me.OnmarcaChanging(value)
				Me.SendPropertyChanging
				Me._marca = value
				Me.SendPropertyChanged("marca")
				Me.OnmarcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="marca_equipo_operacion", Storage:="_equipo_operacions", ThisKey:="id_marca", OtherKey:="id_marca")>  _
	Public Property equipo_operacions() As EntitySet(Of equipo_operacion)
		Get
			Return Me._equipo_operacions
		End Get
		Set
			Me._equipo_operacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="marca_Caja", Storage:="_Cajas", ThisKey:="id_marca", OtherKey:="marcaId")>  _
	Public Property Cajas() As EntitySet(Of Caja)
		Get
			Return Me._Cajas
		End Get
		Set
			Me._Cajas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.marca = Me
	End Sub
	
	Private Sub detach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.marca = Nothing
	End Sub
	
	Private Sub attach_Cajas(ByVal entity As Caja)
		Me.SendPropertyChanging
		entity.marca = Me
	End Sub
	
	Private Sub detach_Cajas(ByVal entity As Caja)
		Me.SendPropertyChanging
		entity.marca = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="contactos")>  _
Partial Public Class contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_contacto As Integer
	
	Private _correo As String
	
	Private _id_empresa As System.Nullable(Of Integer)
	
	Private _id_persona As System.Nullable(Of Integer)
	
	Private _notificaciones_seguimientos As EntitySet(Of notificaciones_seguimiento)
	
	Private _cotizaciones As EntitySet(Of cotizacione)
	
	Private _viajes As EntitySet(Of viaje)
	
	Private _persona As EntityRef(Of persona)
	
	Private _empresa As EntityRef(Of empresa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_contactoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_contactoChanged()
    End Sub
    Partial Private Sub OncorreoChanging(value As String)
    End Sub
    Partial Private Sub OncorreoChanged()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub Onid_personaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_personaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._notificaciones_seguimientos = New EntitySet(Of notificaciones_seguimiento)(AddressOf Me.attach_notificaciones_seguimientos, AddressOf Me.detach_notificaciones_seguimientos)
		Me._cotizaciones = New EntitySet(Of cotizacione)(AddressOf Me.attach_cotizaciones, AddressOf Me.detach_cotizaciones)
		Me._viajes = New EntitySet(Of viaje)(AddressOf Me.attach_viajes, AddressOf Me.detach_viajes)
		Me._persona = CType(Nothing, EntityRef(Of persona))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_contacto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_contacto() As Integer
		Get
			Return Me._id_contacto
		End Get
		Set
			If ((Me._id_contacto = value)  _
						= false) Then
				Me.Onid_contactoChanging(value)
				Me.SendPropertyChanging
				Me._id_contacto = value
				Me.SendPropertyChanged("id_contacto")
				Me.Onid_contactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correo", DbType:="NVarChar(50)")>  _
	Public Property correo() As String
		Get
			Return Me._correo
		End Get
		Set
			If (String.Equals(Me._correo, value) = false) Then
				Me.OncorreoChanging(value)
				Me.SendPropertyChanging
				Me._correo = value
				Me.SendPropertyChanged("correo")
				Me.OncorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", DbType:="Int")>  _
	Public Property id_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_empresa
		End Get
		Set
			If (Me._id_empresa.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_persona", DbType:="Int")>  _
	Public Property id_persona() As System.Nullable(Of Integer)
		Get
			Return Me._id_persona
		End Get
		Set
			If (Me._id_persona.Equals(value) = false) Then
				If Me._persona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_personaChanging(value)
				Me.SendPropertyChanging
				Me._id_persona = value
				Me.SendPropertyChanged("id_persona")
				Me.Onid_personaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_notificaciones_seguimiento", Storage:="_notificaciones_seguimientos", ThisKey:="id_contacto", OtherKey:="id_contacto")>  _
	Public Property notificaciones_seguimientos() As EntitySet(Of notificaciones_seguimiento)
		Get
			Return Me._notificaciones_seguimientos
		End Get
		Set
			Me._notificaciones_seguimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_cotizacione", Storage:="_cotizaciones", ThisKey:="id_contacto", OtherKey:="id_contacto")>  _
	Public Property cotizaciones() As EntitySet(Of cotizacione)
		Get
			Return Me._cotizaciones
		End Get
		Set
			Me._cotizaciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_viaje", Storage:="_viajes", ThisKey:="id_contacto", OtherKey:="id_contacto")>  _
	Public Property viajes() As EntitySet(Of viaje)
		Get
			Return Me._viajes
		End Get
		Set
			Me._viajes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_contacto", Storage:="_persona", ThisKey:="id_persona", OtherKey:="id_persona", IsForeignKey:=true)>  _
	Public Property persona() As persona
		Get
			Return Me._persona.Entity
		End Get
		Set
			Dim previousValue As persona = Me._persona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._persona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._persona.Entity = Nothing
					previousValue.contactos.Remove(Me)
				End If
				Me._persona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contactos.Add(Me)
					Me._id_persona = value.id_persona
				Else
					Me._id_persona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("persona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_contacto", Storage:="_empresa", ThisKey:="id_empresa", OtherKey:="id_empresa", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.contactos.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contactos.Add(Me)
					Me._id_empresa = value.id_empresa
				Else
					Me._id_empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_notificaciones_seguimientos(ByVal entity As notificaciones_seguimiento)
		Me.SendPropertyChanging
		entity.contacto = Me
	End Sub
	
	Private Sub detach_notificaciones_seguimientos(ByVal entity As notificaciones_seguimiento)
		Me.SendPropertyChanging
		entity.contacto = Nothing
	End Sub
	
	Private Sub attach_cotizaciones(ByVal entity As cotizacione)
		Me.SendPropertyChanging
		entity.contacto = Me
	End Sub
	
	Private Sub detach_cotizaciones(ByVal entity As cotizacione)
		Me.SendPropertyChanging
		entity.contacto = Nothing
	End Sub
	
	Private Sub attach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.contacto = Me
	End Sub
	
	Private Sub detach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.contacto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class fechas_facturacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_fecha_facturacion As Integer
	
	Private _id_fecha As System.Nullable(Of Integer)
	
	Private _id_factura As System.Nullable(Of Integer)
	
	Private _fecha As EntityRef(Of fecha)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_fecha_facturacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_fecha_facturacionChanged()
    End Sub
    Partial Private Sub Onid_fechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_fechaChanged()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fecha = CType(Nothing, EntityRef(Of fecha))
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha_facturacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_fecha_facturacion() As Integer
		Get
			Return Me._id_fecha_facturacion
		End Get
		Set
			If ((Me._id_fecha_facturacion = value)  _
						= false) Then
				Me.Onid_fecha_facturacionChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha_facturacion = value
				Me.SendPropertyChanged("id_fecha_facturacion")
				Me.Onid_fecha_facturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha", DbType:="Int")>  _
	Public Property id_fecha() As System.Nullable(Of Integer)
		Get
			Return Me._id_fecha
		End Get
		Set
			If (Me._id_fecha.Equals(value) = false) Then
				If Me._fecha.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_fechaChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha = value
				Me.SendPropertyChanged("id_fecha")
				Me.Onid_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", DbType:="Int")>  _
	Public Property id_factura() As System.Nullable(Of Integer)
		Get
			Return Me._id_factura
		End Get
		Set
			If (Me._id_factura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_fechas_facturacion", Storage:="_fecha", ThisKey:="id_fecha", OtherKey:="id_fecha", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property fecha() As fecha
		Get
			Return Me._fecha.Entity
		End Get
		Set
			Dim previousValue As fecha = Me._fecha.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fecha.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fecha.Entity = Nothing
					previousValue.fechas_facturacions.Remove(Me)
				End If
				Me._fecha.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_facturacions.Add(Me)
					Me._id_fecha = value.id_fecha
				Else
					Me._id_fecha = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("fecha")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_fechas_facturacion", Storage:="_factura", ThisKey:="id_factura", OtherKey:="id_factura", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.fechas_facturacions.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.fechas_facturacions.Add(Me)
					Me._id_factura = value.id_factura
				Else
					Me._id_factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class lote_aprobacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_lote As Integer
	
	Private _lote As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _gastos As EntitySet(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_loteChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_loteChanged()
    End Sub
    Partial Private Sub OnloteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnloteChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gastos = New EntitySet(Of gasto)(AddressOf Me.attach_gastos, AddressOf Me.detach_gastos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lote", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_lote() As Integer
		Get
			Return Me._id_lote
		End Get
		Set
			If ((Me._id_lote = value)  _
						= false) Then
				Me.Onid_loteChanging(value)
				Me.SendPropertyChanging
				Me._id_lote = value
				Me.SendPropertyChanged("id_lote")
				Me.Onid_loteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lote", DbType:="Int")>  _
	Public Property lote() As System.Nullable(Of Integer)
		Get
			Return Me._lote
		End Get
		Set
			If (Me._lote.Equals(value) = false) Then
				Me.OnloteChanging(value)
				Me.SendPropertyChanging
				Me._lote = value
				Me.SendPropertyChanged("lote")
				Me.OnloteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lote_aprobacion_gasto", Storage:="_gastos", ThisKey:="id_lote", OtherKey:="id_lote")>  _
	Public Property gastos() As EntitySet(Of gasto)
		Get
			Return Me._gastos
		End Get
		Set
			Me._gastos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_gastos(ByVal entity As gasto)
		Me.SendPropertyChanging
		entity.lote_aprobacion = Me
	End Sub
	
	Private Sub detach_gastos(ByVal entity As gasto)
		Me.SendPropertyChanging
		entity.lote_aprobacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="recolecciones")>  _
Partial Public Class recoleccione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_recoleccion As Integer
	
	Private _recolecciones As System.Nullable(Of Integer)
	
	Private _id_viaje As System.Nullable(Of Integer)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_recoleccionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_recoleccionChanged()
    End Sub
    Partial Private Sub OnrecoleccionesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecoleccionesChanged()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recoleccion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_recoleccion() As Integer
		Get
			Return Me._id_recoleccion
		End Get
		Set
			If ((Me._id_recoleccion = value)  _
						= false) Then
				Me.Onid_recoleccionChanging(value)
				Me.SendPropertyChanging
				Me._id_recoleccion = value
				Me.SendPropertyChanged("id_recoleccion")
				Me.Onid_recoleccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recolecciones", DbType:="Int")>  _
	Public Property recolecciones() As System.Nullable(Of Integer)
		Get
			Return Me._recolecciones
		End Get
		Set
			If (Me._recolecciones.Equals(value) = false) Then
				Me.OnrecoleccionesChanging(value)
				Me.SendPropertyChanging
				Me._recolecciones = value
				Me.SendPropertyChanged("recolecciones")
				Me.OnrecoleccionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", DbType:="Int")>  _
	Public Property id_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._id_viaje
		End Get
		Set
			If (Me._id_viaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_recoleccione", Storage:="_viaje", ThisKey:="id_viaje", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.recolecciones.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recolecciones.Add(Me)
					Me._id_viaje = value.id_viaje
				Else
					Me._id_viaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class tipo_cambio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tipo_cambio As System.Nullable(Of Decimal)
	
	Private _id_factura As System.Nullable(Of Integer)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontipo_cambioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontipo_cambioChanged()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cambio", DbType:="Decimal(18,0)")>  _
	Public Property tipo_cambio() As System.Nullable(Of Decimal)
		Get
			Return Me._tipo_cambio
		End Get
		Set
			If (Me._tipo_cambio.Equals(value) = false) Then
				Me.Ontipo_cambioChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cambio = value
				Me.SendPropertyChanged("tipo_cambio")
				Me.Ontipo_cambioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", DbType:="Int")>  _
	Public Property id_factura() As System.Nullable(Of Integer)
		Get
			Return Me._id_factura
		End Get
		Set
			If (Me._id_factura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_tipo_cambio", Storage:="_factura", ThisKey:="id_factura", OtherKey:="id_factura", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.tipo_cambios.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tipo_cambios.Add(Me)
					Me._id_factura = value.id_factura
				Else
					Me._id_factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="conta_cuentas")>  _
Partial Public Class conta_cuenta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_padre As System.Nullable(Of Integer)
	
	Private _cuenta As String
	
	Private _id_cuenta As Integer
	
	Private _clave As System.Nullable(Of Integer)
	
	Private _rango As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _aplicacion_movimientos As EntitySet(Of aplicacion_movimiento)
	
	Private _conta_cuentas As EntitySet(Of conta_cuenta)
	
	Private _proveedores_pagos As EntitySet(Of proveedores_pago)
	
	Private _conta_cuenta As EntityRef(Of conta_cuenta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_padreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_padreChanged()
    End Sub
    Partial Private Sub OncuentaChanging(value As String)
    End Sub
    Partial Private Sub OncuentaChanged()
    End Sub
    Partial Private Sub Onid_cuentaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_cuentaChanged()
    End Sub
    Partial Private Sub OnclaveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnclaveChanged()
    End Sub
    Partial Private Sub OnrangoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrangoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aplicacion_movimientos = New EntitySet(Of aplicacion_movimiento)(AddressOf Me.attach_aplicacion_movimientos, AddressOf Me.detach_aplicacion_movimientos)
		Me._conta_cuentas = New EntitySet(Of conta_cuenta)(AddressOf Me.attach_conta_cuentas, AddressOf Me.detach_conta_cuentas)
		Me._proveedores_pagos = New EntitySet(Of proveedores_pago)(AddressOf Me.attach_proveedores_pagos, AddressOf Me.detach_proveedores_pagos)
		Me._conta_cuenta = CType(Nothing, EntityRef(Of conta_cuenta))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_padre", DbType:="Int")>  _
	Public Property id_padre() As System.Nullable(Of Integer)
		Get
			Return Me._id_padre
		End Get
		Set
			If (Me._id_padre.Equals(value) = false) Then
				If Me._conta_cuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_padreChanging(value)
				Me.SendPropertyChanging
				Me._id_padre = value
				Me.SendPropertyChanged("id_padre")
				Me.Onid_padreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuenta", DbType:="NVarChar(50)")>  _
	Public Property cuenta() As String
		Get
			Return Me._cuenta
		End Get
		Set
			If (String.Equals(Me._cuenta, value) = false) Then
				Me.OncuentaChanging(value)
				Me.SendPropertyChanging
				Me._cuenta = value
				Me.SendPropertyChanged("cuenta")
				Me.OncuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cuenta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_cuenta() As Integer
		Get
			Return Me._id_cuenta
		End Get
		Set
			If ((Me._id_cuenta = value)  _
						= false) Then
				Me.Onid_cuentaChanging(value)
				Me.SendPropertyChanging
				Me._id_cuenta = value
				Me.SendPropertyChanged("id_cuenta")
				Me.Onid_cuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_clave", DbType:="Int")>  _
	Public Property clave() As System.Nullable(Of Integer)
		Get
			Return Me._clave
		End Get
		Set
			If (Me._clave.Equals(value) = false) Then
				Me.OnclaveChanging(value)
				Me.SendPropertyChanging
				Me._clave = value
				Me.SendPropertyChanged("clave")
				Me.OnclaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rango", DbType:="Int")>  _
	Public Property rango() As System.Nullable(Of Integer)
		Get
			Return Me._rango
		End Get
		Set
			If (Me._rango.Equals(value) = false) Then
				Me.OnrangoChanging(value)
				Me.SendPropertyChanging
				Me._rango = value
				Me.SendPropertyChanged("rango")
				Me.OnrangoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_aplicacion_movimiento", Storage:="_aplicacion_movimientos", ThisKey:="id_cuenta", OtherKey:="id_cuenta")>  _
	Public Property aplicacion_movimientos() As EntitySet(Of aplicacion_movimiento)
		Get
			Return Me._aplicacion_movimientos
		End Get
		Set
			Me._aplicacion_movimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_conta_cuenta", Storage:="_conta_cuentas", ThisKey:="id_cuenta", OtherKey:="id_padre")>  _
	Public Property conta_cuentas() As EntitySet(Of conta_cuenta)
		Get
			Return Me._conta_cuentas
		End Get
		Set
			Me._conta_cuentas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_proveedores_pago", Storage:="_proveedores_pagos", ThisKey:="id_cuenta", OtherKey:="id_cuenta")>  _
	Public Property proveedores_pagos() As EntitySet(Of proveedores_pago)
		Get
			Return Me._proveedores_pagos
		End Get
		Set
			Me._proveedores_pagos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_conta_cuenta", Storage:="_conta_cuenta", ThisKey:="id_padre", OtherKey:="id_cuenta", IsForeignKey:=true)>  _
	Public Property conta_cuenta() As conta_cuenta
		Get
			Return Me._conta_cuenta.Entity
		End Get
		Set
			Dim previousValue As conta_cuenta = Me._conta_cuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._conta_cuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._conta_cuenta.Entity = Nothing
					previousValue.conta_cuentas.Remove(Me)
				End If
				Me._conta_cuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.conta_cuentas.Add(Me)
					Me._id_padre = value.id_cuenta
				Else
					Me._id_padre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("conta_cuenta")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.conta_cuenta = Me
	End Sub
	
	Private Sub detach_aplicacion_movimientos(ByVal entity As aplicacion_movimiento)
		Me.SendPropertyChanging
		entity.conta_cuenta = Nothing
	End Sub
	
	Private Sub attach_conta_cuentas(ByVal entity As conta_cuenta)
		Me.SendPropertyChanging
		entity.conta_cuenta = Me
	End Sub
	
	Private Sub detach_conta_cuentas(ByVal entity As conta_cuenta)
		Me.SendPropertyChanging
		entity.conta_cuenta = Nothing
	End Sub
	
	Private Sub attach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.conta_cuenta = Me
	End Sub
	
	Private Sub detach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.conta_cuenta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="facturas_cajas")>  _
Partial Public Class facturas_caja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_servicio As Integer
	
	Private _id_factura As System.Nullable(Of Integer)
	
	Private _id_renta As System.Nullable(Of Integer)
	
	Private _inicio As System.Nullable(Of Date)
	
	Private _fin As System.Nullable(Of Date)
	
	Private _orden_caja As EntityRef(Of orden_caja)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_servicioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_servicioChanged()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    Partial Private Sub Onid_rentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_rentaChanged()
    End Sub
    Partial Private Sub OninicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OninicioChanged()
    End Sub
    Partial Private Sub OnfinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfinChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orden_caja = CType(Nothing, EntityRef(Of orden_caja))
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_servicio", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_servicio() As Integer
		Get
			Return Me._id_servicio
		End Get
		Set
			If ((Me._id_servicio = value)  _
						= false) Then
				Me.Onid_servicioChanging(value)
				Me.SendPropertyChanging
				Me._id_servicio = value
				Me.SendPropertyChanged("id_servicio")
				Me.Onid_servicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", DbType:="Int")>  _
	Public Property id_factura() As System.Nullable(Of Integer)
		Get
			Return Me._id_factura
		End Get
		Set
			If (Me._id_factura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_renta", DbType:="Int")>  _
	Public Property id_renta() As System.Nullable(Of Integer)
		Get
			Return Me._id_renta
		End Get
		Set
			If (Me._id_renta.Equals(value) = false) Then
				If Me._orden_caja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_rentaChanging(value)
				Me.SendPropertyChanging
				Me._id_renta = value
				Me.SendPropertyChanged("id_renta")
				Me.Onid_rentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inicio", DbType:="DateTime")>  _
	Public Property inicio() As System.Nullable(Of Date)
		Get
			Return Me._inicio
		End Get
		Set
			If (Me._inicio.Equals(value) = false) Then
				Me.OninicioChanging(value)
				Me.SendPropertyChanging
				Me._inicio = value
				Me.SendPropertyChanged("inicio")
				Me.OninicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fin", DbType:="DateTime")>  _
	Public Property fin() As System.Nullable(Of Date)
		Get
			Return Me._fin
		End Get
		Set
			If (Me._fin.Equals(value) = false) Then
				Me.OnfinChanging(value)
				Me.SendPropertyChanging
				Me._fin = value
				Me.SendPropertyChanged("fin")
				Me.OnfinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="orden_caja_facturas_caja", Storage:="_orden_caja", ThisKey:="id_renta", OtherKey:="id_renta", IsForeignKey:=true)>  _
	Public Property orden_caja() As orden_caja
		Get
			Return Me._orden_caja.Entity
		End Get
		Set
			Dim previousValue As orden_caja = Me._orden_caja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._orden_caja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._orden_caja.Entity = Nothing
					previousValue.facturas_cajas.Remove(Me)
				End If
				Me._orden_caja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturas_cajas.Add(Me)
					Me._id_renta = value.id_renta
				Else
					Me._id_renta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("orden_caja")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturas_caja", Storage:="_factura", ThisKey:="id_factura", OtherKey:="id_factura", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.facturas_cajas.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturas_cajas.Add(Me)
					Me._id_factura = value.id_factura
				Else
					Me._id_factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="orden_cajas")>  _
Partial Public Class orden_caja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_renta As Integer
	
	Private _id_precio As System.Nullable(Of Integer)
	
	Private _Inicio As System.Nullable(Of Date)
	
	Private _Fin As System.Nullable(Of Date)
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _ano As System.Nullable(Of Integer)
	
	Private _consecutivo As System.Nullable(Of Integer)
	
	Private _facturas_cajas As EntitySet(Of facturas_caja)
	
	Private _precios_caja As EntityRef(Of precios_caja)
	
	Private _equipo_operacion As EntityRef(Of equipo_operacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_rentaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_rentaChanged()
    End Sub
    Partial Private Sub Onid_precioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_precioChanged()
    End Sub
    Partial Private Sub OnInicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnInicioChanged()
    End Sub
    Partial Private Sub OnFinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub OnanoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnanoChanged()
    End Sub
    Partial Private Sub OnconsecutivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnconsecutivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._facturas_cajas = New EntitySet(Of facturas_caja)(AddressOf Me.attach_facturas_cajas, AddressOf Me.detach_facturas_cajas)
		Me._precios_caja = CType(Nothing, EntityRef(Of precios_caja))
		Me._equipo_operacion = CType(Nothing, EntityRef(Of equipo_operacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_renta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_renta() As Integer
		Get
			Return Me._id_renta
		End Get
		Set
			If ((Me._id_renta = value)  _
						= false) Then
				Me.Onid_rentaChanging(value)
				Me.SendPropertyChanging
				Me._id_renta = value
				Me.SendPropertyChanged("id_renta")
				Me.Onid_rentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_precio", DbType:="Int")>  _
	Public Property id_precio() As System.Nullable(Of Integer)
		Get
			Return Me._id_precio
		End Get
		Set
			If (Me._id_precio.Equals(value) = false) Then
				If Me._precios_caja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_precioChanging(value)
				Me.SendPropertyChanging
				Me._id_precio = value
				Me.SendPropertyChanged("id_precio")
				Me.Onid_precioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Inicio", DbType:="SmallDateTime")>  _
	Public Property Inicio() As System.Nullable(Of Date)
		Get
			Return Me._Inicio
		End Get
		Set
			If (Me._Inicio.Equals(value) = false) Then
				Me.OnInicioChanging(value)
				Me.SendPropertyChanging
				Me._Inicio = value
				Me.SendPropertyChanged("Inicio")
				Me.OnInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fin", DbType:="SmallDateTime")>  _
	Public Property Fin() As System.Nullable(Of Date)
		Get
			Return Me._Fin
		End Get
		Set
			If (Me._Fin.Equals(value) = false) Then
				Me.OnFinChanging(value)
				Me.SendPropertyChanging
				Me._Fin = value
				Me.SendPropertyChanged("Fin")
				Me.OnFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				If Me._equipo_operacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ano", DbType:="Int")>  _
	Public Property ano() As System.Nullable(Of Integer)
		Get
			Return Me._ano
		End Get
		Set
			If (Me._ano.Equals(value) = false) Then
				Me.OnanoChanging(value)
				Me.SendPropertyChanging
				Me._ano = value
				Me.SendPropertyChanged("ano")
				Me.OnanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_consecutivo", DbType:="Int")>  _
	Public Property consecutivo() As System.Nullable(Of Integer)
		Get
			Return Me._consecutivo
		End Get
		Set
			If (Me._consecutivo.Equals(value) = false) Then
				Me.OnconsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._consecutivo = value
				Me.SendPropertyChanged("consecutivo")
				Me.OnconsecutivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="orden_caja_facturas_caja", Storage:="_facturas_cajas", ThisKey:="id_renta", OtherKey:="id_renta")>  _
	Public Property facturas_cajas() As EntitySet(Of facturas_caja)
		Get
			Return Me._facturas_cajas
		End Get
		Set
			Me._facturas_cajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precios_caja_orden_caja", Storage:="_precios_caja", ThisKey:="id_precio", OtherKey:="id_precio_caja", IsForeignKey:=true)>  _
	Public Property precios_caja() As precios_caja
		Get
			Return Me._precios_caja.Entity
		End Get
		Set
			Dim previousValue As precios_caja = Me._precios_caja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._precios_caja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._precios_caja.Entity = Nothing
					previousValue.orden_cajas.Remove(Me)
				End If
				Me._precios_caja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orden_cajas.Add(Me)
					Me._id_precio = value.id_precio_caja
				Else
					Me._id_precio = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("precios_caja")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_orden_caja", Storage:="_equipo_operacion", ThisKey:="id_equipo", OtherKey:="id_equipo", IsForeignKey:=true)>  _
	Public Property equipo_operacion() As equipo_operacion
		Get
			Return Me._equipo_operacion.Entity
		End Get
		Set
			Dim previousValue As equipo_operacion = Me._equipo_operacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_operacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_operacion.Entity = Nothing
					previousValue.orden_cajas.Remove(Me)
				End If
				Me._equipo_operacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.orden_cajas.Add(Me)
					Me._id_equipo = value.id_equipo
				Else
					Me._id_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_operacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_facturas_cajas(ByVal entity As facturas_caja)
		Me.SendPropertyChanging
		entity.orden_caja = Me
	End Sub
	
	Private Sub detach_facturas_cajas(ByVal entity As facturas_caja)
		Me.SendPropertyChanging
		entity.orden_caja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="recargas_internas")>  _
Partial Public Class recargas_interna
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_recarga_interna As Integer
	
	Private _id_recarga As System.Nullable(Of Integer)
	
	Private _id_orden As System.Nullable(Of Integer)
	
	Private _Ordene As EntityRef(Of Ordene)
	
	Private _recargas_combustible As EntityRef(Of recargas_combustible)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_recarga_internaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_recarga_internaChanged()
    End Sub
    Partial Private Sub Onid_recargaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_recargaChanged()
    End Sub
    Partial Private Sub Onid_ordenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ordenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ordene = CType(Nothing, EntityRef(Of Ordene))
		Me._recargas_combustible = CType(Nothing, EntityRef(Of recargas_combustible))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recarga_interna", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_recarga_interna() As Integer
		Get
			Return Me._id_recarga_interna
		End Get
		Set
			If ((Me._id_recarga_interna = value)  _
						= false) Then
				Me.Onid_recarga_internaChanging(value)
				Me.SendPropertyChanging
				Me._id_recarga_interna = value
				Me.SendPropertyChanged("id_recarga_interna")
				Me.Onid_recarga_internaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recarga", DbType:="Int")>  _
	Public Property id_recarga() As System.Nullable(Of Integer)
		Get
			Return Me._id_recarga
		End Get
		Set
			If (Me._id_recarga.Equals(value) = false) Then
				If Me._recargas_combustible.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_recargaChanging(value)
				Me.SendPropertyChanging
				Me._id_recarga = value
				Me.SendPropertyChanged("id_recarga")
				Me.Onid_recargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden", DbType:="Int")>  _
	Public Property id_orden() As System.Nullable(Of Integer)
		Get
			Return Me._id_orden
		End Get
		Set
			If (Me._id_orden.Equals(value) = false) Then
				If Me._Ordene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_orden = value
				Me.SendPropertyChanged("id_orden")
				Me.Onid_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_recargas_interna", Storage:="_Ordene", ThisKey:="id_orden", OtherKey:="id_orden", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Ordene() As Ordene
		Get
			Return Me._Ordene.Entity
		End Get
		Set
			Dim previousValue As Ordene = Me._Ordene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ordene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ordene.Entity = Nothing
					previousValue.recargas_internas.Remove(Me)
				End If
				Me._Ordene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_internas.Add(Me)
					Me._id_orden = value.id_orden
				Else
					Me._id_orden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ordene")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="recargas_combustible_recargas_interna", Storage:="_recargas_combustible", ThisKey:="id_recarga", OtherKey:="id_recarga", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property recargas_combustible() As recargas_combustible
		Get
			Return Me._recargas_combustible.Entity
		End Get
		Set
			Dim previousValue As recargas_combustible = Me._recargas_combustible.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._recargas_combustible.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._recargas_combustible.Entity = Nothing
					previousValue.recargas_internas.Remove(Me)
				End If
				Me._recargas_combustible.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_internas.Add(Me)
					Me._id_recarga = value.id_recarga
				Else
					Me._id_recarga = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("recargas_combustible")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="recargas_externas")>  _
Partial Public Class recargas_externa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_recarga_externa As Integer
	
	Private _id_recarga As System.Nullable(Of Integer)
	
	Private _id_gasto As System.Nullable(Of Integer)
	
	Private _gasto As EntityRef(Of gasto)
	
	Private _recargas_combustible As EntityRef(Of recargas_combustible)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_recarga_externaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_recarga_externaChanged()
    End Sub
    Partial Private Sub Onid_recargaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_recargaChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gasto = CType(Nothing, EntityRef(Of gasto))
		Me._recargas_combustible = CType(Nothing, EntityRef(Of recargas_combustible))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recarga_externa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_recarga_externa() As Integer
		Get
			Return Me._id_recarga_externa
		End Get
		Set
			If ((Me._id_recarga_externa = value)  _
						= false) Then
				Me.Onid_recarga_externaChanging(value)
				Me.SendPropertyChanging
				Me._id_recarga_externa = value
				Me.SendPropertyChanged("id_recarga_externa")
				Me.Onid_recarga_externaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recarga", DbType:="Int")>  _
	Public Property id_recarga() As System.Nullable(Of Integer)
		Get
			Return Me._id_recarga
		End Get
		Set
			If (Me._id_recarga.Equals(value) = false) Then
				If Me._recargas_combustible.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_recargaChanging(value)
				Me.SendPropertyChanging
				Me._id_recarga = value
				Me.SendPropertyChanged("id_recarga")
				Me.Onid_recargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", DbType:="Int")>  _
	Public Property id_gasto() As System.Nullable(Of Integer)
		Get
			Return Me._id_gasto
		End Get
		Set
			If (Me._id_gasto.Equals(value) = false) Then
				If Me._gasto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_recargas_externa", Storage:="_gasto", ThisKey:="id_gasto", OtherKey:="id_gasto", IsForeignKey:=true)>  _
	Public Property gasto() As gasto
		Get
			Return Me._gasto.Entity
		End Get
		Set
			Dim previousValue As gasto = Me._gasto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gasto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gasto.Entity = Nothing
					previousValue.recargas_externas.Remove(Me)
				End If
				Me._gasto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_externas.Add(Me)
					Me._id_gasto = value.id_gasto
				Else
					Me._id_gasto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gasto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="recargas_combustible_recargas_externa", Storage:="_recargas_combustible", ThisKey:="id_recarga", OtherKey:="id_recarga", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property recargas_combustible() As recargas_combustible
		Get
			Return Me._recargas_combustible.Entity
		End Get
		Set
			Dim previousValue As recargas_combustible = Me._recargas_combustible.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._recargas_combustible.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._recargas_combustible.Entity = Nothing
					previousValue.recargas_externas.Remove(Me)
				End If
				Me._recargas_combustible.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_externas.Add(Me)
					Me._id_recarga = value.id_recarga
				Else
					Me._id_recarga = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("recargas_combustible")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class lugares_recarga
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_lugar As Integer
	
	Private _lugar As String
	
	Private _recargas_combustibles As EntitySet(Of recargas_combustible)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_lugarChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_lugarChanged()
    End Sub
    Partial Private Sub OnlugarChanging(value As String)
    End Sub
    Partial Private Sub OnlugarChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._recargas_combustibles = New EntitySet(Of recargas_combustible)(AddressOf Me.attach_recargas_combustibles, AddressOf Me.detach_recargas_combustibles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lugar", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_lugar() As Integer
		Get
			Return Me._id_lugar
		End Get
		Set
			If ((Me._id_lugar = value)  _
						= false) Then
				Me.Onid_lugarChanging(value)
				Me.SendPropertyChanging
				Me._id_lugar = value
				Me.SendPropertyChanged("id_lugar")
				Me.Onid_lugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lugar", DbType:="NVarChar(50)")>  _
	Public Property lugar() As String
		Get
			Return Me._lugar
		End Get
		Set
			If (String.Equals(Me._lugar, value) = false) Then
				Me.OnlugarChanging(value)
				Me.SendPropertyChanging
				Me._lugar = value
				Me.SendPropertyChanged("lugar")
				Me.OnlugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lugares_recarga_recargas_combustible", Storage:="_recargas_combustibles", ThisKey:="id_lugar", OtherKey:="id_lugar")>  _
	Public Property recargas_combustibles() As EntitySet(Of recargas_combustible)
		Get
			Return Me._recargas_combustibles
		End Get
		Set
			Me._recargas_combustibles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_recargas_combustibles(ByVal entity As recargas_combustible)
		Me.SendPropertyChanging
		entity.lugares_recarga = Me
	End Sub
	
	Private Sub detach_recargas_combustibles(ByVal entity As recargas_combustible)
		Me.SendPropertyChanging
		entity.lugares_recarga = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="liquidaciones")>  _
Partial Public Class liquidacione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_liquidacion As Integer
	
	Private _id_orden As System.Nullable(Of Integer)
	
	Private _id_gasto As System.Nullable(Of Integer)
	
	Private _Ordene As EntityRef(Of Ordene)
	
	Private _gasto As EntityRef(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_liquidacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_liquidacionChanged()
    End Sub
    Partial Private Sub Onid_ordenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ordenChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ordene = CType(Nothing, EntityRef(Of Ordene))
		Me._gasto = CType(Nothing, EntityRef(Of gasto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_liquidacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_liquidacion() As Integer
		Get
			Return Me._id_liquidacion
		End Get
		Set
			If ((Me._id_liquidacion = value)  _
						= false) Then
				Me.Onid_liquidacionChanging(value)
				Me.SendPropertyChanging
				Me._id_liquidacion = value
				Me.SendPropertyChanged("id_liquidacion")
				Me.Onid_liquidacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden", DbType:="Int")>  _
	Public Property id_orden() As System.Nullable(Of Integer)
		Get
			Return Me._id_orden
		End Get
		Set
			If (Me._id_orden.Equals(value) = false) Then
				If Me._Ordene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_orden = value
				Me.SendPropertyChanged("id_orden")
				Me.Onid_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", DbType:="Int")>  _
	Public Property id_gasto() As System.Nullable(Of Integer)
		Get
			Return Me._id_gasto
		End Get
		Set
			If (Me._id_gasto.Equals(value) = false) Then
				If Me._gasto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_liquidacione", Storage:="_Ordene", ThisKey:="id_orden", OtherKey:="id_orden", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Ordene() As Ordene
		Get
			Return Me._Ordene.Entity
		End Get
		Set
			Dim previousValue As Ordene = Me._Ordene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ordene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ordene.Entity = Nothing
					previousValue.liquidaciones.Remove(Me)
				End If
				Me._Ordene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.liquidaciones.Add(Me)
					Me._id_orden = value.id_orden
				Else
					Me._id_orden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ordene")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_liquidacione", Storage:="_gasto", ThisKey:="id_gasto", OtherKey:="id_gasto", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property gasto() As gasto
		Get
			Return Me._gasto.Entity
		End Get
		Set
			Dim previousValue As gasto = Me._gasto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gasto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gasto.Entity = Nothing
					previousValue.liquidaciones.Remove(Me)
				End If
				Me._gasto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.liquidaciones.Add(Me)
					Me._id_gasto = value.id_gasto
				Else
					Me._id_gasto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gasto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class seguimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _observacion As String
	
	Private _inspector As String
	
	Private _id_viaje As System.Nullable(Of Integer)
	
	Private _id_seguimiento As Integer
	
	Private _fecha_de_seguimiento As System.Nullable(Of System.DateTimeOffset)
	
	Private _puntos_predeterminados As EntitySet(Of puntos_predeterminado)
	
	Private _arrivos As EntitySet(Of arrivo)
	
	Private _Pausas As EntitySet(Of Pausa)
	
	Private _horas As EntitySet(Of hora)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnobservacionChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionChanged()
    End Sub
    Partial Private Sub OninspectorChanging(value As String)
    End Sub
    Partial Private Sub OninspectorChanged()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    Partial Private Sub Onid_seguimientoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_seguimientoChanged()
    End Sub
    Partial Private Sub Onfecha_de_seguimientoChanging(value As System.Nullable(Of System.DateTimeOffset))
    End Sub
    Partial Private Sub Onfecha_de_seguimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._puntos_predeterminados = New EntitySet(Of puntos_predeterminado)(AddressOf Me.attach_puntos_predeterminados, AddressOf Me.detach_puntos_predeterminados)
		Me._arrivos = New EntitySet(Of arrivo)(AddressOf Me.attach_arrivos, AddressOf Me.detach_arrivos)
		Me._Pausas = New EntitySet(Of Pausa)(AddressOf Me.attach_Pausas, AddressOf Me.detach_Pausas)
		Me._horas = New EntitySet(Of hora)(AddressOf Me.attach_horas, AddressOf Me.detach_horas)
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observacion", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property observacion() As String
		Get
			Return Me._observacion
		End Get
		Set
			If (String.Equals(Me._observacion, value) = false) Then
				Me.OnobservacionChanging(value)
				Me.SendPropertyChanging
				Me._observacion = value
				Me.SendPropertyChanged("observacion")
				Me.OnobservacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inspector", DbType:="NVarChar(50)")>  _
	Public Property inspector() As String
		Get
			Return Me._inspector
		End Get
		Set
			If (String.Equals(Me._inspector, value) = false) Then
				Me.OninspectorChanging(value)
				Me.SendPropertyChanging
				Me._inspector = value
				Me.SendPropertyChanged("inspector")
				Me.OninspectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", DbType:="Int")>  _
	Public Property id_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._id_viaje
		End Get
		Set
			If (Me._id_viaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_seguimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_seguimiento() As Integer
		Get
			Return Me._id_seguimiento
		End Get
		Set
			If ((Me._id_seguimiento = value)  _
						= false) Then
				Me.Onid_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_seguimiento = value
				Me.SendPropertyChanged("id_seguimiento")
				Me.Onid_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_de_seguimiento", DbType:="DateTime")>  _
	Public Property fecha_de_seguimiento() As System.Nullable(Of System.DateTimeOffset)
		Get
			Return Me._fecha_de_seguimiento
		End Get
		Set
			If (Me._fecha_de_seguimiento.Equals(value) = false) Then
				Me.Onfecha_de_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_de_seguimiento = value
				Me.SendPropertyChanged("fecha_de_seguimiento")
				Me.Onfecha_de_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_puntos_predeterminado", Storage:="_puntos_predeterminados", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento")>  _
	Public Property puntos_predeterminados() As EntitySet(Of puntos_predeterminado)
		Get
			Return Me._puntos_predeterminados
		End Get
		Set
			Me._puntos_predeterminados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_arrivo", Storage:="_arrivos", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento")>  _
	Public Property arrivos() As EntitySet(Of arrivo)
		Get
			Return Me._arrivos
		End Get
		Set
			Me._arrivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_Pausa", Storage:="_Pausas", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento")>  _
	Public Property Pausas() As EntitySet(Of Pausa)
		Get
			Return Me._Pausas
		End Get
		Set
			Me._Pausas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_hora", Storage:="_horas", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento")>  _
	Public Property horas() As EntitySet(Of hora)
		Get
			Return Me._horas
		End Get
		Set
			Me._horas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_seguimiento", Storage:="_viaje", ThisKey:="id_viaje", OtherKey:="id_viaje", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.seguimientos.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.seguimientos.Add(Me)
					Me._id_viaje = value.id_viaje
				Else
					Me._id_viaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_puntos_predeterminados(ByVal entity As puntos_predeterminado)
		Me.SendPropertyChanging
		entity.seguimiento = Me
	End Sub
	
	Private Sub detach_puntos_predeterminados(ByVal entity As puntos_predeterminado)
		Me.SendPropertyChanging
		entity.seguimiento = Nothing
	End Sub
	
	Private Sub attach_arrivos(ByVal entity As arrivo)
		Me.SendPropertyChanging
		entity.seguimiento = Me
	End Sub
	
	Private Sub detach_arrivos(ByVal entity As arrivo)
		Me.SendPropertyChanging
		entity.seguimiento = Nothing
	End Sub
	
	Private Sub attach_Pausas(ByVal entity As Pausa)
		Me.SendPropertyChanging
		entity.seguimiento = Me
	End Sub
	
	Private Sub detach_Pausas(ByVal entity As Pausa)
		Me.SendPropertyChanging
		entity.seguimiento = Nothing
	End Sub
	
	Private Sub attach_horas(ByVal entity As hora)
		Me.SendPropertyChanging
		entity.seguimiento = Me
	End Sub
	
	Private Sub detach_horas(ByVal entity As hora)
		Me.SendPropertyChanging
		entity.seguimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="puntos_predeterminados")>  _
Partial Public Class puntos_predeterminado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_punto As Integer
	
	Private _id_ubicacion As System.Nullable(Of Integer)
	
	Private _id_seguimiento As System.Nullable(Of Integer)
	
	Private _seguimiento As EntityRef(Of seguimiento)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_puntoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_puntoChanged()
    End Sub
    Partial Private Sub Onid_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_seguimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_seguimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._seguimiento = CType(Nothing, EntityRef(Of seguimiento))
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_punto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_punto() As Integer
		Get
			Return Me._id_punto
		End Get
		Set
			If ((Me._id_punto = value)  _
						= false) Then
				Me.Onid_puntoChanging(value)
				Me.SendPropertyChanging
				Me._id_punto = value
				Me.SendPropertyChanged("id_punto")
				Me.Onid_puntoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ubicacion", DbType:="Int")>  _
	Public Property id_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_ubicacion
		End Get
		Set
			If (Me._id_ubicacion.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_ubicacion = value
				Me.SendPropertyChanged("id_ubicacion")
				Me.Onid_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_seguimiento", DbType:="Int")>  _
	Public Property id_seguimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_seguimiento
		End Get
		Set
			If (Me._id_seguimiento.Equals(value) = false) Then
				If Me._seguimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_seguimiento = value
				Me.SendPropertyChanged("id_seguimiento")
				Me.Onid_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_puntos_predeterminado", Storage:="_seguimiento", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento", IsForeignKey:=true)>  _
	Public Property seguimiento() As seguimiento
		Get
			Return Me._seguimiento.Entity
		End Get
		Set
			Dim previousValue As seguimiento = Me._seguimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._seguimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._seguimiento.Entity = Nothing
					previousValue.puntos_predeterminados.Remove(Me)
				End If
				Me._seguimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.puntos_predeterminados.Add(Me)
					Me._id_seguimiento = value.id_seguimiento
				Else
					Me._id_seguimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("seguimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_puntos_predeterminado", Storage:="_ubicacione", ThisKey:="id_ubicacion", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.puntos_predeterminados.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.puntos_predeterminados.Add(Me)
					Me._id_ubicacion = value.id_principal
				Else
					Me._id_ubicacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tipos_pausas")>  _
Partial Public Class tipos_pausa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_pausa As Integer
	
	Private _pausa As String
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _Pausas As EntitySet(Of Pausa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_pausaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_pausaChanged()
    End Sub
    Partial Private Sub OnpausaChanging(value As String)
    End Sub
    Partial Private Sub OnpausaChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Pausas = New EntitySet(Of Pausa)(AddressOf Me.attach_Pausas, AddressOf Me.detach_Pausas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_pausa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_tipo_pausa() As Integer
		Get
			Return Me._id_tipo_pausa
		End Get
		Set
			If ((Me._id_tipo_pausa = value)  _
						= false) Then
				Me.Onid_tipo_pausaChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_pausa = value
				Me.SendPropertyChanged("id_tipo_pausa")
				Me.Onid_tipo_pausaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pausa", DbType:="NVarChar(50)")>  _
	Public Property pausa() As String
		Get
			Return Me._pausa
		End Get
		Set
			If (String.Equals(Me._pausa, value) = false) Then
				Me.OnpausaChanging(value)
				Me.SendPropertyChanging
				Me._pausa = value
				Me.SendPropertyChanged("pausa")
				Me.OnpausaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_pausa_Pausa", Storage:="_Pausas", ThisKey:="id_tipo_pausa", OtherKey:="tipo_pausa")>  _
	Public Property Pausas() As EntitySet(Of Pausa)
		Get
			Return Me._Pausas
		End Get
		Set
			Me._Pausas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Pausas(ByVal entity As Pausa)
		Me.SendPropertyChanging
		entity.tipos_pausa = Me
	End Sub
	
	Private Sub detach_Pausas(ByVal entity As Pausa)
		Me.SendPropertyChanging
		entity.tipos_pausa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="arrivos")>  _
Partial Public Class arrivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_arrivo As Integer
	
	Private _id_seguimiento As System.Nullable(Of Integer)
	
	Private _id_detalle As System.Nullable(Of Integer)
	
	Private _seguimiento As EntityRef(Of seguimiento)
	
	Private _detalle_arrivo As EntityRef(Of detalle_arrivo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_arrivoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_arrivoChanged()
    End Sub
    Partial Private Sub Onid_seguimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_seguimientoChanged()
    End Sub
    Partial Private Sub Onid_detalleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_detalleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._seguimiento = CType(Nothing, EntityRef(Of seguimiento))
		Me._detalle_arrivo = CType(Nothing, EntityRef(Of detalle_arrivo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_arrivo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_arrivo() As Integer
		Get
			Return Me._id_arrivo
		End Get
		Set
			If ((Me._id_arrivo = value)  _
						= false) Then
				Me.Onid_arrivoChanging(value)
				Me.SendPropertyChanging
				Me._id_arrivo = value
				Me.SendPropertyChanged("id_arrivo")
				Me.Onid_arrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_seguimiento", DbType:="Int")>  _
	Public Property id_seguimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_seguimiento
		End Get
		Set
			If (Me._id_seguimiento.Equals(value) = false) Then
				If Me._seguimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_seguimiento = value
				Me.SendPropertyChanged("id_seguimiento")
				Me.Onid_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_detalle", DbType:="Int")>  _
	Public Property id_detalle() As System.Nullable(Of Integer)
		Get
			Return Me._id_detalle
		End Get
		Set
			If (Me._id_detalle.Equals(value) = false) Then
				If Me._detalle_arrivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_detalleChanging(value)
				Me.SendPropertyChanging
				Me._id_detalle = value
				Me.SendPropertyChanged("id_detalle")
				Me.Onid_detalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_arrivo", Storage:="_seguimiento", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property seguimiento() As seguimiento
		Get
			Return Me._seguimiento.Entity
		End Get
		Set
			Dim previousValue As seguimiento = Me._seguimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._seguimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._seguimiento.Entity = Nothing
					previousValue.arrivos.Remove(Me)
				End If
				Me._seguimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.arrivos.Add(Me)
					Me._id_seguimiento = value.id_seguimiento
				Else
					Me._id_seguimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("seguimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="detalle_arrivo_arrivo", Storage:="_detalle_arrivo", ThisKey:="id_detalle", OtherKey:="id_detalle", IsForeignKey:=true)>  _
	Public Property detalle_arrivo() As detalle_arrivo
		Get
			Return Me._detalle_arrivo.Entity
		End Get
		Set
			Dim previousValue As detalle_arrivo = Me._detalle_arrivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._detalle_arrivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._detalle_arrivo.Entity = Nothing
					previousValue.arrivos.Remove(Me)
				End If
				Me._detalle_arrivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.arrivos.Add(Me)
					Me._id_detalle = value.id_detalle
				Else
					Me._id_detalle = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("detalle_arrivo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Pausas")>  _
Partial Public Class Pausa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_pausa As Integer
	
	Private _tipo_pausa As System.Nullable(Of Integer)
	
	Private _id_seguimiento As System.Nullable(Of Integer)
	
	Private _seguimiento As EntityRef(Of seguimiento)
	
	Private _tipos_pausa As EntityRef(Of tipos_pausa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_pausaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_pausaChanged()
    End Sub
    Partial Private Sub Ontipo_pausaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_pausaChanged()
    End Sub
    Partial Private Sub Onid_seguimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_seguimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._seguimiento = CType(Nothing, EntityRef(Of seguimiento))
		Me._tipos_pausa = CType(Nothing, EntityRef(Of tipos_pausa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_pausa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_pausa() As Integer
		Get
			Return Me._id_pausa
		End Get
		Set
			If ((Me._id_pausa = value)  _
						= false) Then
				Me.Onid_pausaChanging(value)
				Me.SendPropertyChanging
				Me._id_pausa = value
				Me.SendPropertyChanged("id_pausa")
				Me.Onid_pausaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_pausa", DbType:="Int")>  _
	Public Property tipo_pausa() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_pausa
		End Get
		Set
			If (Me._tipo_pausa.Equals(value) = false) Then
				If Me._tipos_pausa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_pausaChanging(value)
				Me.SendPropertyChanging
				Me._tipo_pausa = value
				Me.SendPropertyChanged("tipo_pausa")
				Me.Ontipo_pausaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_seguimiento", DbType:="Int")>  _
	Public Property id_seguimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_seguimiento
		End Get
		Set
			If (Me._id_seguimiento.Equals(value) = false) Then
				If Me._seguimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_seguimiento = value
				Me.SendPropertyChanged("id_seguimiento")
				Me.Onid_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_Pausa", Storage:="_seguimiento", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property seguimiento() As seguimiento
		Get
			Return Me._seguimiento.Entity
		End Get
		Set
			Dim previousValue As seguimiento = Me._seguimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._seguimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._seguimiento.Entity = Nothing
					previousValue.Pausas.Remove(Me)
				End If
				Me._seguimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Pausas.Add(Me)
					Me._id_seguimiento = value.id_seguimiento
				Else
					Me._id_seguimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("seguimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_pausa_Pausa", Storage:="_tipos_pausa", ThisKey:="tipo_pausa", OtherKey:="id_tipo_pausa", IsForeignKey:=true)>  _
	Public Property tipos_pausa() As tipos_pausa
		Get
			Return Me._tipos_pausa.Entity
		End Get
		Set
			Dim previousValue As tipos_pausa = Me._tipos_pausa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_pausa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_pausa.Entity = Nothing
					previousValue.Pausas.Remove(Me)
				End If
				Me._tipos_pausa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Pausas.Add(Me)
					Me._tipo_pausa = value.id_tipo_pausa
				Else
					Me._tipo_pausa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_pausa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="horas")>  _
Partial Public Class hora
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_hora As Integer
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _id_seguimiento As System.Nullable(Of Integer)
	
	Private _llegada As System.Nullable(Of Boolean)
	
	Private _seguimiento As EntityRef(Of seguimiento)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_horaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_horaChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub Onid_seguimientoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_seguimientoChanged()
    End Sub
    Partial Private Sub OnllegadaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnllegadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._seguimiento = CType(Nothing, EntityRef(Of seguimiento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_hora", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_hora() As Integer
		Get
			Return Me._id_hora
		End Get
		Set
			If ((Me._id_hora = value)  _
						= false) Then
				Me.Onid_horaChanging(value)
				Me.SendPropertyChanging
				Me._id_hora = value
				Me.SendPropertyChanged("id_hora")
				Me.Onid_horaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_seguimiento", DbType:="Int")>  _
	Public Property id_seguimiento() As System.Nullable(Of Integer)
		Get
			Return Me._id_seguimiento
		End Get
		Set
			If (Me._id_seguimiento.Equals(value) = false) Then
				If Me._seguimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_seguimientoChanging(value)
				Me.SendPropertyChanging
				Me._id_seguimiento = value
				Me.SendPropertyChanged("id_seguimiento")
				Me.Onid_seguimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_llegada", DbType:="Bit")>  _
	Public Property llegada() As System.Nullable(Of Boolean)
		Get
			Return Me._llegada
		End Get
		Set
			If (Me._llegada.Equals(value) = false) Then
				Me.OnllegadaChanging(value)
				Me.SendPropertyChanging
				Me._llegada = value
				Me.SendPropertyChanged("llegada")
				Me.OnllegadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="seguimiento_hora", Storage:="_seguimiento", ThisKey:="id_seguimiento", OtherKey:="id_seguimiento", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property seguimiento() As seguimiento
		Get
			Return Me._seguimiento.Entity
		End Get
		Set
			Dim previousValue As seguimiento = Me._seguimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._seguimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._seguimiento.Entity = Nothing
					previousValue.horas.Remove(Me)
				End If
				Me._seguimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.horas.Add(Me)
					Me._id_seguimiento = value.id_seguimiento
				Else
					Me._id_seguimiento = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("seguimiento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class variacion_precio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_precio As Integer
	
	Private _descuento As System.Nullable(Of Boolean)
	
	Private _cantidad As System.Nullable(Of Double)
	
	Private _id_relacion As System.Nullable(Of Integer)
	
	Private _precio As EntityRef(Of precio)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_precioChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_precioChanged()
    End Sub
    Partial Private Sub OndescuentoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OndescuentoChanged()
    End Sub
    Partial Private Sub OncantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub Onid_relacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_relacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._precio = CType(Nothing, EntityRef(Of precio))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_precio", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_precio() As Integer
		Get
			Return Me._id_precio
		End Get
		Set
			If ((Me._id_precio = value)  _
						= false) Then
				Me.Onid_precioChanging(value)
				Me.SendPropertyChanging
				Me._id_precio = value
				Me.SendPropertyChanged("id_precio")
				Me.Onid_precioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descuento", DbType:="Bit")>  _
	Public Property descuento() As System.Nullable(Of Boolean)
		Get
			Return Me._descuento
		End Get
		Set
			If (Me._descuento.Equals(value) = false) Then
				Me.OndescuentoChanging(value)
				Me.SendPropertyChanging
				Me._descuento = value
				Me.SendPropertyChanged("descuento")
				Me.OndescuentoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Float")>  _
	Public Property cantidad() As System.Nullable(Of Double)
		Get
			Return Me._cantidad
		End Get
		Set
			If (Me._cantidad.Equals(value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_relacion", DbType:="Int")>  _
	Public Property id_relacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_relacion
		End Get
		Set
			If (Me._id_relacion.Equals(value) = false) Then
				If Me._precio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_relacionChanging(value)
				Me.SendPropertyChanging
				Me._id_relacion = value
				Me.SendPropertyChanged("id_relacion")
				Me.Onid_relacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_variacion_precio", Storage:="_precio", ThisKey:="id_relacion", OtherKey:="id_relacion", IsForeignKey:=true)>  _
	Public Property precio() As precio
		Get
			Return Me._precio.Entity
		End Get
		Set
			Dim previousValue As precio = Me._precio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._precio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._precio.Entity = Nothing
					previousValue.variacion_precios.Remove(Me)
				End If
				Me._precio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.variacion_precios.Add(Me)
					Me._id_relacion = value.id_relacion
				Else
					Me._id_relacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("precio")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="detalle_arrivos")>  _
Partial Public Class detalle_arrivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_detalle As Integer
	
	Private _nombre As String
	
	Private _id_ubicacion As System.Nullable(Of Integer)
	
	Private _id_empresa As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _arrivos As EntitySet(Of arrivo)
	
	Private _llegadaDestinos As EntitySet(Of llegadaDestino)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
	Private _empresa As EntityRef(Of empresa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_detalleChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_detalleChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub Onid_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._arrivos = New EntitySet(Of arrivo)(AddressOf Me.attach_arrivos, AddressOf Me.detach_arrivos)
		Me._llegadaDestinos = New EntitySet(Of llegadaDestino)(AddressOf Me.attach_llegadaDestinos, AddressOf Me.detach_llegadaDestinos)
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_detalle", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_detalle() As Integer
		Get
			Return Me._id_detalle
		End Get
		Set
			If ((Me._id_detalle = value)  _
						= false) Then
				Me.Onid_detalleChanging(value)
				Me.SendPropertyChanging
				Me._id_detalle = value
				Me.SendPropertyChanged("id_detalle")
				Me.Onid_detalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="NVarChar(50)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ubicacion", DbType:="Int")>  _
	Public Property id_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_ubicacion
		End Get
		Set
			If (Me._id_ubicacion.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_ubicacion = value
				Me.SendPropertyChanged("id_ubicacion")
				Me.Onid_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", DbType:="Int")>  _
	Public Property id_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_empresa
		End Get
		Set
			If (Me._id_empresa.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="detalle_arrivo_arrivo", Storage:="_arrivos", ThisKey:="id_detalle", OtherKey:="id_detalle")>  _
	Public Property arrivos() As EntitySet(Of arrivo)
		Get
			Return Me._arrivos
		End Get
		Set
			Me._arrivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="detalle_arrivo_llegadaDestino", Storage:="_llegadaDestinos", ThisKey:="id_detalle", OtherKey:="idArrivo")>  _
	Public Property llegadaDestinos() As EntitySet(Of llegadaDestino)
		Get
			Return Me._llegadaDestinos
		End Get
		Set
			Me._llegadaDestinos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_detalle_arrivo", Storage:="_ubicacione", ThisKey:="id_ubicacion", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.detalle_arrivos.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_arrivos.Add(Me)
					Me._id_ubicacion = value.id_principal
				Else
					Me._id_ubicacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_detalle_arrivo", Storage:="_empresa", ThisKey:="id_empresa", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.detalle_arrivos.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.detalle_arrivos.Add(Me)
					Me._id_empresa = value.id_empresa
				Else
					Me._id_empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_arrivos(ByVal entity As arrivo)
		Me.SendPropertyChanging
		entity.detalle_arrivo = Me
	End Sub
	
	Private Sub detach_arrivos(ByVal entity As arrivo)
		Me.SendPropertyChanging
		entity.detalle_arrivo = Nothing
	End Sub
	
	Private Sub attach_llegadaDestinos(ByVal entity As llegadaDestino)
		Me.SendPropertyChanging
		entity.detalle_arrivo = Me
	End Sub
	
	Private Sub detach_llegadaDestinos(ByVal entity As llegadaDestino)
		Me.SendPropertyChanging
		entity.detalle_arrivo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class notificaciones_seguimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_notificacion As Integer
	
	Private _id_empresa As System.Nullable(Of Integer)
	
	Private _id_contacto As System.Nullable(Of Integer)
	
	Private _contacto As EntityRef(Of contacto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_notificacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_notificacionChanged()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub Onid_contactoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_contactoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._contacto = CType(Nothing, EntityRef(Of contacto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_notificacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_notificacion() As Integer
		Get
			Return Me._id_notificacion
		End Get
		Set
			If ((Me._id_notificacion = value)  _
						= false) Then
				Me.Onid_notificacionChanging(value)
				Me.SendPropertyChanging
				Me._id_notificacion = value
				Me.SendPropertyChanged("id_notificacion")
				Me.Onid_notificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", DbType:="Int")>  _
	Public Property id_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_empresa
		End Get
		Set
			If (Me._id_empresa.Equals(value) = false) Then
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_contacto", DbType:="Int")>  _
	Public Property id_contacto() As System.Nullable(Of Integer)
		Get
			Return Me._id_contacto
		End Get
		Set
			If (Me._id_contacto.Equals(value) = false) Then
				If Me._contacto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_contactoChanging(value)
				Me.SendPropertyChanging
				Me._id_contacto = value
				Me.SendPropertyChanged("id_contacto")
				Me.Onid_contactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_notificaciones_seguimiento", Storage:="_contacto", ThisKey:="id_contacto", OtherKey:="id_contacto", IsForeignKey:=true)>  _
	Public Property contacto() As contacto
		Get
			Return Me._contacto.Entity
		End Get
		Set
			Dim previousValue As contacto = Me._contacto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._contacto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._contacto.Entity = Nothing
					previousValue.notificaciones_seguimientos.Remove(Me)
				End If
				Me._contacto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.notificaciones_seguimientos.Add(Me)
					Me._id_contacto = value.id_contacto
				Else
					Me._id_contacto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("contacto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class comunicacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_comunicacion As Integer
	
	Private _numero As String
	
	Private _tipo_comunicacion As System.Nullable(Of Integer)
	
	Private _id_persona As System.Nullable(Of Integer)
	
	Private _persona As EntityRef(Of persona)
	
	Private _tipo_comunicacion1 As EntityRef(Of tipo_comunicacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_comunicacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_comunicacionChanged()
    End Sub
    Partial Private Sub OnnumeroChanging(value As String)
    End Sub
    Partial Private Sub OnnumeroChanged()
    End Sub
    Partial Private Sub Ontipo_comunicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_comunicacionChanged()
    End Sub
    Partial Private Sub Onid_personaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_personaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._persona = CType(Nothing, EntityRef(Of persona))
		Me._tipo_comunicacion1 = CType(Nothing, EntityRef(Of tipo_comunicacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_comunicacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_comunicacion() As Integer
		Get
			Return Me._id_comunicacion
		End Get
		Set
			If ((Me._id_comunicacion = value)  _
						= false) Then
				Me.Onid_comunicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_comunicacion = value
				Me.SendPropertyChanged("id_comunicacion")
				Me.Onid_comunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_numero", DbType:="NVarChar(50)")>  _
	Public Property numero() As String
		Get
			Return Me._numero
		End Get
		Set
			If (String.Equals(Me._numero, value) = false) Then
				Me.OnnumeroChanging(value)
				Me.SendPropertyChanging
				Me._numero = value
				Me.SendPropertyChanged("numero")
				Me.OnnumeroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_comunicacion", DbType:="Int")>  _
	Public Property tipo_comunicacion() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_comunicacion
		End Get
		Set
			If (Me._tipo_comunicacion.Equals(value) = false) Then
				If Me._tipo_comunicacion1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_comunicacionChanging(value)
				Me.SendPropertyChanging
				Me._tipo_comunicacion = value
				Me.SendPropertyChanged("tipo_comunicacion")
				Me.Ontipo_comunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_persona", DbType:="Int")>  _
	Public Property id_persona() As System.Nullable(Of Integer)
		Get
			Return Me._id_persona
		End Get
		Set
			If (Me._id_persona.Equals(value) = false) Then
				If Me._persona.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_personaChanging(value)
				Me.SendPropertyChanging
				Me._id_persona = value
				Me.SendPropertyChanged("id_persona")
				Me.Onid_personaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="persona_comunicacion", Storage:="_persona", ThisKey:="id_persona", OtherKey:="id_persona", IsForeignKey:=true)>  _
	Public Property persona() As persona
		Get
			Return Me._persona.Entity
		End Get
		Set
			Dim previousValue As persona = Me._persona.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._persona.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._persona.Entity = Nothing
					previousValue.comunicacions.Remove(Me)
				End If
				Me._persona.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comunicacions.Add(Me)
					Me._id_persona = value.id_persona
				Else
					Me._id_persona = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("persona")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_comunicacion_comunicacion", Storage:="_tipo_comunicacion1", ThisKey:="tipo_comunicacion", OtherKey:="id_tipo_comunicacion", IsForeignKey:=true)>  _
	Public Property tipo_comunicacion1() As tipo_comunicacion
		Get
			Return Me._tipo_comunicacion1.Entity
		End Get
		Set
			Dim previousValue As tipo_comunicacion = Me._tipo_comunicacion1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_comunicacion1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_comunicacion1.Entity = Nothing
					previousValue.comunicacions.Remove(Me)
				End If
				Me._tipo_comunicacion1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.comunicacions.Add(Me)
					Me._tipo_comunicacion = value.id_tipo_comunicacion
				Else
					Me._tipo_comunicacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_comunicacion1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class tipo_comunicacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_comunicacion As Integer
	
	Private _tipo_comunicacion As String
	
	Private _comunicacions As EntitySet(Of comunicacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_comunicacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_comunicacionChanged()
    End Sub
    Partial Private Sub Ontipo_comunicacionChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_comunicacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comunicacions = New EntitySet(Of comunicacion)(AddressOf Me.attach_comunicacions, AddressOf Me.detach_comunicacions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_comunicacion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_tipo_comunicacion() As Integer
		Get
			Return Me._id_tipo_comunicacion
		End Get
		Set
			If ((Me._id_tipo_comunicacion = value)  _
						= false) Then
				Me.Onid_tipo_comunicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_comunicacion = value
				Me.SendPropertyChanged("id_tipo_comunicacion")
				Me.Onid_tipo_comunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_comunicacion", DbType:="NVarChar(50)")>  _
	Public Property tipo_comunicacion() As String
		Get
			Return Me._tipo_comunicacion
		End Get
		Set
			If (String.Equals(Me._tipo_comunicacion, value) = false) Then
				Me.Ontipo_comunicacionChanging(value)
				Me.SendPropertyChanging
				Me._tipo_comunicacion = value
				Me.SendPropertyChanged("tipo_comunicacion")
				Me.Ontipo_comunicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_comunicacion_comunicacion", Storage:="_comunicacions", ThisKey:="id_tipo_comunicacion", OtherKey:="tipo_comunicacion")>  _
	Public Property comunicacions() As EntitySet(Of comunicacion)
		Get
			Return Me._comunicacions
		End Get
		Set
			Me._comunicacions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_comunicacions(ByVal entity As comunicacion)
		Me.SendPropertyChanging
		entity.tipo_comunicacion1 = Me
	End Sub
	
	Private Sub detach_comunicacions(ByVal entity As comunicacion)
		Me.SendPropertyChanging
		entity.tipo_comunicacion1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="llave_rutas")>  _
Partial Public Class llave_ruta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_ruta As Integer
	
	Private _ruta As String
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _redondo As System.Nullable(Of Boolean)
	
	Private _rutas As EntitySet(Of ruta)
	
	Private _tarifas_choferes As EntitySet(Of tarifas_chofere)
	
	Private _trayecto_rutas As EntitySet(Of trayecto_ruta)
	
	Private _precios As EntitySet(Of precio)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    Partial Private Sub OnrutaChanging(value As String)
    End Sub
    Partial Private Sub OnrutaChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub OnredondoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnredondoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._rutas = New EntitySet(Of ruta)(AddressOf Me.attach_rutas, AddressOf Me.detach_rutas)
		Me._tarifas_choferes = New EntitySet(Of tarifas_chofere)(AddressOf Me.attach_tarifas_choferes, AddressOf Me.detach_tarifas_choferes)
		Me._trayecto_rutas = New EntitySet(Of trayecto_ruta)(AddressOf Me.attach_trayecto_rutas, AddressOf Me.detach_trayecto_rutas)
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_ruta() As Integer
		Get
			Return Me._id_ruta
		End Get
		Set
			If ((Me._id_ruta = value)  _
						= false) Then
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ruta", DbType:="VarChar(MAX)")>  _
	Public Property ruta() As String
		Get
			Return Me._ruta
		End Get
		Set
			If (String.Equals(Me._ruta, value) = false) Then
				Me.OnrutaChanging(value)
				Me.SendPropertyChanging
				Me._ruta = value
				Me.SendPropertyChanged("ruta")
				Me.OnrutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_redondo", DbType:="Bit")>  _
	Public Property redondo() As System.Nullable(Of Boolean)
		Get
			Return Me._redondo
		End Get
		Set
			If (Me._redondo.Equals(value) = false) Then
				Me.OnredondoChanging(value)
				Me.SendPropertyChanging
				Me._redondo = value
				Me.SendPropertyChanged("redondo")
				Me.OnredondoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_ruta", Storage:="_rutas", ThisKey:="id_ruta", OtherKey:="id_ruta")>  _
	Public Property rutas() As EntitySet(Of ruta)
		Get
			Return Me._rutas
		End Get
		Set
			Me._rutas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_tarifas_chofere", Storage:="_tarifas_choferes", ThisKey:="id_ruta", OtherKey:="id_ruta")>  _
	Public Property tarifas_choferes() As EntitySet(Of tarifas_chofere)
		Get
			Return Me._tarifas_choferes
		End Get
		Set
			Me._tarifas_choferes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_trayecto_ruta", Storage:="_trayecto_rutas", ThisKey:="id_ruta", OtherKey:="id_ruta")>  _
	Public Property trayecto_rutas() As EntitySet(Of trayecto_ruta)
		Get
			Return Me._trayecto_rutas
		End Get
		Set
			Me._trayecto_rutas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_precio", Storage:="_precios", ThisKey:="id_ruta", OtherKey:="id_ruta")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.llave_ruta = Me
	End Sub
	
	Private Sub detach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.llave_ruta = Nothing
	End Sub
	
	Private Sub attach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.llave_ruta = Me
	End Sub
	
	Private Sub detach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.llave_ruta = Nothing
	End Sub
	
	Private Sub attach_trayecto_rutas(ByVal entity As trayecto_ruta)
		Me.SendPropertyChanging
		entity.llave_ruta = Me
	End Sub
	
	Private Sub detach_trayecto_rutas(ByVal entity As trayecto_ruta)
		Me.SendPropertyChanging
		entity.llave_ruta = Nothing
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.llave_ruta = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.llave_ruta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="rutas")>  _
Partial Public Class ruta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_principal As Integer
	
	Private _id_ubicacion As System.Nullable(Of Integer)
	
	Private _id_tipo_arrivo As System.Nullable(Of Integer)
	
	Private _id_ruta As System.Nullable(Of Integer)
	
	Private _secuencia As System.Nullable(Of Integer)
	
	Private _llave_ruta As EntityRef(Of llave_ruta)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
	Private _tipos_arrivo As EntityRef(Of tipos_arrivo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_principalChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_principalChanged()
    End Sub
    Partial Private Sub Onid_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanged()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    Partial Private Sub OnsecuenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnsecuenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._llave_ruta = CType(Nothing, EntityRef(Of llave_ruta))
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		Me._tipos_arrivo = CType(Nothing, EntityRef(Of tipos_arrivo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_principal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_principal() As Integer
		Get
			Return Me._id_principal
		End Get
		Set
			If ((Me._id_principal = value)  _
						= false) Then
				Me.Onid_principalChanging(value)
				Me.SendPropertyChanging
				Me._id_principal = value
				Me.SendPropertyChanged("id_principal")
				Me.Onid_principalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ubicacion", DbType:="Int")>  _
	Public Property id_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_ubicacion
		End Get
		Set
			If (Me._id_ubicacion.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_ubicacion = value
				Me.SendPropertyChanged("id_ubicacion")
				Me.Onid_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_arrivo", DbType:="Int")>  _
	Public Property id_tipo_arrivo() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_arrivo
		End Get
		Set
			If (Me._id_tipo_arrivo.Equals(value) = false) Then
				If Me._tipos_arrivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_arrivoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_arrivo = value
				Me.SendPropertyChanged("id_tipo_arrivo")
				Me.Onid_tipo_arrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", DbType:="Int")>  _
	Public Property id_ruta() As System.Nullable(Of Integer)
		Get
			Return Me._id_ruta
		End Get
		Set
			If (Me._id_ruta.Equals(value) = false) Then
				If Me._llave_ruta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_secuencia", DbType:="Int")>  _
	Public Property secuencia() As System.Nullable(Of Integer)
		Get
			Return Me._secuencia
		End Get
		Set
			If (Me._secuencia.Equals(value) = false) Then
				Me.OnsecuenciaChanging(value)
				Me.SendPropertyChanging
				Me._secuencia = value
				Me.SendPropertyChanged("secuencia")
				Me.OnsecuenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_ruta", Storage:="_llave_ruta", ThisKey:="id_ruta", OtherKey:="id_ruta", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property llave_ruta() As llave_ruta
		Get
			Return Me._llave_ruta.Entity
		End Get
		Set
			Dim previousValue As llave_ruta = Me._llave_ruta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_ruta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_ruta.Entity = Nothing
					previousValue.rutas.Remove(Me)
				End If
				Me._llave_ruta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.rutas.Add(Me)
					Me._id_ruta = value.id_ruta
				Else
					Me._id_ruta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_ruta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_ruta", Storage:="_ubicacione", ThisKey:="id_ubicacion", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.rutas.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.rutas.Add(Me)
					Me._id_ubicacion = value.id_principal
				Else
					Me._id_ubicacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_arrivo_ruta", Storage:="_tipos_arrivo", ThisKey:="id_tipo_arrivo", OtherKey:="id_tipo_arrivo", IsForeignKey:=true)>  _
	Public Property tipos_arrivo() As tipos_arrivo
		Get
			Return Me._tipos_arrivo.Entity
		End Get
		Set
			Dim previousValue As tipos_arrivo = Me._tipos_arrivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_arrivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_arrivo.Entity = Nothing
					previousValue.rutas.Remove(Me)
				End If
				Me._tipos_arrivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.rutas.Add(Me)
					Me._id_tipo_arrivo = value.id_tipo_arrivo
				Else
					Me._id_tipo_arrivo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_arrivo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="ubicaciones")>  _
Partial Public Class ubicacione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_principal As Integer
	
	Private _ubicacion As String
	
	Private _tiempo As System.Nullable(Of Integer)
	
	Private _id_tipo_ubicacion As System.Nullable(Of Integer)
	
	Private _id_ubicacion As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _notificacion_cliente As System.Nullable(Of Boolean)
	
	Private _puntos_predeterminados As EntitySet(Of puntos_predeterminado)
	
	Private _detalle_arrivos As EntitySet(Of detalle_arrivo)
	
	Private _rutas As EntitySet(Of ruta)
	
	Private _trayectos As EntitySet(Of trayecto)
	
	Private _notificacionesPersonalizadas As EntitySet(Of notificacionesPersonalizada)
	
	Private _equipo_operacions As EntitySet(Of equipo_operacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_principalChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_principalChanged()
    End Sub
    Partial Private Sub OnubicacionChanging(value As String)
    End Sub
    Partial Private Sub OnubicacionChanged()
    End Sub
    Partial Private Sub OntiempoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntiempoChanged()
    End Sub
    Partial Private Sub Onid_tipo_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onnotificacion_clienteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onnotificacion_clienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._puntos_predeterminados = New EntitySet(Of puntos_predeterminado)(AddressOf Me.attach_puntos_predeterminados, AddressOf Me.detach_puntos_predeterminados)
		Me._detalle_arrivos = New EntitySet(Of detalle_arrivo)(AddressOf Me.attach_detalle_arrivos, AddressOf Me.detach_detalle_arrivos)
		Me._rutas = New EntitySet(Of ruta)(AddressOf Me.attach_rutas, AddressOf Me.detach_rutas)
		Me._trayectos = New EntitySet(Of trayecto)(AddressOf Me.attach_trayectos, AddressOf Me.detach_trayectos)
		Me._notificacionesPersonalizadas = New EntitySet(Of notificacionesPersonalizada)(AddressOf Me.attach_notificacionesPersonalizadas, AddressOf Me.detach_notificacionesPersonalizadas)
		Me._equipo_operacions = New EntitySet(Of equipo_operacion)(AddressOf Me.attach_equipo_operacions, AddressOf Me.detach_equipo_operacions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_principal", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_principal() As Integer
		Get
			Return Me._id_principal
		End Get
		Set
			If ((Me._id_principal = value)  _
						= false) Then
				Me.Onid_principalChanging(value)
				Me.SendPropertyChanging
				Me._id_principal = value
				Me.SendPropertyChanged("id_principal")
				Me.Onid_principalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ubicacion", DbType:="NVarChar(100)")>  _
	Public Property ubicacion() As String
		Get
			Return Me._ubicacion
		End Get
		Set
			If (String.Equals(Me._ubicacion, value) = false) Then
				Me.OnubicacionChanging(value)
				Me.SendPropertyChanging
				Me._ubicacion = value
				Me.SendPropertyChanged("ubicacion")
				Me.OnubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tiempo", DbType:="Int")>  _
	Public Property tiempo() As System.Nullable(Of Integer)
		Get
			Return Me._tiempo
		End Get
		Set
			If (Me._tiempo.Equals(value) = false) Then
				Me.OntiempoChanging(value)
				Me.SendPropertyChanging
				Me._tiempo = value
				Me.SendPropertyChanged("tiempo")
				Me.OntiempoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_ubicacion", DbType:="Int")>  _
	Public Property id_tipo_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_ubicacion
		End Get
		Set
			If (Me._id_tipo_ubicacion.Equals(value) = false) Then
				Me.Onid_tipo_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_ubicacion = value
				Me.SendPropertyChanged("id_tipo_ubicacion")
				Me.Onid_tipo_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ubicacion", DbType:="Int")>  _
	Public Property id_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_ubicacion
		End Get
		Set
			If (Me._id_ubicacion.Equals(value) = false) Then
				Me.Onid_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_ubicacion = value
				Me.SendPropertyChanged("id_ubicacion")
				Me.Onid_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notificacion_cliente", DbType:="Bit")>  _
	Public Property notificacion_cliente() As System.Nullable(Of Boolean)
		Get
			Return Me._notificacion_cliente
		End Get
		Set
			If (Me._notificacion_cliente.Equals(value) = false) Then
				Me.Onnotificacion_clienteChanging(value)
				Me.SendPropertyChanging
				Me._notificacion_cliente = value
				Me.SendPropertyChanged("notificacion_cliente")
				Me.Onnotificacion_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_puntos_predeterminado", Storage:="_puntos_predeterminados", ThisKey:="id_principal", OtherKey:="id_ubicacion")>  _
	Public Property puntos_predeterminados() As EntitySet(Of puntos_predeterminado)
		Get
			Return Me._puntos_predeterminados
		End Get
		Set
			Me._puntos_predeterminados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_detalle_arrivo", Storage:="_detalle_arrivos", ThisKey:="id_principal", OtherKey:="id_ubicacion")>  _
	Public Property detalle_arrivos() As EntitySet(Of detalle_arrivo)
		Get
			Return Me._detalle_arrivos
		End Get
		Set
			Me._detalle_arrivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_ruta", Storage:="_rutas", ThisKey:="id_principal", OtherKey:="id_ubicacion")>  _
	Public Property rutas() As EntitySet(Of ruta)
		Get
			Return Me._rutas
		End Get
		Set
			Me._rutas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_trayecto", Storage:="_trayectos", ThisKey:="id_principal", OtherKey:="id_ubicacion")>  _
	Public Property trayectos() As EntitySet(Of trayecto)
		Get
			Return Me._trayectos
		End Get
		Set
			Me._trayectos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_notificacionesPersonalizada", Storage:="_notificacionesPersonalizadas", ThisKey:="id_principal", OtherKey:="UbicacionId")>  _
	Public Property notificacionesPersonalizadas() As EntitySet(Of notificacionesPersonalizada)
		Get
			Return Me._notificacionesPersonalizadas
		End Get
		Set
			Me._notificacionesPersonalizadas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_equipo_operacion", Storage:="_equipo_operacions", ThisKey:="id_principal", OtherKey:="idBase")>  _
	Public Property equipo_operacions() As EntitySet(Of equipo_operacion)
		Get
			Return Me._equipo_operacions
		End Get
		Set
			Me._equipo_operacions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_puntos_predeterminados(ByVal entity As puntos_predeterminado)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_puntos_predeterminados(ByVal entity As puntos_predeterminado)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
	
	Private Sub attach_detalle_arrivos(ByVal entity As detalle_arrivo)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_detalle_arrivos(ByVal entity As detalle_arrivo)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
	
	Private Sub attach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
	
	Private Sub attach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
	
	Private Sub attach_notificacionesPersonalizadas(ByVal entity As notificacionesPersonalizada)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_notificacionesPersonalizadas(ByVal entity As notificacionesPersonalizada)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
	
	Private Sub attach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.ubicacione = Me
	End Sub
	
	Private Sub detach_equipo_operacions(ByVal entity As equipo_operacion)
		Me.SendPropertyChanging
		entity.ubicacione = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tarifas_choferes")>  _
Partial Public Class tarifas_chofere
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tarifa As Integer
	
	Private _tarifa As System.Nullable(Of Decimal)
	
	Private _id_tipo_vehiculo As System.Nullable(Of Integer)
	
	Private _id_ruta As System.Nullable(Of Integer)
	
	Private _id_cliente As System.Nullable(Of Integer)
	
	Private _llave_ruta As EntityRef(Of llave_ruta)
	
	Private _tipo_equipo As EntityRef(Of tipo_equipo)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _empresa1 As EntityRef(Of empresa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tarifaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tarifaChanged()
    End Sub
    Partial Private Sub OntarifaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntarifaChanged()
    End Sub
    Partial Private Sub Onid_tipo_vehiculoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_vehiculoChanged()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    Partial Private Sub Onid_clienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_clienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._llave_ruta = CType(Nothing, EntityRef(Of llave_ruta))
		Me._tipo_equipo = CType(Nothing, EntityRef(Of tipo_equipo))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._empresa1 = CType(Nothing, EntityRef(Of empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tarifa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_tarifa() As Integer
		Get
			Return Me._id_tarifa
		End Get
		Set
			If ((Me._id_tarifa = value)  _
						= false) Then
				Me.Onid_tarifaChanging(value)
				Me.SendPropertyChanging
				Me._id_tarifa = value
				Me.SendPropertyChanged("id_tarifa")
				Me.Onid_tarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarifa", DbType:="Money")>  _
	Public Property tarifa() As System.Nullable(Of Decimal)
		Get
			Return Me._tarifa
		End Get
		Set
			If (Me._tarifa.Equals(value) = false) Then
				Me.OntarifaChanging(value)
				Me.SendPropertyChanging
				Me._tarifa = value
				Me.SendPropertyChanged("tarifa")
				Me.OntarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_vehiculo", DbType:="Int")>  _
	Public Property id_tipo_vehiculo() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_vehiculo
		End Get
		Set
			If (Me._id_tipo_vehiculo.Equals(value) = false) Then
				If Me._tipo_equipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_vehiculoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_vehiculo = value
				Me.SendPropertyChanged("id_tipo_vehiculo")
				Me.Onid_tipo_vehiculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", DbType:="Int")>  _
	Public Property id_ruta() As System.Nullable(Of Integer)
		Get
			Return Me._id_ruta
		End Get
		Set
			If (Me._id_ruta.Equals(value) = false) Then
				If Me._llave_ruta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cliente", DbType:="Int")>  _
	Public Property id_cliente() As System.Nullable(Of Integer)
		Get
			Return Me._id_cliente
		End Get
		Set
			If (Me._id_cliente.Equals(value) = false) Then
				If (Me._empresa.HasLoadedOrAssignedValue OrElse Me._empresa1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_clienteChanging(value)
				Me.SendPropertyChanging
				Me._id_cliente = value
				Me.SendPropertyChanged("id_cliente")
				Me.Onid_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_tarifas_chofere", Storage:="_llave_ruta", ThisKey:="id_ruta", OtherKey:="id_ruta", IsForeignKey:=true)>  _
	Public Property llave_ruta() As llave_ruta
		Get
			Return Me._llave_ruta.Entity
		End Get
		Set
			Dim previousValue As llave_ruta = Me._llave_ruta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_ruta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_ruta.Entity = Nothing
					previousValue.tarifas_choferes.Remove(Me)
				End If
				Me._llave_ruta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_choferes.Add(Me)
					Me._id_ruta = value.id_ruta
				Else
					Me._id_ruta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_ruta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_chofere", Storage:="_tipo_equipo", ThisKey:="id_tipo_vehiculo", OtherKey:="id_tipo_equipo", IsForeignKey:=true)>  _
	Public Property tipo_equipo() As tipo_equipo
		Get
			Return Me._tipo_equipo.Entity
		End Get
		Set
			Dim previousValue As tipo_equipo = Me._tipo_equipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_equipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_equipo.Entity = Nothing
					previousValue.tarifas_choferes.Remove(Me)
				End If
				Me._tipo_equipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_choferes.Add(Me)
					Me._id_tipo_vehiculo = value.id_tipo_equipo
				Else
					Me._id_tipo_vehiculo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_equipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_tarifas_chofere", Storage:="_empresa", ThisKey:="id_cliente", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.tarifas_choferes.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_choferes.Add(Me)
					Me._id_cliente = value.id_empresa
				Else
					Me._id_cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_tarifas_chofere1", Storage:="_empresa1", ThisKey:="id_cliente", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa1() As empresa
		Get
			Return Me._empresa1.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa1.Entity = Nothing
					previousValue.tarifas_choferes1.Remove(Me)
				End If
				Me._empresa1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_choferes1.Add(Me)
					Me._id_cliente = value.id_empresa
				Else
					Me._id_cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tarifas_trayectos")>  _
Partial Public Class tarifas_trayecto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tarifa As Integer
	
	Private _id_trayecto As System.Nullable(Of Integer)
	
	Private _id_tipo_vehiculo As System.Nullable(Of Integer)
	
	Private _tarifa As System.Nullable(Of Decimal)
	
	Private _tipo_equipo As EntityRef(Of tipo_equipo)
	
	Private _tipo_equipo1 As EntityRef(Of tipo_equipo)
	
	Private _llave_trayecto As EntityRef(Of llave_trayecto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tarifaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tarifaChanged()
    End Sub
    Partial Private Sub Onid_trayectoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_trayectoChanged()
    End Sub
    Partial Private Sub Onid_tipo_vehiculoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_vehiculoChanged()
    End Sub
    Partial Private Sub OntarifaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntarifaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tipo_equipo = CType(Nothing, EntityRef(Of tipo_equipo))
		Me._tipo_equipo1 = CType(Nothing, EntityRef(Of tipo_equipo))
		Me._llave_trayecto = CType(Nothing, EntityRef(Of llave_trayecto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tarifa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_tarifa() As Integer
		Get
			Return Me._id_tarifa
		End Get
		Set
			If ((Me._id_tarifa = value)  _
						= false) Then
				Me.Onid_tarifaChanging(value)
				Me.SendPropertyChanging
				Me._id_tarifa = value
				Me.SendPropertyChanged("id_tarifa")
				Me.Onid_tarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto", DbType:="Int")>  _
	Public Property id_trayecto() As System.Nullable(Of Integer)
		Get
			Return Me._id_trayecto
		End Get
		Set
			If (Me._id_trayecto.Equals(value) = false) Then
				If Me._llave_trayecto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto = value
				Me.SendPropertyChanged("id_trayecto")
				Me.Onid_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_vehiculo", DbType:="Int")>  _
	Public Property id_tipo_vehiculo() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_vehiculo
		End Get
		Set
			If (Me._id_tipo_vehiculo.Equals(value) = false) Then
				If (Me._tipo_equipo.HasLoadedOrAssignedValue OrElse Me._tipo_equipo1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_vehiculoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_vehiculo = value
				Me.SendPropertyChanged("id_tipo_vehiculo")
				Me.Onid_tipo_vehiculoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarifa", DbType:="Money")>  _
	Public Property tarifa() As System.Nullable(Of Decimal)
		Get
			Return Me._tarifa
		End Get
		Set
			If (Me._tarifa.Equals(value) = false) Then
				Me.OntarifaChanging(value)
				Me.SendPropertyChanging
				Me._tarifa = value
				Me.SendPropertyChanged("tarifa")
				Me.OntarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_trayecto", Storage:="_tipo_equipo", ThisKey:="id_tipo_vehiculo", OtherKey:="id_tipo_equipo", IsForeignKey:=true)>  _
	Public Property tipo_equipo() As tipo_equipo
		Get
			Return Me._tipo_equipo.Entity
		End Get
		Set
			Dim previousValue As tipo_equipo = Me._tipo_equipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_equipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_equipo.Entity = Nothing
					previousValue.tarifas_trayectos.Remove(Me)
				End If
				Me._tipo_equipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_trayectos.Add(Me)
					Me._id_tipo_vehiculo = value.id_tipo_equipo
				Else
					Me._id_tipo_vehiculo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_equipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_tarifas_trayecto1", Storage:="_tipo_equipo1", ThisKey:="id_tipo_vehiculo", OtherKey:="id_tipo_equipo", IsForeignKey:=true)>  _
	Public Property tipo_equipo1() As tipo_equipo
		Get
			Return Me._tipo_equipo1.Entity
		End Get
		Set
			Dim previousValue As tipo_equipo = Me._tipo_equipo1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_equipo1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_equipo1.Entity = Nothing
					previousValue.tarifas_trayectos1.Remove(Me)
				End If
				Me._tipo_equipo1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_trayectos1.Add(Me)
					Me._id_tipo_vehiculo = value.id_tipo_equipo
				Else
					Me._id_tipo_vehiculo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_equipo1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_tarifas_trayecto", Storage:="_llave_trayecto", ThisKey:="id_trayecto", OtherKey:="id_trayecto", IsForeignKey:=true)>  _
	Public Property llave_trayecto() As llave_trayecto
		Get
			Return Me._llave_trayecto.Entity
		End Get
		Set
			Dim previousValue As llave_trayecto = Me._llave_trayecto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_trayecto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_trayecto.Entity = Nothing
					previousValue.tarifas_trayectos.Remove(Me)
				End If
				Me._llave_trayecto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tarifas_trayectos.Add(Me)
					Me._id_trayecto = value.id_trayecto
				Else
					Me._id_trayecto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_trayecto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="llave_trayectos")>  _
Partial Public Class llave_trayecto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_trayecto As Integer
	
	Private _trayecto As String
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _id_ruta As System.Nullable(Of Integer)
	
	Private _tarifas_trayectos As EntitySet(Of tarifas_trayecto)
	
	Private _trayecto_rutas As EntitySet(Of trayecto_ruta)
	
	Private _trayectos As EntitySet(Of trayecto)
	
	Private _trayectos_asignados As EntitySet(Of trayectos_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_trayectoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_trayectoChanged()
    End Sub
    Partial Private Sub OntrayectoChanging(value As String)
    End Sub
    Partial Private Sub OntrayectoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tarifas_trayectos = New EntitySet(Of tarifas_trayecto)(AddressOf Me.attach_tarifas_trayectos, AddressOf Me.detach_tarifas_trayectos)
		Me._trayecto_rutas = New EntitySet(Of trayecto_ruta)(AddressOf Me.attach_trayecto_rutas, AddressOf Me.detach_trayecto_rutas)
		Me._trayectos = New EntitySet(Of trayecto)(AddressOf Me.attach_trayectos, AddressOf Me.detach_trayectos)
		Me._trayectos_asignados = New EntitySet(Of trayectos_asignado)(AddressOf Me.attach_trayectos_asignados, AddressOf Me.detach_trayectos_asignados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_trayecto() As Integer
		Get
			Return Me._id_trayecto
		End Get
		Set
			If ((Me._id_trayecto = value)  _
						= false) Then
				Me.Onid_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto = value
				Me.SendPropertyChanged("id_trayecto")
				Me.Onid_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_trayecto", DbType:="NVarChar(250)")>  _
	Public Property trayecto() As String
		Get
			Return Me._trayecto
		End Get
		Set
			If (String.Equals(Me._trayecto, value) = false) Then
				Me.OntrayectoChanging(value)
				Me.SendPropertyChanging
				Me._trayecto = value
				Me.SendPropertyChanged("trayecto")
				Me.OntrayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", DbType:="Int")>  _
	Public Property id_ruta() As System.Nullable(Of Integer)
		Get
			Return Me._id_ruta
		End Get
		Set
			If (Me._id_ruta.Equals(value) = false) Then
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_tarifas_trayecto", Storage:="_tarifas_trayectos", ThisKey:="id_trayecto", OtherKey:="id_trayecto")>  _
	Public Property tarifas_trayectos() As EntitySet(Of tarifas_trayecto)
		Get
			Return Me._tarifas_trayectos
		End Get
		Set
			Me._tarifas_trayectos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayecto_ruta", Storage:="_trayecto_rutas", ThisKey:="id_trayecto", OtherKey:="id_trayecto")>  _
	Public Property trayecto_rutas() As EntitySet(Of trayecto_ruta)
		Get
			Return Me._trayecto_rutas
		End Get
		Set
			Me._trayecto_rutas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayecto", Storage:="_trayectos", ThisKey:="id_trayecto", OtherKey:="id_trayecto")>  _
	Public Property trayectos() As EntitySet(Of trayecto)
		Get
			Return Me._trayectos
		End Get
		Set
			Me._trayectos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayectos_asignado", Storage:="_trayectos_asignados", ThisKey:="id_trayecto", OtherKey:="id_trayecto")>  _
	Public Property trayectos_asignados() As EntitySet(Of trayectos_asignado)
		Get
			Return Me._trayectos_asignados
		End Get
		Set
			Me._trayectos_asignados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tarifas_trayectos(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.llave_trayecto = Me
	End Sub
	
	Private Sub detach_tarifas_trayectos(ByVal entity As tarifas_trayecto)
		Me.SendPropertyChanging
		entity.llave_trayecto = Nothing
	End Sub
	
	Private Sub attach_trayecto_rutas(ByVal entity As trayecto_ruta)
		Me.SendPropertyChanging
		entity.llave_trayecto = Me
	End Sub
	
	Private Sub detach_trayecto_rutas(ByVal entity As trayecto_ruta)
		Me.SendPropertyChanging
		entity.llave_trayecto = Nothing
	End Sub
	
	Private Sub attach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.llave_trayecto = Me
	End Sub
	
	Private Sub detach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.llave_trayecto = Nothing
	End Sub
	
	Private Sub attach_trayectos_asignados(ByVal entity As trayectos_asignado)
		Me.SendPropertyChanging
		entity.llave_trayecto = Me
	End Sub
	
	Private Sub detach_trayectos_asignados(ByVal entity As trayectos_asignado)
		Me.SendPropertyChanging
		entity.llave_trayecto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class trayecto_ruta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _id_trayecto As Integer
	
	Private _id_ruta As Integer
	
	Private _llave_ruta As EntityRef(Of llave_ruta)
	
	Private _llave_trayecto As EntityRef(Of llave_trayecto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onid_trayectoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_trayectoChanged()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._llave_ruta = CType(Nothing, EntityRef(Of llave_ruta))
		Me._llave_trayecto = CType(Nothing, EntityRef(Of llave_trayecto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto", DbType:="Int NOT NULL")>  _
	Public Property id_trayecto() As Integer
		Get
			Return Me._id_trayecto
		End Get
		Set
			If ((Me._id_trayecto = value)  _
						= false) Then
				If Me._llave_trayecto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto = value
				Me.SendPropertyChanged("id_trayecto")
				Me.Onid_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", DbType:="Int NOT NULL")>  _
	Public Property id_ruta() As Integer
		Get
			Return Me._id_ruta
		End Get
		Set
			If ((Me._id_ruta = value)  _
						= false) Then
				If Me._llave_ruta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_trayecto_ruta", Storage:="_llave_ruta", ThisKey:="id_ruta", OtherKey:="id_ruta", IsForeignKey:=true)>  _
	Public Property llave_ruta() As llave_ruta
		Get
			Return Me._llave_ruta.Entity
		End Get
		Set
			Dim previousValue As llave_ruta = Me._llave_ruta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_ruta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_ruta.Entity = Nothing
					previousValue.trayecto_rutas.Remove(Me)
				End If
				Me._llave_ruta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayecto_rutas.Add(Me)
					Me._id_ruta = value.id_ruta
				Else
					Me._id_ruta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("llave_ruta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayecto_ruta", Storage:="_llave_trayecto", ThisKey:="id_trayecto", OtherKey:="id_trayecto", IsForeignKey:=true)>  _
	Public Property llave_trayecto() As llave_trayecto
		Get
			Return Me._llave_trayecto.Entity
		End Get
		Set
			Dim previousValue As llave_trayecto = Me._llave_trayecto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_trayecto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_trayecto.Entity = Nothing
					previousValue.trayecto_rutas.Remove(Me)
				End If
				Me._llave_trayecto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayecto_rutas.Add(Me)
					Me._id_trayecto = value.id_trayecto
				Else
					Me._id_trayecto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("llave_trayecto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="trayectos")>  _
Partial Public Class trayecto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _id_trayecto As System.Nullable(Of Integer)
	
	Private _id_ubicacion As System.Nullable(Of Integer)
	
	Private _id_tipo_arrivo As System.Nullable(Of Integer)
	
	Private _llave_trayecto As EntityRef(Of llave_trayecto)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
	Private _tipos_arrivo As EntityRef(Of tipos_arrivo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onid_trayectoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_trayectoChanged()
    End Sub
    Partial Private Sub Onid_ubicacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ubicacionChanged()
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._llave_trayecto = CType(Nothing, EntityRef(Of llave_trayecto))
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		Me._tipos_arrivo = CType(Nothing, EntityRef(Of tipos_arrivo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto", DbType:="Int")>  _
	Public Property id_trayecto() As System.Nullable(Of Integer)
		Get
			Return Me._id_trayecto
		End Get
		Set
			If (Me._id_trayecto.Equals(value) = false) Then
				If Me._llave_trayecto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto = value
				Me.SendPropertyChanged("id_trayecto")
				Me.Onid_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ubicacion", DbType:="Int")>  _
	Public Property id_ubicacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_ubicacion
		End Get
		Set
			If (Me._id_ubicacion.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ubicacionChanging(value)
				Me.SendPropertyChanging
				Me._id_ubicacion = value
				Me.SendPropertyChanged("id_ubicacion")
				Me.Onid_ubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_arrivo", DbType:="Int")>  _
	Public Property id_tipo_arrivo() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_arrivo
		End Get
		Set
			If (Me._id_tipo_arrivo.Equals(value) = false) Then
				If Me._tipos_arrivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_arrivoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_arrivo = value
				Me.SendPropertyChanged("id_tipo_arrivo")
				Me.Onid_tipo_arrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayecto", Storage:="_llave_trayecto", ThisKey:="id_trayecto", OtherKey:="id_trayecto", IsForeignKey:=true)>  _
	Public Property llave_trayecto() As llave_trayecto
		Get
			Return Me._llave_trayecto.Entity
		End Get
		Set
			Dim previousValue As llave_trayecto = Me._llave_trayecto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_trayecto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_trayecto.Entity = Nothing
					previousValue.trayectos.Remove(Me)
				End If
				Me._llave_trayecto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayectos.Add(Me)
					Me._id_trayecto = value.id_trayecto
				Else
					Me._id_trayecto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_trayecto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_trayecto", Storage:="_ubicacione", ThisKey:="id_ubicacion", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.trayectos.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayectos.Add(Me)
					Me._id_ubicacion = value.id_principal
				Else
					Me._id_ubicacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_arrivo_trayecto", Storage:="_tipos_arrivo", ThisKey:="id_tipo_arrivo", OtherKey:="id_tipo_arrivo", IsForeignKey:=true)>  _
	Public Property tipos_arrivo() As tipos_arrivo
		Get
			Return Me._tipos_arrivo.Entity
		End Get
		Set
			Dim previousValue As tipos_arrivo = Me._tipos_arrivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_arrivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_arrivo.Entity = Nothing
					previousValue.trayectos.Remove(Me)
				End If
				Me._tipos_arrivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayectos.Add(Me)
					Me._id_tipo_arrivo = value.id_tipo_arrivo
				Else
					Me._id_tipo_arrivo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_arrivo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tipos_arrivos")>  _
Partial Public Class tipos_arrivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_arrivo As Integer
	
	Private _arrivo As String
	
	Private _rutas As EntitySet(Of ruta)
	
	Private _trayectos As EntitySet(Of trayecto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_arrivoChanged()
    End Sub
    Partial Private Sub OnarrivoChanging(value As String)
    End Sub
    Partial Private Sub OnarrivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._rutas = New EntitySet(Of ruta)(AddressOf Me.attach_rutas, AddressOf Me.detach_rutas)
		Me._trayectos = New EntitySet(Of trayecto)(AddressOf Me.attach_trayectos, AddressOf Me.detach_trayectos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_arrivo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_tipo_arrivo() As Integer
		Get
			Return Me._id_tipo_arrivo
		End Get
		Set
			If ((Me._id_tipo_arrivo = value)  _
						= false) Then
				Me.Onid_tipo_arrivoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_arrivo = value
				Me.SendPropertyChanged("id_tipo_arrivo")
				Me.Onid_tipo_arrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_arrivo", DbType:="NVarChar(50)")>  _
	Public Property arrivo() As String
		Get
			Return Me._arrivo
		End Get
		Set
			If (String.Equals(Me._arrivo, value) = false) Then
				Me.OnarrivoChanging(value)
				Me.SendPropertyChanging
				Me._arrivo = value
				Me.SendPropertyChanged("arrivo")
				Me.OnarrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_arrivo_ruta", Storage:="_rutas", ThisKey:="id_tipo_arrivo", OtherKey:="id_tipo_arrivo")>  _
	Public Property rutas() As EntitySet(Of ruta)
		Get
			Return Me._rutas
		End Get
		Set
			Me._rutas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_arrivo_trayecto", Storage:="_trayectos", ThisKey:="id_tipo_arrivo", OtherKey:="id_tipo_arrivo")>  _
	Public Property trayectos() As EntitySet(Of trayecto)
		Get
			Return Me._trayectos
		End Get
		Set
			Me._trayectos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.tipos_arrivo = Me
	End Sub
	
	Private Sub detach_rutas(ByVal entity As ruta)
		Me.SendPropertyChanging
		entity.tipos_arrivo = Nothing
	End Sub
	
	Private Sub attach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.tipos_arrivo = Me
	End Sub
	
	Private Sub detach_trayectos(ByVal entity As trayecto)
		Me.SendPropertyChanging
		entity.tipos_arrivo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class Tipo_reparacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _correctivo As System.Nullable(Of Boolean)
	
	Private _reparacion As String
	
	Private _idEstatus As Integer
	
	Private _programacion_servicios As EntitySet(Of programacion_servicio)
	
	Private _reparacione1s As EntitySet(Of reparacione1)
	
	Private _reparaciones As EntitySet(Of reparacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncorrectivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncorrectivoChanged()
    End Sub
    Partial Private Sub OnreparacionChanging(value As String)
    End Sub
    Partial Private Sub OnreparacionChanged()
    End Sub
    Partial Private Sub OnidEstatusChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._programacion_servicios = New EntitySet(Of programacion_servicio)(AddressOf Me.attach_programacion_servicios, AddressOf Me.detach_programacion_servicios)
		Me._reparacione1s = New EntitySet(Of reparacione1)(AddressOf Me.attach_reparacione1s, AddressOf Me.detach_reparacione1s)
		Me._reparaciones = New EntitySet(Of reparacione)(AddressOf Me.attach_reparaciones, AddressOf Me.detach_reparaciones)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correctivo", DbType:="Bit")>  _
	Public Property correctivo() As System.Nullable(Of Boolean)
		Get
			Return Me._correctivo
		End Get
		Set
			If (Me._correctivo.Equals(value) = false) Then
				Me.OncorrectivoChanging(value)
				Me.SendPropertyChanging
				Me._correctivo = value
				Me.SendPropertyChanged("correctivo")
				Me.OncorrectivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_reparacion", DbType:="NVarChar(50)")>  _
	Public Property reparacion() As String
		Get
			Return Me._reparacion
		End Get
		Set
			If (String.Equals(Me._reparacion, value) = false) Then
				Me.OnreparacionChanging(value)
				Me.SendPropertyChanging
				Me._reparacion = value
				Me.SendPropertyChanged("reparacion")
				Me.OnreparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstatus")>  _
	Public Property idEstatus() As Integer
		Get
			Return Me._idEstatus
		End Get
		Set
			If ((Me._idEstatus = value)  _
						= false) Then
				Me.OnidEstatusChanging(value)
				Me.SendPropertyChanging
				Me._idEstatus = value
				Me.SendPropertyChanged("idEstatus")
				Me.OnidEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_programacion_servicio", Storage:="_programacion_servicios", ThisKey:="id", OtherKey:="id_reparacion")>  _
	Public Property programacion_servicios() As EntitySet(Of programacion_servicio)
		Get
			Return Me._programacion_servicios
		End Get
		Set
			Me._programacion_servicios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_reparacione1", Storage:="_reparacione1s", ThisKey:="id", OtherKey:="tipo_reparacion")>  _
	Public Property reparacione1s() As EntitySet(Of reparacione1)
		Get
			Return Me._reparacione1s
		End Get
		Set
			Me._reparacione1s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_reparacione", Storage:="_reparaciones", ThisKey:="id", OtherKey:="tipo_reparacion")>  _
	Public Property reparaciones() As EntitySet(Of reparacione)
		Get
			Return Me._reparaciones
		End Get
		Set
			Me._reparaciones.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_programacion_servicios(ByVal entity As programacion_servicio)
		Me.SendPropertyChanging
		entity.Tipo_reparacion = Me
	End Sub
	
	Private Sub detach_programacion_servicios(ByVal entity As programacion_servicio)
		Me.SendPropertyChanging
		entity.Tipo_reparacion = Nothing
	End Sub
	
	Private Sub attach_reparacione1s(ByVal entity As reparacione1)
		Me.SendPropertyChanging
		entity.Tipo_reparacion1 = Me
	End Sub
	
	Private Sub detach_reparacione1s(ByVal entity As reparacione1)
		Me.SendPropertyChanging
		entity.Tipo_reparacion1 = Nothing
	End Sub
	
	Private Sub attach_reparaciones(ByVal entity As reparacione)
		Me.SendPropertyChanging
		entity.Tipo_reparacion1 = Me
	End Sub
	
	Private Sub detach_reparaciones(ByVal entity As reparacione)
		Me.SendPropertyChanging
		entity.Tipo_reparacion1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="programacion_servicios")>  _
Partial Public Class programacion_servicio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _distancia As System.Nullable(Of Integer)
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _id_reparacion As System.Nullable(Of Integer)
	
	Private _Tipo_reparacion As EntityRef(Of Tipo_reparacion)
	
	Private _equipo_operacion As EntityRef(Of equipo_operacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OndistanciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndistanciaChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub Onid_reparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_reparacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tipo_reparacion = CType(Nothing, EntityRef(Of Tipo_reparacion))
		Me._equipo_operacion = CType(Nothing, EntityRef(Of equipo_operacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distancia", DbType:="Int")>  _
	Public Property distancia() As System.Nullable(Of Integer)
		Get
			Return Me._distancia
		End Get
		Set
			If (Me._distancia.Equals(value) = false) Then
				Me.OndistanciaChanging(value)
				Me.SendPropertyChanging
				Me._distancia = value
				Me.SendPropertyChanged("distancia")
				Me.OndistanciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				If Me._equipo_operacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_reparacion", DbType:="Int")>  _
	Public Property id_reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_reparacion
		End Get
		Set
			If (Me._id_reparacion.Equals(value) = false) Then
				If Me._Tipo_reparacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_reparacionChanging(value)
				Me.SendPropertyChanging
				Me._id_reparacion = value
				Me.SendPropertyChanged("id_reparacion")
				Me.Onid_reparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_programacion_servicio", Storage:="_Tipo_reparacion", ThisKey:="id_reparacion", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Tipo_reparacion() As Tipo_reparacion
		Get
			Return Me._Tipo_reparacion.Entity
		End Get
		Set
			Dim previousValue As Tipo_reparacion = Me._Tipo_reparacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipo_reparacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipo_reparacion.Entity = Nothing
					previousValue.programacion_servicios.Remove(Me)
				End If
				Me._Tipo_reparacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.programacion_servicios.Add(Me)
					Me._id_reparacion = value.id
				Else
					Me._id_reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tipo_reparacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_programacion_servicio", Storage:="_equipo_operacion", ThisKey:="id_equipo", OtherKey:="id_equipo", IsForeignKey:=true)>  _
	Public Property equipo_operacion() As equipo_operacion
		Get
			Return Me._equipo_operacion.Entity
		End Get
		Set
			Dim previousValue As equipo_operacion = Me._equipo_operacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_operacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_operacion.Entity = Nothing
					previousValue.programacion_servicios.Remove(Me)
				End If
				Me._equipo_operacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.programacion_servicios.Add(Me)
					Me._id_equipo = value.id_equipo
				Else
					Me._id_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_operacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class costo_combustible
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tipo_combustible As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _precio As System.Nullable(Of Decimal)
	
	Private _tipos_combustible As EntityRef(Of tipos_combustible)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Ontipo_combustibleChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_combustibleChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnprecioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnprecioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tipos_combustible = CType(Nothing, EntityRef(Of tipos_combustible))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_combustible", DbType:="Int")>  _
	Public Property tipo_combustible() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_combustible
		End Get
		Set
			If (Me._tipo_combustible.Equals(value) = false) Then
				If Me._tipos_combustible.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_combustibleChanging(value)
				Me.SendPropertyChanging
				Me._tipo_combustible = value
				Me.SendPropertyChanged("tipo_combustible")
				Me.Ontipo_combustibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio", DbType:="Money")>  _
	Public Property precio() As System.Nullable(Of Decimal)
		Get
			Return Me._precio
		End Get
		Set
			If (Me._precio.Equals(value) = false) Then
				Me.OnprecioChanging(value)
				Me.SendPropertyChanging
				Me._precio = value
				Me.SendPropertyChanged("precio")
				Me.OnprecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_combustible_costo_combustible", Storage:="_tipos_combustible", ThisKey:="tipo_combustible", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property tipos_combustible() As tipos_combustible
		Get
			Return Me._tipos_combustible.Entity
		End Get
		Set
			Dim previousValue As tipos_combustible = Me._tipos_combustible.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_combustible.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_combustible.Entity = Nothing
					previousValue.costo_combustibles.Remove(Me)
				End If
				Me._tipos_combustible.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.costo_combustibles.Add(Me)
					Me._tipo_combustible = value.id
				Else
					Me._tipo_combustible = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_combustible")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="guias")>  _
Partial Public Class guia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _guia As String
	
	Private _id_viaje As System.Nullable(Of Integer)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnguiaChanging(value As String)
    End Sub
    Partial Private Sub OnguiaChanged()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_guia", DbType:="NVarChar(MAX)")>  _
	Public Property guia() As String
		Get
			Return Me._guia
		End Get
		Set
			If (String.Equals(Me._guia, value) = false) Then
				Me.OnguiaChanging(value)
				Me.SendPropertyChanging
				Me._guia = value
				Me.SendPropertyChanged("guia")
				Me.OnguiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", DbType:="Int")>  _
	Public Property id_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._id_viaje
		End Get
		Set
			If (Me._id_viaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_guia", Storage:="_viaje", ThisKey:="id_viaje", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.guias.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.guias.Add(Me)
					Me._id_viaje = value.id_viaje
				Else
					Me._id_viaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class gastos_reparacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idGastosReparacion As Integer
	
	Private _id_gasto As System.Nullable(Of Integer)
	
	Private _id_correctivo As System.Nullable(Of Integer)
	
	Private _gasto As EntityRef(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidGastosReparacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnidGastosReparacionChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    Partial Private Sub Onid_correctivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_correctivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gasto = CType(Nothing, EntityRef(Of gasto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idGastosReparacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idGastosReparacion() As Integer
		Get
			Return Me._idGastosReparacion
		End Get
		Set
			If ((Me._idGastosReparacion = value)  _
						= false) Then
				Me.OnidGastosReparacionChanging(value)
				Me.SendPropertyChanging
				Me._idGastosReparacion = value
				Me.SendPropertyChanged("idGastosReparacion")
				Me.OnidGastosReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", DbType:="Int")>  _
	Public Property id_gasto() As System.Nullable(Of Integer)
		Get
			Return Me._id_gasto
		End Get
		Set
			If (Me._id_gasto.Equals(value) = false) Then
				If Me._gasto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_correctivo", DbType:="Int")>  _
	Public Property id_correctivo() As System.Nullable(Of Integer)
		Get
			Return Me._id_correctivo
		End Get
		Set
			If (Me._id_correctivo.Equals(value) = false) Then
				Me.Onid_correctivoChanging(value)
				Me.SendPropertyChanging
				Me._id_correctivo = value
				Me.SendPropertyChanged("id_correctivo")
				Me.Onid_correctivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_gastos_reparacion", Storage:="_gasto", ThisKey:="id_gasto", OtherKey:="id_gasto", IsForeignKey:=true)>  _
	Public Property gasto() As gasto
		Get
			Return Me._gasto.Entity
		End Get
		Set
			Dim previousValue As gasto = Me._gasto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gasto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gasto.Entity = Nothing
					previousValue.gastos_reparacions.Remove(Me)
				End If
				Me._gasto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.gastos_reparacions.Add(Me)
					Me._id_gasto = value.id_gasto
				Else
					Me._id_gasto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gasto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class solicitudCotizacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idSolicitud As Integer
	
	Private _fecha_solicitud As System.Nullable(Of Date)
	
	Private _idCotizacion As System.Nullable(Of Integer)
	
	Private _cotizacione As EntityRef(Of cotizacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidSolicitudChanging(value As Integer)
    End Sub
    Partial Private Sub OnidSolicitudChanged()
    End Sub
    Partial Private Sub Onfecha_solicitudChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_solicitudChanged()
    End Sub
    Partial Private Sub OnidCotizacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidCotizacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cotizacione = CType(Nothing, EntityRef(Of cotizacione))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idSolicitud", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idSolicitud() As Integer
		Get
			Return Me._idSolicitud
		End Get
		Set
			If ((Me._idSolicitud = value)  _
						= false) Then
				Me.OnidSolicitudChanging(value)
				Me.SendPropertyChanging
				Me._idSolicitud = value
				Me.SendPropertyChanged("idSolicitud")
				Me.OnidSolicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_solicitud", DbType:="SmallDateTime")>  _
	Public Property fecha_solicitud() As System.Nullable(Of Date)
		Get
			Return Me._fecha_solicitud
		End Get
		Set
			If (Me._fecha_solicitud.Equals(value) = false) Then
				Me.Onfecha_solicitudChanging(value)
				Me.SendPropertyChanging
				Me._fecha_solicitud = value
				Me.SendPropertyChanged("fecha_solicitud")
				Me.Onfecha_solicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCotizacion", DbType:="Int")>  _
	Public Property idCotizacion() As System.Nullable(Of Integer)
		Get
			Return Me._idCotizacion
		End Get
		Set
			If (Me._idCotizacion.Equals(value) = false) Then
				If Me._cotizacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidCotizacionChanging(value)
				Me.SendPropertyChanging
				Me._idCotizacion = value
				Me.SendPropertyChanged("idCotizacion")
				Me.OnidCotizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cotizacione_solicitudCotizacion", Storage:="_cotizacione", ThisKey:="idCotizacion", OtherKey:="id_cotizacion", IsForeignKey:=true)>  _
	Public Property cotizacione() As cotizacione
		Get
			Return Me._cotizacione.Entity
		End Get
		Set
			Dim previousValue As cotizacione = Me._cotizacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cotizacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cotizacione.Entity = Nothing
					previousValue.solicitudCotizacions.Remove(Me)
				End If
				Me._cotizacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.solicitudCotizacions.Add(Me)
					Me._idCotizacion = value.id_cotizacion
				Else
					Me._idCotizacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cotizacione")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="precios")>  _
Partial Public Class precio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_relacion As Integer
	
	Private _id_ruta As System.Nullable(Of Integer)
	
	Private _id_tipo_recurso As System.Nullable(Of Integer)
	
	Private _id_empresa As System.Nullable(Of Integer)
	
	Private _id_moneda As System.Nullable(Of Integer)
	
	Private _especificacion As String
	
	Private _tarifa As System.Nullable(Of Double)
	
	Private _precio As System.Nullable(Of Double)
	
	Private _id_fecha As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _factura_dolares As System.Nullable(Of Boolean)
	
	Private _id_ruta_empresa As System.Nullable(Of Integer)
	
	Private _id_cotizacion As System.Nullable(Of Integer)
	
	Private _letra As System.Nullable(Of Char)
	
	Private _kms As System.Nullable(Of Integer)
	
	Private _casetas As System.Nullable(Of Double)
	
	Private _variacion_precios As EntitySet(Of variacion_precio)
	
	Private _contactosServicios As EntitySet(Of contactosServicio)
	
	Private _CargosAdicionales As EntitySet(Of CargosAdicionale)
	
	Private _viajes As EntitySet(Of viaje)
	
	Private _fecha As EntityRef(Of fecha)
	
	Private _llave_ruta As EntityRef(Of llave_ruta)
	
	Private _tipo_equipo As EntityRef(Of tipo_equipo)
	
	Private _tipos_moneda As EntityRef(Of tipos_moneda)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _cotizacione As EntityRef(Of cotizacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_relacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_relacionChanged()
    End Sub
    Partial Private Sub Onid_rutaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_rutaChanged()
    End Sub
    Partial Private Sub Onid_tipo_recursoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_recursoChanged()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub Onid_monedaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_monedaChanged()
    End Sub
    Partial Private Sub OnespecificacionChanging(value As String)
    End Sub
    Partial Private Sub OnespecificacionChanged()
    End Sub
    Partial Private Sub OntarifaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OntarifaChanged()
    End Sub
    Partial Private Sub OnprecioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnprecioChanged()
    End Sub
    Partial Private Sub Onid_fechaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_fechaChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onfactura_dolaresChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfactura_dolaresChanged()
    End Sub
    Partial Private Sub Onid_ruta_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ruta_empresaChanged()
    End Sub
    Partial Private Sub Onid_cotizacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_cotizacionChanged()
    End Sub
    Partial Private Sub OnletraChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnletraChanged()
    End Sub
    Partial Private Sub OnkmsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnkmsChanged()
    End Sub
    Partial Private Sub OncasetasChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncasetasChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._variacion_precios = New EntitySet(Of variacion_precio)(AddressOf Me.attach_variacion_precios, AddressOf Me.detach_variacion_precios)
		Me._contactosServicios = New EntitySet(Of contactosServicio)(AddressOf Me.attach_contactosServicios, AddressOf Me.detach_contactosServicios)
		Me._CargosAdicionales = New EntitySet(Of CargosAdicionale)(AddressOf Me.attach_CargosAdicionales, AddressOf Me.detach_CargosAdicionales)
		Me._viajes = New EntitySet(Of viaje)(AddressOf Me.attach_viajes, AddressOf Me.detach_viajes)
		Me._fecha = CType(Nothing, EntityRef(Of fecha))
		Me._llave_ruta = CType(Nothing, EntityRef(Of llave_ruta))
		Me._tipo_equipo = CType(Nothing, EntityRef(Of tipo_equipo))
		Me._tipos_moneda = CType(Nothing, EntityRef(Of tipos_moneda))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._cotizacione = CType(Nothing, EntityRef(Of cotizacione))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_relacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_relacion() As Integer
		Get
			Return Me._id_relacion
		End Get
		Set
			If ((Me._id_relacion = value)  _
						= false) Then
				Me.Onid_relacionChanging(value)
				Me.SendPropertyChanging
				Me._id_relacion = value
				Me.SendPropertyChanged("id_relacion")
				Me.Onid_relacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta", DbType:="Int")>  _
	Public Property id_ruta() As System.Nullable(Of Integer)
		Get
			Return Me._id_ruta
		End Get
		Set
			If (Me._id_ruta.Equals(value) = false) Then
				If Me._llave_ruta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_rutaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta = value
				Me.SendPropertyChanged("id_ruta")
				Me.Onid_rutaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_recurso", DbType:="Int")>  _
	Public Property id_tipo_recurso() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_recurso
		End Get
		Set
			If (Me._id_tipo_recurso.Equals(value) = false) Then
				If Me._tipo_equipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_recursoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_recurso = value
				Me.SendPropertyChanged("id_tipo_recurso")
				Me.Onid_tipo_recursoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", DbType:="Int")>  _
	Public Property id_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_empresa
		End Get
		Set
			If (Me._id_empresa.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_moneda", DbType:="Int")>  _
	Public Property id_moneda() As System.Nullable(Of Integer)
		Get
			Return Me._id_moneda
		End Get
		Set
			If (Me._id_moneda.Equals(value) = false) Then
				If Me._tipos_moneda.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_monedaChanging(value)
				Me.SendPropertyChanging
				Me._id_moneda = value
				Me.SendPropertyChanged("id_moneda")
				Me.Onid_monedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_especificacion", DbType:="NVarChar(50)")>  _
	Public Property especificacion() As String
		Get
			Return Me._especificacion
		End Get
		Set
			If (String.Equals(Me._especificacion, value) = false) Then
				Me.OnespecificacionChanging(value)
				Me.SendPropertyChanging
				Me._especificacion = value
				Me.SendPropertyChanged("especificacion")
				Me.OnespecificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tarifa", DbType:="Float")>  _
	Public Property tarifa() As System.Nullable(Of Double)
		Get
			Return Me._tarifa
		End Get
		Set
			If (Me._tarifa.Equals(value) = false) Then
				Me.OntarifaChanging(value)
				Me.SendPropertyChanging
				Me._tarifa = value
				Me.SendPropertyChanged("tarifa")
				Me.OntarifaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio", DbType:="Float")>  _
	Public Property precio() As System.Nullable(Of Double)
		Get
			Return Me._precio
		End Get
		Set
			If (Me._precio.Equals(value) = false) Then
				Me.OnprecioChanging(value)
				Me.SendPropertyChanging
				Me._precio = value
				Me.SendPropertyChanged("precio")
				Me.OnprecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_fecha", DbType:="Int")>  _
	Public Property id_fecha() As System.Nullable(Of Integer)
		Get
			Return Me._id_fecha
		End Get
		Set
			If (Me._id_fecha.Equals(value) = false) Then
				If Me._fecha.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_fechaChanging(value)
				Me.SendPropertyChanging
				Me._id_fecha = value
				Me.SendPropertyChanged("id_fecha")
				Me.Onid_fechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_factura_dolares", DbType:="Bit")>  _
	Public Property factura_dolares() As System.Nullable(Of Boolean)
		Get
			Return Me._factura_dolares
		End Get
		Set
			If (Me._factura_dolares.Equals(value) = false) Then
				Me.Onfactura_dolaresChanging(value)
				Me.SendPropertyChanging
				Me._factura_dolares = value
				Me.SendPropertyChanged("factura_dolares")
				Me.Onfactura_dolaresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_ruta_empresa", DbType:="Int")>  _
	Public Property id_ruta_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_ruta_empresa
		End Get
		Set
			If (Me._id_ruta_empresa.Equals(value) = false) Then
				Me.Onid_ruta_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_ruta_empresa = value
				Me.SendPropertyChanged("id_ruta_empresa")
				Me.Onid_ruta_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cotizacion", DbType:="Int")>  _
	Public Property id_cotizacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_cotizacion
		End Get
		Set
			If (Me._id_cotizacion.Equals(value) = false) Then
				If Me._cotizacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_cotizacionChanging(value)
				Me.SendPropertyChanging
				Me._id_cotizacion = value
				Me.SendPropertyChanged("id_cotizacion")
				Me.Onid_cotizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_letra", DbType:="Char(1)")>  _
	Public Property letra() As System.Nullable(Of Char)
		Get
			Return Me._letra
		End Get
		Set
			If (Me._letra.Equals(value) = false) Then
				Me.OnletraChanging(value)
				Me.SendPropertyChanging
				Me._letra = value
				Me.SendPropertyChanged("letra")
				Me.OnletraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kms", DbType:="Int")>  _
	Public Property kms() As System.Nullable(Of Integer)
		Get
			Return Me._kms
		End Get
		Set
			If (Me._kms.Equals(value) = false) Then
				Me.OnkmsChanging(value)
				Me.SendPropertyChanging
				Me._kms = value
				Me.SendPropertyChanged("kms")
				Me.OnkmsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_casetas", DbType:="Float")>  _
	Public Property casetas() As System.Nullable(Of Double)
		Get
			Return Me._casetas
		End Get
		Set
			If (Me._casetas.Equals(value) = false) Then
				Me.OncasetasChanging(value)
				Me.SendPropertyChanging
				Me._casetas = value
				Me.SendPropertyChanged("casetas")
				Me.OncasetasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_variacion_precio", Storage:="_variacion_precios", ThisKey:="id_relacion", OtherKey:="id_relacion")>  _
	Public Property variacion_precios() As EntitySet(Of variacion_precio)
		Get
			Return Me._variacion_precios
		End Get
		Set
			Me._variacion_precios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_contactosServicio", Storage:="_contactosServicios", ThisKey:="id_relacion", OtherKey:="id_relacion")>  _
	Public Property contactosServicios() As EntitySet(Of contactosServicio)
		Get
			Return Me._contactosServicios
		End Get
		Set
			Me._contactosServicios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_CargosAdicionale", Storage:="_CargosAdicionales", ThisKey:="id_relacion", OtherKey:="RelacionId")>  _
	Public Property CargosAdicionales() As EntitySet(Of CargosAdicionale)
		Get
			Return Me._CargosAdicionales
		End Get
		Set
			Me._CargosAdicionales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_viaje", Storage:="_viajes", ThisKey:="id_relacion", OtherKey:="id_relacion")>  _
	Public Property viajes() As EntitySet(Of viaje)
		Get
			Return Me._viajes
		End Get
		Set
			Me._viajes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="fecha_precio", Storage:="_fecha", ThisKey:="id_fecha", OtherKey:="id_fecha", IsForeignKey:=true)>  _
	Public Property fecha() As fecha
		Get
			Return Me._fecha.Entity
		End Get
		Set
			Dim previousValue As fecha = Me._fecha.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._fecha.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._fecha.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._fecha.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_fecha = value.id_fecha
				Else
					Me._id_fecha = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("fecha")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_ruta_precio", Storage:="_llave_ruta", ThisKey:="id_ruta", OtherKey:="id_ruta", IsForeignKey:=true)>  _
	Public Property llave_ruta() As llave_ruta
		Get
			Return Me._llave_ruta.Entity
		End Get
		Set
			Dim previousValue As llave_ruta = Me._llave_ruta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_ruta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_ruta.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._llave_ruta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_ruta = value.id_ruta
				Else
					Me._id_ruta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_ruta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_precio", Storage:="_tipo_equipo", ThisKey:="id_tipo_recurso", OtherKey:="id_tipo_equipo", IsForeignKey:=true)>  _
	Public Property tipo_equipo() As tipo_equipo
		Get
			Return Me._tipo_equipo.Entity
		End Get
		Set
			Dim previousValue As tipo_equipo = Me._tipo_equipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_equipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_equipo.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._tipo_equipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_tipo_recurso = value.id_tipo_equipo
				Else
					Me._id_tipo_recurso = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_equipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_moneda_precio", Storage:="_tipos_moneda", ThisKey:="id_moneda", OtherKey:="id_moneda", IsForeignKey:=true)>  _
	Public Property tipos_moneda() As tipos_moneda
		Get
			Return Me._tipos_moneda.Entity
		End Get
		Set
			Dim previousValue As tipos_moneda = Me._tipos_moneda.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_moneda.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_moneda.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._tipos_moneda.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_moneda = value.id_moneda
				Else
					Me._id_moneda = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_moneda")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_precio", Storage:="_empresa", ThisKey:="id_empresa", OtherKey:="id_empresa", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_empresa = value.id_empresa
				Else
					Me._id_empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cotizacione_precio", Storage:="_cotizacione", ThisKey:="id_cotizacion", OtherKey:="id_cotizacion", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property cotizacione() As cotizacione
		Get
			Return Me._cotizacione.Entity
		End Get
		Set
			Dim previousValue As cotizacione = Me._cotizacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cotizacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cotizacione.Entity = Nothing
					previousValue.precios.Remove(Me)
				End If
				Me._cotizacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios.Add(Me)
					Me._id_cotizacion = value.id_cotizacion
				Else
					Me._id_cotizacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("cotizacione")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_variacion_precios(ByVal entity As variacion_precio)
		Me.SendPropertyChanging
		entity.precio = Me
	End Sub
	
	Private Sub detach_variacion_precios(ByVal entity As variacion_precio)
		Me.SendPropertyChanging
		entity.precio = Nothing
	End Sub
	
	Private Sub attach_contactosServicios(ByVal entity As contactosServicio)
		Me.SendPropertyChanging
		entity.precio = Me
	End Sub
	
	Private Sub detach_contactosServicios(ByVal entity As contactosServicio)
		Me.SendPropertyChanging
		entity.precio = Nothing
	End Sub
	
	Private Sub attach_CargosAdicionales(ByVal entity As CargosAdicionale)
		Me.SendPropertyChanging
		entity.precio = Me
	End Sub
	
	Private Sub detach_CargosAdicionales(ByVal entity As CargosAdicionale)
		Me.SendPropertyChanging
		entity.precio = Nothing
	End Sub
	
	Private Sub attach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.precio = Me
	End Sub
	
	Private Sub detach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.precio = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class margen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idMargen As Integer
	
	Private _monto As System.Nullable(Of Decimal)
	
	Private _margen As System.Nullable(Of Decimal)
	
	Private _casetas As System.Nullable(Of Decimal)
	
	Private _choferes As System.Nullable(Of Decimal)
	
	Private _combustible As System.Nullable(Of Decimal)
	
	Private _idViaje As System.Nullable(Of Integer)
	
	Private _otros As System.Nullable(Of Decimal)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidMargenChanging(value As Integer)
    End Sub
    Partial Private Sub OnidMargenChanged()
    End Sub
    Partial Private Sub OnmontoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnmontoChanged()
    End Sub
    Partial Private Sub OnmargenChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnmargenChanged()
    End Sub
    Partial Private Sub OncasetasChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncasetasChanged()
    End Sub
    Partial Private Sub OnchoferesChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnchoferesChanged()
    End Sub
    Partial Private Sub OncombustibleChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncombustibleChanged()
    End Sub
    Partial Private Sub OnidViajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidViajeChanged()
    End Sub
    Partial Private Sub OnotrosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnotrosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idMargen", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idMargen() As Integer
		Get
			Return Me._idMargen
		End Get
		Set
			If ((Me._idMargen = value)  _
						= false) Then
				Me.OnidMargenChanging(value)
				Me.SendPropertyChanging
				Me._idMargen = value
				Me.SendPropertyChanged("idMargen")
				Me.OnidMargenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monto", DbType:="Money")>  _
	Public Property monto() As System.Nullable(Of Decimal)
		Get
			Return Me._monto
		End Get
		Set
			If (Me._monto.Equals(value) = false) Then
				Me.OnmontoChanging(value)
				Me.SendPropertyChanging
				Me._monto = value
				Me.SendPropertyChanged("monto")
				Me.OnmontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_margen", DbType:="Decimal(18,2)")>  _
	Public Property margen() As System.Nullable(Of Decimal)
		Get
			Return Me._margen
		End Get
		Set
			If (Me._margen.Equals(value) = false) Then
				Me.OnmargenChanging(value)
				Me.SendPropertyChanging
				Me._margen = value
				Me.SendPropertyChanged("margen")
				Me.OnmargenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_casetas", DbType:="Decimal(18,2)")>  _
	Public Property casetas() As System.Nullable(Of Decimal)
		Get
			Return Me._casetas
		End Get
		Set
			If (Me._casetas.Equals(value) = false) Then
				Me.OncasetasChanging(value)
				Me.SendPropertyChanging
				Me._casetas = value
				Me.SendPropertyChanged("casetas")
				Me.OncasetasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_choferes", DbType:="Decimal(18,2)")>  _
	Public Property choferes() As System.Nullable(Of Decimal)
		Get
			Return Me._choferes
		End Get
		Set
			If (Me._choferes.Equals(value) = false) Then
				Me.OnchoferesChanging(value)
				Me.SendPropertyChanging
				Me._choferes = value
				Me.SendPropertyChanged("choferes")
				Me.OnchoferesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_combustible", DbType:="Decimal(18,2)")>  _
	Public Property combustible() As System.Nullable(Of Decimal)
		Get
			Return Me._combustible
		End Get
		Set
			If (Me._combustible.Equals(value) = false) Then
				Me.OncombustibleChanging(value)
				Me.SendPropertyChanging
				Me._combustible = value
				Me.SendPropertyChanged("combustible")
				Me.OncombustibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idViaje", DbType:="Int")>  _
	Public Property idViaje() As System.Nullable(Of Integer)
		Get
			Return Me._idViaje
		End Get
		Set
			If (Me._idViaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidViajeChanging(value)
				Me.SendPropertyChanging
				Me._idViaje = value
				Me.SendPropertyChanged("idViaje")
				Me.OnidViajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_otros", DbType:="Money")>  _
	Public Property otros() As System.Nullable(Of Decimal)
		Get
			Return Me._otros
		End Get
		Set
			If (Me._otros.Equals(value) = false) Then
				Me.OnotrosChanging(value)
				Me.SendPropertyChanging
				Me._otros = value
				Me.SendPropertyChanged("otros")
				Me.OnotrosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_margen", Storage:="_viaje", ThisKey:="idViaje", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.margens.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.margens.Add(Me)
					Me._idViaje = value.id_viaje
				Else
					Me._idViaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="preventivos")>  _
Partial Public Class preventivo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _id_reparacion As System.Nullable(Of Integer)
	
	Private _proximoServicio As System.Nullable(Of Integer)
	
	Private _reparacione1 As EntityRef(Of reparacione1)
	
	Private _reparacione As EntityRef(Of reparacione)
	
	Private _equipo_operacion As EntityRef(Of equipo_operacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub Onid_reparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_reparacionChanged()
    End Sub
    Partial Private Sub OnproximoServicioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnproximoServicioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._reparacione1 = CType(Nothing, EntityRef(Of reparacione1))
		Me._reparacione = CType(Nothing, EntityRef(Of reparacione))
		Me._equipo_operacion = CType(Nothing, EntityRef(Of equipo_operacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				If Me._equipo_operacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_reparacion", DbType:="Int")>  _
	Public Property id_reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_reparacion
		End Get
		Set
			If (Me._id_reparacion.Equals(value) = false) Then
				If (Me._reparacione1.HasLoadedOrAssignedValue OrElse Me._reparacione.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_reparacionChanging(value)
				Me.SendPropertyChanging
				Me._id_reparacion = value
				Me.SendPropertyChanged("id_reparacion")
				Me.Onid_reparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_proximoServicio", DbType:="Int")>  _
	Public Property proximoServicio() As System.Nullable(Of Integer)
		Get
			Return Me._proximoServicio
		End Get
		Set
			If (Me._proximoServicio.Equals(value) = false) Then
				Me.OnproximoServicioChanging(value)
				Me.SendPropertyChanging
				Me._proximoServicio = value
				Me.SendPropertyChanged("proximoServicio")
				Me.OnproximoServicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reparacione1_preventivo", Storage:="_reparacione1", ThisKey:="id_reparacion", OtherKey:="idReparacion", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property reparacione1() As reparacione1
		Get
			Return Me._reparacione1.Entity
		End Get
		Set
			Dim previousValue As reparacione1 = Me._reparacione1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._reparacione1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._reparacione1.Entity = Nothing
					previousValue.preventivos.Remove(Me)
				End If
				Me._reparacione1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.preventivos.Add(Me)
					Me._id_reparacion = value.idReparacion
				Else
					Me._id_reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("reparacione1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reparacione_preventivo", Storage:="_reparacione", ThisKey:="id_reparacion", OtherKey:="idReparacion", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property reparacione() As reparacione
		Get
			Return Me._reparacione.Entity
		End Get
		Set
			Dim previousValue As reparacione = Me._reparacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._reparacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._reparacione.Entity = Nothing
					previousValue.preventivos.Remove(Me)
				End If
				Me._reparacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.preventivos.Add(Me)
					Me._id_reparacion = value.idReparacion
				Else
					Me._id_reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("reparacione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_preventivo", Storage:="_equipo_operacion", ThisKey:="id_equipo", OtherKey:="id_equipo", IsForeignKey:=true)>  _
	Public Property equipo_operacion() As equipo_operacion
		Get
			Return Me._equipo_operacion.Entity
		End Get
		Set
			Dim previousValue As equipo_operacion = Me._equipo_operacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_operacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_operacion.Entity = Nothing
					previousValue.preventivos.Remove(Me)
				End If
				Me._equipo_operacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.preventivos.Add(Me)
					Me._id_equipo = value.id_equipo
				Else
					Me._id_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_operacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class listaDistribucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idLista As Integer
	
	Private _nombreLista As String
	
	Private _idStatus As System.Nullable(Of Integer)
	
	Private _contactosServicios As EntitySet(Of contactosServicio)
	
	Private _correos As EntitySet(Of correo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidListaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidListaChanged()
    End Sub
    Partial Private Sub OnnombreListaChanging(value As String)
    End Sub
    Partial Private Sub OnnombreListaChanged()
    End Sub
    Partial Private Sub OnidStatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._contactosServicios = New EntitySet(Of contactosServicio)(AddressOf Me.attach_contactosServicios, AddressOf Me.detach_contactosServicios)
		Me._correos = New EntitySet(Of correo)(AddressOf Me.attach_correos, AddressOf Me.detach_correos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLista", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idLista() As Integer
		Get
			Return Me._idLista
		End Get
		Set
			If ((Me._idLista = value)  _
						= false) Then
				Me.OnidListaChanging(value)
				Me.SendPropertyChanging
				Me._idLista = value
				Me.SendPropertyChanged("idLista")
				Me.OnidListaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreLista", DbType:="NVarChar(100)")>  _
	Public Property nombreLista() As String
		Get
			Return Me._nombreLista
		End Get
		Set
			If (String.Equals(Me._nombreLista, value) = false) Then
				Me.OnnombreListaChanging(value)
				Me.SendPropertyChanging
				Me._nombreLista = value
				Me.SendPropertyChanged("nombreLista")
				Me.OnnombreListaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idStatus", DbType:="int")>  _
	Public Property idStatus() As System.Nullable(Of Integer)
		Get
			Return Me._idStatus
		End Get
		Set
			If (Me._idStatus.Equals(value) = false) Then
				Me.OnidStatusChanging(value)
				Me.SendPropertyChanging
				Me._idStatus = value
				Me.SendPropertyChanged("idStatus")
				Me.OnidStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDistribucion_contactosServicio", Storage:="_contactosServicios", ThisKey:="idLista", OtherKey:="idLista")>  _
	Public Property contactosServicios() As EntitySet(Of contactosServicio)
		Get
			Return Me._contactosServicios
		End Get
		Set
			Me._contactosServicios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDistribucion_correo", Storage:="_correos", ThisKey:="idLista", OtherKey:="idLista")>  _
	Public Property correos() As EntitySet(Of correo)
		Get
			Return Me._correos
		End Get
		Set
			Me._correos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_contactosServicios(ByVal entity As contactosServicio)
		Me.SendPropertyChanging
		entity.listaDistribucion = Me
	End Sub
	
	Private Sub detach_contactosServicios(ByVal entity As contactosServicio)
		Me.SendPropertyChanging
		entity.listaDistribucion = Nothing
	End Sub
	
	Private Sub attach_correos(ByVal entity As correo)
		Me.SendPropertyChanging
		entity.listaDistribucion = Me
	End Sub
	
	Private Sub detach_correos(ByVal entity As correo)
		Me.SendPropertyChanging
		entity.listaDistribucion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class contactosServicio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idGrupo As Integer
	
	Private _id_relacion As System.Nullable(Of Integer)
	
	Private _idLista As System.Nullable(Of Integer)
	
	Private _listaDistribucion As EntityRef(Of listaDistribucion)
	
	Private _precio As EntityRef(Of precio)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidGrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidGrupoChanged()
    End Sub
    Partial Private Sub Onid_relacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_relacionChanged()
    End Sub
    Partial Private Sub OnidListaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidListaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._listaDistribucion = CType(Nothing, EntityRef(Of listaDistribucion))
		Me._precio = CType(Nothing, EntityRef(Of precio))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idGrupo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idGrupo() As Integer
		Get
			Return Me._idGrupo
		End Get
		Set
			If ((Me._idGrupo = value)  _
						= false) Then
				Me.OnidGrupoChanging(value)
				Me.SendPropertyChanging
				Me._idGrupo = value
				Me.SendPropertyChanged("idGrupo")
				Me.OnidGrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_relacion", DbType:="Int")>  _
	Public Property id_relacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_relacion
		End Get
		Set
			If (Me._id_relacion.Equals(value) = false) Then
				If Me._precio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_relacionChanging(value)
				Me.SendPropertyChanging
				Me._id_relacion = value
				Me.SendPropertyChanged("id_relacion")
				Me.Onid_relacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLista", DbType:="Int")>  _
	Public Property idLista() As System.Nullable(Of Integer)
		Get
			Return Me._idLista
		End Get
		Set
			If (Me._idLista.Equals(value) = false) Then
				If Me._listaDistribucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidListaChanging(value)
				Me.SendPropertyChanging
				Me._idLista = value
				Me.SendPropertyChanged("idLista")
				Me.OnidListaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDistribucion_contactosServicio", Storage:="_listaDistribucion", ThisKey:="idLista", OtherKey:="idLista", IsForeignKey:=true)>  _
	Public Property listaDistribucion() As listaDistribucion
		Get
			Return Me._listaDistribucion.Entity
		End Get
		Set
			Dim previousValue As listaDistribucion = Me._listaDistribucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._listaDistribucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._listaDistribucion.Entity = Nothing
					previousValue.contactosServicios.Remove(Me)
				End If
				Me._listaDistribucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contactosServicios.Add(Me)
					Me._idLista = value.idLista
				Else
					Me._idLista = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("listaDistribucion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_contactosServicio", Storage:="_precio", ThisKey:="id_relacion", OtherKey:="id_relacion", IsForeignKey:=true)>  _
	Public Property precio() As precio
		Get
			Return Me._precio.Entity
		End Get
		Set
			Dim previousValue As precio = Me._precio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._precio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._precio.Entity = Nothing
					previousValue.contactosServicios.Remove(Me)
				End If
				Me._precio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contactosServicios.Add(Me)
					Me._id_relacion = value.id_relacion
				Else
					Me._id_relacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("precio")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="correos")>  _
Partial Public Class correo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCorreo As Integer
	
	Private _correo As String
	
	Private _idLista As System.Nullable(Of Integer)
	
	Private _listaDistribucion As EntityRef(Of listaDistribucion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCorreoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCorreoChanged()
    End Sub
    Partial Private Sub OncorreoChanging(value As String)
    End Sub
    Partial Private Sub OncorreoChanged()
    End Sub
    Partial Private Sub OnidListaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidListaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._listaDistribucion = CType(Nothing, EntityRef(Of listaDistribucion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCorreo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCorreo() As Integer
		Get
			Return Me._idCorreo
		End Get
		Set
			If ((Me._idCorreo = value)  _
						= false) Then
				Me.OnidCorreoChanging(value)
				Me.SendPropertyChanging
				Me._idCorreo = value
				Me.SendPropertyChanged("idCorreo")
				Me.OnidCorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correo", DbType:="NVarChar(100)")>  _
	Public Property correo() As String
		Get
			Return Me._correo
		End Get
		Set
			If (String.Equals(Me._correo, value) = false) Then
				Me.OncorreoChanging(value)
				Me.SendPropertyChanging
				Me._correo = value
				Me.SendPropertyChanged("correo")
				Me.OncorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLista", DbType:="Int")>  _
	Public Property idLista() As System.Nullable(Of Integer)
		Get
			Return Me._idLista
		End Get
		Set
			If (Me._idLista.Equals(value) = false) Then
				If Me._listaDistribucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidListaChanging(value)
				Me.SendPropertyChanging
				Me._idLista = value
				Me.SendPropertyChanged("idLista")
				Me.OnidListaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="listaDistribucion_correo", Storage:="_listaDistribucion", ThisKey:="idLista", OtherKey:="idLista", IsForeignKey:=true)>  _
	Public Property listaDistribucion() As listaDistribucion
		Get
			Return Me._listaDistribucion.Entity
		End Get
		Set
			Dim previousValue As listaDistribucion = Me._listaDistribucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._listaDistribucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._listaDistribucion.Entity = Nothing
					previousValue.correos.Remove(Me)
				End If
				Me._listaDistribucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.correos.Add(Me)
					Me._idLista = value.idLista
				Else
					Me._idLista = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("listaDistribucion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Ordenes")>  _
Partial Public Class Ordene
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ano As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _consecutivo As System.Nullable(Of Integer)
	
	Private _id_orden As Integer
	
	Private _fechas_ordenes As EntitySet(Of fechas_ordene)
	
	Private _recargas_internas As EntitySet(Of recargas_interna)
	
	Private _liquidaciones As EntitySet(Of liquidacione)
	
	Private _Odometros As EntitySet(Of Odometro)
	
	Private _viajes As EntitySet(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnanoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnanoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub OnconsecutivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnconsecutivoChanged()
    End Sub
    Partial Private Sub Onid_ordenChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_ordenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fechas_ordenes = New EntitySet(Of fechas_ordene)(AddressOf Me.attach_fechas_ordenes, AddressOf Me.detach_fechas_ordenes)
		Me._recargas_internas = New EntitySet(Of recargas_interna)(AddressOf Me.attach_recargas_internas, AddressOf Me.detach_recargas_internas)
		Me._liquidaciones = New EntitySet(Of liquidacione)(AddressOf Me.attach_liquidaciones, AddressOf Me.detach_liquidaciones)
		Me._Odometros = New EntitySet(Of Odometro)(AddressOf Me.attach_Odometros, AddressOf Me.detach_Odometros)
		Me._viajes = New EntitySet(Of viaje)(AddressOf Me.attach_viajes, AddressOf Me.detach_viajes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ano", DbType:="Int")>  _
	Public Property ano() As System.Nullable(Of Integer)
		Get
			Return Me._ano
		End Get
		Set
			If (Me._ano.Equals(value) = false) Then
				Me.OnanoChanging(value)
				Me.SendPropertyChanging
				Me._ano = value
				Me.SendPropertyChanged("ano")
				Me.OnanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_consecutivo", DbType:="Int")>  _
	Public Property consecutivo() As System.Nullable(Of Integer)
		Get
			Return Me._consecutivo
		End Get
		Set
			If (Me._consecutivo.Equals(value) = false) Then
				Me.OnconsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._consecutivo = value
				Me.SendPropertyChanged("consecutivo")
				Me.OnconsecutivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_orden() As Integer
		Get
			Return Me._id_orden
		End Get
		Set
			If ((Me._id_orden = value)  _
						= false) Then
				Me.Onid_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_orden = value
				Me.SendPropertyChanged("id_orden")
				Me.Onid_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_fechas_ordene", Storage:="_fechas_ordenes", ThisKey:="id_orden", OtherKey:="id_orden")>  _
	Public Property fechas_ordenes() As EntitySet(Of fechas_ordene)
		Get
			Return Me._fechas_ordenes
		End Get
		Set
			Me._fechas_ordenes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_recargas_interna", Storage:="_recargas_internas", ThisKey:="id_orden", OtherKey:="id_orden")>  _
	Public Property recargas_internas() As EntitySet(Of recargas_interna)
		Get
			Return Me._recargas_internas
		End Get
		Set
			Me._recargas_internas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_liquidacione", Storage:="_liquidaciones", ThisKey:="id_orden", OtherKey:="id_orden")>  _
	Public Property liquidaciones() As EntitySet(Of liquidacione)
		Get
			Return Me._liquidaciones
		End Get
		Set
			Me._liquidaciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_Odometro", Storage:="_Odometros", ThisKey:="id_orden", OtherKey:="idOrden")>  _
	Public Property Odometros() As EntitySet(Of Odometro)
		Get
			Return Me._Odometros
		End Get
		Set
			Me._Odometros.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_viaje", Storage:="_viajes", ThisKey:="id_orden", OtherKey:="id_orden")>  _
	Public Property viajes() As EntitySet(Of viaje)
		Get
			Return Me._viajes
		End Get
		Set
			Me._viajes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fechas_ordenes(ByVal entity As fechas_ordene)
		Me.SendPropertyChanging
		entity.Ordene = Me
	End Sub
	
	Private Sub detach_fechas_ordenes(ByVal entity As fechas_ordene)
		Me.SendPropertyChanging
		entity.Ordene = Nothing
	End Sub
	
	Private Sub attach_recargas_internas(ByVal entity As recargas_interna)
		Me.SendPropertyChanging
		entity.Ordene = Me
	End Sub
	
	Private Sub detach_recargas_internas(ByVal entity As recargas_interna)
		Me.SendPropertyChanging
		entity.Ordene = Nothing
	End Sub
	
	Private Sub attach_liquidaciones(ByVal entity As liquidacione)
		Me.SendPropertyChanging
		entity.Ordene = Me
	End Sub
	
	Private Sub detach_liquidaciones(ByVal entity As liquidacione)
		Me.SendPropertyChanging
		entity.Ordene = Nothing
	End Sub
	
	Private Sub attach_Odometros(ByVal entity As Odometro)
		Me.SendPropertyChanging
		entity.Ordene = Me
	End Sub
	
	Private Sub detach_Odometros(ByVal entity As Odometro)
		Me.SendPropertyChanging
		entity.Ordene = Nothing
	End Sub
	
	Private Sub attach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.Ordene = Me
	End Sub
	
	Private Sub detach_viajes(ByVal entity As viaje)
		Me.SendPropertyChanging
		entity.Ordene = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Odometros")>  _
Partial Public Class Odometro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _odometro As System.Nullable(Of Integer)
	
	Private _tipo_trayecto As System.Nullable(Of Integer)
	
	Private _id_inspeccion As System.Nullable(Of Integer)
	
	Private _id_odometro As Integer
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _id_chofer As System.Nullable(Of Integer)
	
	Private _id_asignacion As System.Nullable(Of Integer)
	
	Private _inspector As String
	
	Private _num_ejes As System.Nullable(Of Integer)
	
	Private _idOrden As System.Nullable(Of Integer)
	
	Private _Ordene As EntityRef(Of Ordene)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnodometroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnodometroChanged()
    End Sub
    Partial Private Sub Ontipo_trayectoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_trayectoChanged()
    End Sub
    Partial Private Sub Onid_inspeccionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_inspeccionChanged()
    End Sub
    Partial Private Sub Onid_odometroChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_odometroChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub Onid_choferChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_choferChanged()
    End Sub
    Partial Private Sub Onid_asignacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_asignacionChanged()
    End Sub
    Partial Private Sub OninspectorChanging(value As String)
    End Sub
    Partial Private Sub OninspectorChanged()
    End Sub
    Partial Private Sub Onnum_ejesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnum_ejesChanged()
    End Sub
    Partial Private Sub OnidOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidOrdenChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ordene = CType(Nothing, EntityRef(Of Ordene))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_odometro", DbType:="Int")>  _
	Public Property odometro() As System.Nullable(Of Integer)
		Get
			Return Me._odometro
		End Get
		Set
			If (Me._odometro.Equals(value) = false) Then
				Me.OnodometroChanging(value)
				Me.SendPropertyChanging
				Me._odometro = value
				Me.SendPropertyChanged("odometro")
				Me.OnodometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_trayecto", DbType:="Int")>  _
	Public Property tipo_trayecto() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_trayecto
		End Get
		Set
			If (Me._tipo_trayecto.Equals(value) = false) Then
				Me.Ontipo_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._tipo_trayecto = value
				Me.SendPropertyChanged("tipo_trayecto")
				Me.Ontipo_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_inspeccion", DbType:="Int")>  _
	Public Property id_inspeccion() As System.Nullable(Of Integer)
		Get
			Return Me._id_inspeccion
		End Get
		Set
			If (Me._id_inspeccion.Equals(value) = false) Then
				Me.Onid_inspeccionChanging(value)
				Me.SendPropertyChanging
				Me._id_inspeccion = value
				Me.SendPropertyChanged("id_inspeccion")
				Me.Onid_inspeccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_odometro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_odometro() As Integer
		Get
			Return Me._id_odometro
		End Get
		Set
			If ((Me._id_odometro = value)  _
						= false) Then
				Me.Onid_odometroChanging(value)
				Me.SendPropertyChanging
				Me._id_odometro = value
				Me.SendPropertyChanged("id_odometro")
				Me.Onid_odometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_chofer", DbType:="Int")>  _
	Public Property id_chofer() As System.Nullable(Of Integer)
		Get
			Return Me._id_chofer
		End Get
		Set
			If (Me._id_chofer.Equals(value) = false) Then
				Me.Onid_choferChanging(value)
				Me.SendPropertyChanging
				Me._id_chofer = value
				Me.SendPropertyChanged("id_chofer")
				Me.Onid_choferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_asignacion", DbType:="Int")>  _
	Public Property id_asignacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_asignacion
		End Get
		Set
			If (Me._id_asignacion.Equals(value) = false) Then
				Me.Onid_asignacionChanging(value)
				Me.SendPropertyChanging
				Me._id_asignacion = value
				Me.SendPropertyChanged("id_asignacion")
				Me.Onid_asignacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inspector", DbType:="NVarChar(50)")>  _
	Public Property inspector() As String
		Get
			Return Me._inspector
		End Get
		Set
			If (String.Equals(Me._inspector, value) = false) Then
				Me.OninspectorChanging(value)
				Me.SendPropertyChanging
				Me._inspector = value
				Me.SendPropertyChanged("inspector")
				Me.OninspectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_num_ejes", DbType:="Int")>  _
	Public Property num_ejes() As System.Nullable(Of Integer)
		Get
			Return Me._num_ejes
		End Get
		Set
			If (Me._num_ejes.Equals(value) = false) Then
				Me.Onnum_ejesChanging(value)
				Me.SendPropertyChanging
				Me._num_ejes = value
				Me.SendPropertyChanged("num_ejes")
				Me.Onnum_ejesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idOrden", DbType:="Int")>  _
	Public Property idOrden() As System.Nullable(Of Integer)
		Get
			Return Me._idOrden
		End Get
		Set
			If (Me._idOrden.Equals(value) = false) Then
				If Me._Ordene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidOrdenChanging(value)
				Me.SendPropertyChanging
				Me._idOrden = value
				Me.SendPropertyChanged("idOrden")
				Me.OnidOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_Odometro", Storage:="_Ordene", ThisKey:="idOrden", OtherKey:="id_orden", IsForeignKey:=true)>  _
	Public Property Ordene() As Ordene
		Get
			Return Me._Ordene.Entity
		End Get
		Set
			Dim previousValue As Ordene = Me._Ordene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ordene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ordene.Entity = Nothing
					previousValue.Odometros.Remove(Me)
				End If
				Me._Ordene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Odometros.Add(Me)
					Me._idOrden = value.id_orden
				Else
					Me._idOrden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ordene")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="lotesFacturas")>  _
Partial Public Class lotesFactura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idLote As Integer
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _contrarecibos As EntitySet(Of contrarecibo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidLoteChanging(value As Integer)
    End Sub
    Partial Private Sub OnidLoteChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._contrarecibos = New EntitySet(Of contrarecibo)(AddressOf Me.attach_contrarecibos, AddressOf Me.detach_contrarecibos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLote", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true)>  _
	Public Property idLote() As Integer
		Get
			Return Me._idLote
		End Get
		Set
			If ((Me._idLote = value)  _
						= false) Then
				Me.OnidLoteChanging(value)
				Me.SendPropertyChanging
				Me._idLote = value
				Me.SendPropertyChanged("idLote")
				Me.OnidLoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lotesFactura_contrarecibo", Storage:="_contrarecibos", ThisKey:="idLote", OtherKey:="idLote")>  _
	Public Property contrarecibos() As EntitySet(Of contrarecibo)
		Get
			Return Me._contrarecibos
		End Get
		Set
			Me._contrarecibos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_contrarecibos(ByVal entity As contrarecibo)
		Me.SendPropertyChanging
		entity.lotesFactura = Me
	End Sub
	
	Private Sub detach_contrarecibos(ByVal entity As contrarecibo)
		Me.SendPropertyChanging
		entity.lotesFactura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="contrarecibos")>  _
Partial Public Class contrarecibo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idContra As Integer
	
	Private _id_factura As System.Nullable(Of Integer)
	
	Private _idLote As System.Nullable(Of Integer)
	
	Private _lotesFactura As EntityRef(Of lotesFactura)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidContraChanging(value As Integer)
    End Sub
    Partial Private Sub OnidContraChanged()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    Partial Private Sub OnidLoteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidLoteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._lotesFactura = CType(Nothing, EntityRef(Of lotesFactura))
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idContra", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idContra() As Integer
		Get
			Return Me._idContra
		End Get
		Set
			If ((Me._idContra = value)  _
						= false) Then
				Me.OnidContraChanging(value)
				Me.SendPropertyChanging
				Me._idContra = value
				Me.SendPropertyChanged("idContra")
				Me.OnidContraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", DbType:="Int")>  _
	Public Property id_factura() As System.Nullable(Of Integer)
		Get
			Return Me._id_factura
		End Get
		Set
			If (Me._id_factura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLote", DbType:="Int")>  _
	Public Property idLote() As System.Nullable(Of Integer)
		Get
			Return Me._idLote
		End Get
		Set
			If (Me._idLote.Equals(value) = false) Then
				If Me._lotesFactura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidLoteChanging(value)
				Me.SendPropertyChanging
				Me._idLote = value
				Me.SendPropertyChanged("idLote")
				Me.OnidLoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lotesFactura_contrarecibo", Storage:="_lotesFactura", ThisKey:="idLote", OtherKey:="idLote", IsForeignKey:=true)>  _
	Public Property lotesFactura() As lotesFactura
		Get
			Return Me._lotesFactura.Entity
		End Get
		Set
			Dim previousValue As lotesFactura = Me._lotesFactura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._lotesFactura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._lotesFactura.Entity = Nothing
					previousValue.contrarecibos.Remove(Me)
				End If
				Me._lotesFactura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contrarecibos.Add(Me)
					Me._idLote = value.idLote
				Else
					Me._idLote = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("lotesFactura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_contrarecibo", Storage:="_factura", ThisKey:="id_factura", OtherKey:="id_factura", IsForeignKey:=true)>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.contrarecibos.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.contrarecibos.Add(Me)
					Me._id_factura = value.id_factura
				Else
					Me._id_factura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tiposViajes")>  _
Partial Public Class tiposViaje
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idTipo As Integer
	
	Private _nombreViaje As System.Nullable(Of Integer)
	
	Private _clasificacionViajes As EntitySet(Of clasificacionViaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidTipoChanged()
    End Sub
    Partial Private Sub OnnombreViajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnombreViajeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._clasificacionViajes = New EntitySet(Of clasificacionViaje)(AddressOf Me.attach_clasificacionViajes, AddressOf Me.detach_clasificacionViajes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idTipo() As Integer
		Get
			Return Me._idTipo
		End Get
		Set
			If ((Me._idTipo = value)  _
						= false) Then
				Me.OnidTipoChanging(value)
				Me.SendPropertyChanging
				Me._idTipo = value
				Me.SendPropertyChanged("idTipo")
				Me.OnidTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreViaje", DbType:="Int")>  _
	Public Property nombreViaje() As System.Nullable(Of Integer)
		Get
			Return Me._nombreViaje
		End Get
		Set
			If (Me._nombreViaje.Equals(value) = false) Then
				Me.OnnombreViajeChanging(value)
				Me.SendPropertyChanging
				Me._nombreViaje = value
				Me.SendPropertyChanged("nombreViaje")
				Me.OnnombreViajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tiposViaje_clasificacionViaje", Storage:="_clasificacionViajes", ThisKey:="idTipo", OtherKey:="idTipo")>  _
	Public Property clasificacionViajes() As EntitySet(Of clasificacionViaje)
		Get
			Return Me._clasificacionViajes
		End Get
		Set
			Me._clasificacionViajes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_clasificacionViajes(ByVal entity As clasificacionViaje)
		Me.SendPropertyChanging
		entity.tiposViaje = Me
	End Sub
	
	Private Sub detach_clasificacionViajes(ByVal entity As clasificacionViaje)
		Me.SendPropertyChanging
		entity.tiposViaje = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="clasificacionViajes")>  _
Partial Public Class clasificacionViaje
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idConsolidado As Integer
	
	Private _idViaje As System.Nullable(Of Integer)
	
	Private _idTipo As System.Nullable(Of Integer)
	
	Private _tiposViaje As EntityRef(Of tiposViaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidConsolidadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidConsolidadoChanged()
    End Sub
    Partial Private Sub OnidViajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidViajeChanged()
    End Sub
    Partial Private Sub OnidTipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidTipoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tiposViaje = CType(Nothing, EntityRef(Of tiposViaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idConsolidado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property idConsolidado() As Integer
		Get
			Return Me._idConsolidado
		End Get
		Set
			If ((Me._idConsolidado = value)  _
						= false) Then
				Me.OnidConsolidadoChanging(value)
				Me.SendPropertyChanging
				Me._idConsolidado = value
				Me.SendPropertyChanged("idConsolidado")
				Me.OnidConsolidadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idViaje", DbType:="Int")>  _
	Public Property idViaje() As System.Nullable(Of Integer)
		Get
			Return Me._idViaje
		End Get
		Set
			If (Me._idViaje.Equals(value) = false) Then
				Me.OnidViajeChanging(value)
				Me.SendPropertyChanging
				Me._idViaje = value
				Me.SendPropertyChanged("idViaje")
				Me.OnidViajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idTipo", DbType:="Int")>  _
	Public Property idTipo() As System.Nullable(Of Integer)
		Get
			Return Me._idTipo
		End Get
		Set
			If (Me._idTipo.Equals(value) = false) Then
				If Me._tiposViaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidTipoChanging(value)
				Me.SendPropertyChanging
				Me._idTipo = value
				Me.SendPropertyChanged("idTipo")
				Me.OnidTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tiposViaje_clasificacionViaje", Storage:="_tiposViaje", ThisKey:="idTipo", OtherKey:="idTipo", IsForeignKey:=true)>  _
	Public Property tiposViaje() As tiposViaje
		Get
			Return Me._tiposViaje.Entity
		End Get
		Set
			Dim previousValue As tiposViaje = Me._tiposViaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tiposViaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tiposViaje.Entity = Nothing
					previousValue.clasificacionViajes.Remove(Me)
				End If
				Me._tiposViaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.clasificacionViajes.Add(Me)
					Me._idTipo = value.idTipo
				Else
					Me._idTipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tiposViaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="notificacionesPersonalizadas")>  _
Partial Public Class notificacionesPersonalizada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NotificacionId As Integer
	
	Private _UbicacionId As System.Nullable(Of Integer)
	
	Private _EmpresaId As System.Nullable(Of Integer)
	
	Private _RutaId As System.Nullable(Of Integer)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
	Private _empresa As EntityRef(Of empresa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNotificacionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnNotificacionIdChanged()
    End Sub
    Partial Private Sub OnUbicacionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUbicacionIdChanged()
    End Sub
    Partial Private Sub OnEmpresaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEmpresaIdChanged()
    End Sub
    Partial Private Sub OnRutaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRutaIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NotificacionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NotificacionId() As Integer
		Get
			Return Me._NotificacionId
		End Get
		Set
			If ((Me._NotificacionId = value)  _
						= false) Then
				Me.OnNotificacionIdChanging(value)
				Me.SendPropertyChanging
				Me._NotificacionId = value
				Me.SendPropertyChanged("NotificacionId")
				Me.OnNotificacionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UbicacionId", DbType:="Int")>  _
	Public Property UbicacionId() As System.Nullable(Of Integer)
		Get
			Return Me._UbicacionId
		End Get
		Set
			If (Me._UbicacionId.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUbicacionIdChanging(value)
				Me.SendPropertyChanging
				Me._UbicacionId = value
				Me.SendPropertyChanged("UbicacionId")
				Me.OnUbicacionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmpresaId", DbType:="Int")>  _
	Public Property EmpresaId() As System.Nullable(Of Integer)
		Get
			Return Me._EmpresaId
		End Get
		Set
			If (Me._EmpresaId.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmpresaIdChanging(value)
				Me.SendPropertyChanging
				Me._EmpresaId = value
				Me.SendPropertyChanged("EmpresaId")
				Me.OnEmpresaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RutaId", DbType:="Int")>  _
	Public Property RutaId() As System.Nullable(Of Integer)
		Get
			Return Me._RutaId
		End Get
		Set
			If (Me._RutaId.Equals(value) = false) Then
				Me.OnRutaIdChanging(value)
				Me.SendPropertyChanging
				Me._RutaId = value
				Me.SendPropertyChanged("RutaId")
				Me.OnRutaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_notificacionesPersonalizada", Storage:="_ubicacione", ThisKey:="UbicacionId", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.notificacionesPersonalizadas.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.notificacionesPersonalizadas.Add(Me)
					Me._UbicacionId = value.id_principal
				Else
					Me._UbicacionId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_notificacionesPersonalizada", Storage:="_empresa", ThisKey:="EmpresaId", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.notificacionesPersonalizadas.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.notificacionesPersonalizadas.Add(Me)
					Me._EmpresaId = value.id_empresa
				Else
					Me._EmpresaId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class seguimientoPorRecorrer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SeguimientoId As Integer
	
	Private _ubicacion As String
	
	Private _UbicacionId As System.Nullable(Of Integer)
	
	Private _idViaje As System.Nullable(Of Integer)
	
	Private _hora As System.Nullable(Of Date)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSeguimientoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSeguimientoIdChanged()
    End Sub
    Partial Private Sub OnubicacionChanging(value As String)
    End Sub
    Partial Private Sub OnubicacionChanged()
    End Sub
    Partial Private Sub OnUbicacionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUbicacionIdChanged()
    End Sub
    Partial Private Sub OnidViajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidViajeChanged()
    End Sub
    Partial Private Sub OnhoraChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnhoraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeguimientoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SeguimientoId() As Integer
		Get
			Return Me._SeguimientoId
		End Get
		Set
			If ((Me._SeguimientoId = value)  _
						= false) Then
				Me.OnSeguimientoIdChanging(value)
				Me.SendPropertyChanging
				Me._SeguimientoId = value
				Me.SendPropertyChanged("SeguimientoId")
				Me.OnSeguimientoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ubicacion", DbType:="NVarChar(50)")>  _
	Public Property ubicacion() As String
		Get
			Return Me._ubicacion
		End Get
		Set
			If (String.Equals(Me._ubicacion, value) = false) Then
				Me.OnubicacionChanging(value)
				Me.SendPropertyChanging
				Me._ubicacion = value
				Me.SendPropertyChanged("ubicacion")
				Me.OnubicacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UbicacionId", DbType:="Int")>  _
	Public Property UbicacionId() As System.Nullable(Of Integer)
		Get
			Return Me._UbicacionId
		End Get
		Set
			If (Me._UbicacionId.Equals(value) = false) Then
				Me.OnUbicacionIdChanging(value)
				Me.SendPropertyChanging
				Me._UbicacionId = value
				Me.SendPropertyChanged("UbicacionId")
				Me.OnUbicacionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idViaje", DbType:="Int")>  _
	Public Property idViaje() As System.Nullable(Of Integer)
		Get
			Return Me._idViaje
		End Get
		Set
			If (Me._idViaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidViajeChanging(value)
				Me.SendPropertyChanging
				Me._idViaje = value
				Me.SendPropertyChanged("idViaje")
				Me.OnidViajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hora", DbType:="SmallDateTime")>  _
	Public Property hora() As System.Nullable(Of Date)
		Get
			Return Me._hora
		End Get
		Set
			If (Me._hora.Equals(value) = false) Then
				Me.OnhoraChanging(value)
				Me.SendPropertyChanging
				Me._hora = value
				Me.SendPropertyChanged("hora")
				Me.OnhoraChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_seguimientoPorRecorrer", Storage:="_viaje", ThisKey:="idViaje", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.seguimientoPorRecorrers.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.seguimientoPorRecorrers.Add(Me)
					Me._idViaje = value.id_viaje
				Else
					Me._idViaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="CargosAdicionales")>  _
Partial Public Class CargosAdicionale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CargoId As Integer
	
	Private _ConceptoId As System.Nullable(Of Integer)
	
	Private _RelacionId As System.Nullable(Of Integer)
	
	Private _cargo As System.Nullable(Of Decimal)
	
	Private _precio As EntityRef(Of precio)
	
	Private _Concepto As EntityRef(Of Concepto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCargoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCargoIdChanged()
    End Sub
    Partial Private Sub OnConceptoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnConceptoIdChanged()
    End Sub
    Partial Private Sub OnRelacionIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRelacionIdChanged()
    End Sub
    Partial Private Sub OncargoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncargoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._precio = CType(Nothing, EntityRef(Of precio))
		Me._Concepto = CType(Nothing, EntityRef(Of Concepto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CargoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CargoId() As Integer
		Get
			Return Me._CargoId
		End Get
		Set
			If ((Me._CargoId = value)  _
						= false) Then
				Me.OnCargoIdChanging(value)
				Me.SendPropertyChanging
				Me._CargoId = value
				Me.SendPropertyChanged("CargoId")
				Me.OnCargoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoId", DbType:="Int")>  _
	Public Property ConceptoId() As System.Nullable(Of Integer)
		Get
			Return Me._ConceptoId
		End Get
		Set
			If (Me._ConceptoId.Equals(value) = false) Then
				If Me._Concepto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConceptoIdChanging(value)
				Me.SendPropertyChanging
				Me._ConceptoId = value
				Me.SendPropertyChanged("ConceptoId")
				Me.OnConceptoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelacionId", DbType:="Int")>  _
	Public Property RelacionId() As System.Nullable(Of Integer)
		Get
			Return Me._RelacionId
		End Get
		Set
			If (Me._RelacionId.Equals(value) = false) Then
				If Me._precio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRelacionIdChanging(value)
				Me.SendPropertyChanging
				Me._RelacionId = value
				Me.SendPropertyChanged("RelacionId")
				Me.OnRelacionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cargo", DbType:="Money")>  _
	Public Property cargo() As System.Nullable(Of Decimal)
		Get
			Return Me._cargo
		End Get
		Set
			If (Me._cargo.Equals(value) = false) Then
				Me.OncargoChanging(value)
				Me.SendPropertyChanging
				Me._cargo = value
				Me.SendPropertyChanged("cargo")
				Me.OncargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_CargosAdicionale", Storage:="_precio", ThisKey:="RelacionId", OtherKey:="id_relacion", IsForeignKey:=true)>  _
	Public Property precio() As precio
		Get
			Return Me._precio.Entity
		End Get
		Set
			Dim previousValue As precio = Me._precio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._precio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._precio.Entity = Nothing
					previousValue.CargosAdicionales.Remove(Me)
				End If
				Me._precio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CargosAdicionales.Add(Me)
					Me._RelacionId = value.id_relacion
				Else
					Me._RelacionId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("precio")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Concepto_CargosAdicionale", Storage:="_Concepto", ThisKey:="ConceptoId", OtherKey:="ConceptoId", IsForeignKey:=true)>  _
	Public Property Concepto() As Concepto
		Get
			Return Me._Concepto.Entity
		End Get
		Set
			Dim previousValue As Concepto = Me._Concepto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Concepto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Concepto.Entity = Nothing
					previousValue.CargosAdicionales.Remove(Me)
				End If
				Me._Concepto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CargosAdicionales.Add(Me)
					Me._ConceptoId = value.ConceptoId
				Else
					Me._ConceptoId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Concepto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Conceptos")>  _
Partial Public Class Concepto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ConceptoId As Integer
	
	Private _concepto As String
	
	Private _EstatusId As Integer
	
	Private _CargosAdicionales As EntitySet(Of CargosAdicionale)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnConceptoIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnConceptoIdChanged()
    End Sub
    Partial Private Sub OnconceptoChanging(value As String)
    End Sub
    Partial Private Sub OnconceptoChanged()
    End Sub
    Partial Private Sub OnEstatusIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstatusIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CargosAdicionales = New EntitySet(Of CargosAdicionale)(AddressOf Me.attach_CargosAdicionales, AddressOf Me.detach_CargosAdicionales)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConceptoId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ConceptoId() As Integer
		Get
			Return Me._ConceptoId
		End Get
		Set
			If ((Me._ConceptoId = value)  _
						= false) Then
				Me.OnConceptoIdChanging(value)
				Me.SendPropertyChanging
				Me._ConceptoId = value
				Me.SendPropertyChanged("ConceptoId")
				Me.OnConceptoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_concepto", DbType:="NVarChar(50)")>  _
	Public Property concepto() As String
		Get
			Return Me._concepto
		End Get
		Set
			If (String.Equals(Me._concepto, value) = false) Then
				Me.OnconceptoChanging(value)
				Me.SendPropertyChanging
				Me._concepto = value
				Me.SendPropertyChanged("concepto")
				Me.OnconceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstatusId", DbType:="Int")>  _
	Public Property EstatusId() As Integer
		Get
			Return Me._EstatusId
		End Get
		Set
			If ((Me._EstatusId = value)  _
						= false) Then
				Me.OnEstatusIdChanging(value)
				Me.SendPropertyChanging
				Me._EstatusId = value
				Me.SendPropertyChanged("EstatusId")
				Me.OnEstatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Concepto_CargosAdicionale", Storage:="_CargosAdicionales", ThisKey:="ConceptoId", OtherKey:="ConceptoId")>  _
	Public Property CargosAdicionales() As EntitySet(Of CargosAdicionale)
		Get
			Return Me._CargosAdicionales
		End Get
		Set
			Me._CargosAdicionales.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CargosAdicionales(ByVal entity As CargosAdicionale)
		Me.SendPropertyChanging
		entity.Concepto = Me
	End Sub
	
	Private Sub detach_CargosAdicionales(ByVal entity As CargosAdicionale)
		Me.SendPropertyChanging
		entity.Concepto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class cajaAsignada
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idCajaAsignada As Integer
	
	Private _CajaId As System.Nullable(Of Integer)
	
	Private _EquipoAsignadoId As System.Nullable(Of Integer)
	
	Private _Caja As EntityRef(Of Caja)
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidCajaAsignadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCajaAsignadaChanged()
    End Sub
    Partial Private Sub OnCajaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCajaIdChanged()
    End Sub
    Partial Private Sub OnEquipoAsignadoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEquipoAsignadoIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caja = CType(Nothing, EntityRef(Of Caja))
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCajaAsignada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idCajaAsignada() As Integer
		Get
			Return Me._idCajaAsignada
		End Get
		Set
			If ((Me._idCajaAsignada = value)  _
						= false) Then
				Me.OnidCajaAsignadaChanging(value)
				Me.SendPropertyChanging
				Me._idCajaAsignada = value
				Me.SendPropertyChanged("idCajaAsignada")
				Me.OnidCajaAsignadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CajaId", DbType:="Int")>  _
	Public Property CajaId() As System.Nullable(Of Integer)
		Get
			Return Me._CajaId
		End Get
		Set
			If (Me._CajaId.Equals(value) = false) Then
				If Me._Caja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCajaIdChanging(value)
				Me.SendPropertyChanging
				Me._CajaId = value
				Me.SendPropertyChanged("CajaId")
				Me.OnCajaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EquipoAsignadoId", DbType:="Int")>  _
	Public Property EquipoAsignadoId() As System.Nullable(Of Integer)
		Get
			Return Me._EquipoAsignadoId
		End Get
		Set
			If (Me._EquipoAsignadoId.Equals(value) = false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEquipoAsignadoIdChanging(value)
				Me.SendPropertyChanging
				Me._EquipoAsignadoId = value
				Me.SendPropertyChanged("EquipoAsignadoId")
				Me.OnEquipoAsignadoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caja_cajaAsignada", Storage:="_Caja", ThisKey:="CajaId", OtherKey:="CajaId", IsForeignKey:=true)>  _
	Public Property Caja() As Caja
		Get
			Return Me._Caja.Entity
		End Get
		Set
			Dim previousValue As Caja = Me._Caja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Caja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Caja.Entity = Nothing
					previousValue.cajaAsignadas.Remove(Me)
				End If
				Me._Caja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cajaAsignadas.Add(Me)
					Me._CajaId = value.CajaId
				Else
					Me._CajaId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Caja")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_cajaAsignada", Storage:="_equipo_asignado", ThisKey:="EquipoAsignadoId", OtherKey:="id_equipo_asignado", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.cajaAsignadas.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cajaAsignadas.Add(Me)
					Me._EquipoAsignadoId = value.id_equipo_asignado
				Else
					Me._EquipoAsignadoId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class ContactosCFDI
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _correo As String
	
	Private _idDatoFacturacion As Integer
	
	Private _datos_facturacion As EntityRef(Of datos_facturacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncorreoChanging(value As String)
    End Sub
    Partial Private Sub OncorreoChanged()
    End Sub
    Partial Private Sub OnidDatoFacturacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnidDatoFacturacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._datos_facturacion = CType(Nothing, EntityRef(Of datos_facturacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_correo", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property correo() As String
		Get
			Return Me._correo
		End Get
		Set
			If (String.Equals(Me._correo, value) = false) Then
				Me.OncorreoChanging(value)
				Me.SendPropertyChanging
				Me._correo = value
				Me.SendPropertyChanged("correo")
				Me.OncorreoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idDatoFacturacion", DbType:="Int NOT NULL")>  _
	Public Property idDatoFacturacion() As Integer
		Get
			Return Me._idDatoFacturacion
		End Get
		Set
			If ((Me._idDatoFacturacion = value)  _
						= false) Then
				If Me._datos_facturacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidDatoFacturacionChanging(value)
				Me.SendPropertyChanging
				Me._idDatoFacturacion = value
				Me.SendPropertyChanged("idDatoFacturacion")
				Me.OnidDatoFacturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="datos_facturacion_ContactosCFDI", Storage:="_datos_facturacion", ThisKey:="idDatoFacturacion", OtherKey:="id_dato", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property datos_facturacion() As datos_facturacion
		Get
			Return Me._datos_facturacion.Entity
		End Get
		Set
			Dim previousValue As datos_facturacion = Me._datos_facturacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._datos_facturacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._datos_facturacion.Entity = Nothing
					previousValue.ContactosCFDIs.Remove(Me)
				End If
				Me._datos_facturacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContactosCFDIs.Add(Me)
					Me._idDatoFacturacion = value.id_dato
				Else
					Me._idDatoFacturacion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("datos_facturacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class tipos_combustible
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _combustible As String
	
	Private _costo_combustibles As EntitySet(Of costo_combustible)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncombustibleChanging(value As String)
    End Sub
    Partial Private Sub OncombustibleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._costo_combustibles = New EntitySet(Of costo_combustible)(AddressOf Me.attach_costo_combustibles, AddressOf Me.detach_costo_combustibles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_combustible", DbType:="NVarChar(50)")>  _
	Public Property combustible() As String
		Get
			Return Me._combustible
		End Get
		Set
			If (String.Equals(Me._combustible, value) = false) Then
				Me.OncombustibleChanging(value)
				Me.SendPropertyChanging
				Me._combustible = value
				Me.SendPropertyChanged("combustible")
				Me.OncombustibleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_combustible_costo_combustible", Storage:="_costo_combustibles", ThisKey:="id", OtherKey:="tipo_combustible")>  _
	Public Property costo_combustibles() As EntitySet(Of costo_combustible)
		Get
			Return Me._costo_combustibles
		End Get
		Set
			Me._costo_combustibles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_costo_combustibles(ByVal entity As costo_combustible)
		Me.SendPropertyChanging
		entity.tipos_combustible = Me
	End Sub
	
	Private Sub detach_costo_combustibles(ByVal entity As costo_combustible)
		Me.SendPropertyChanging
		entity.tipos_combustible = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class insite
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _rendimiento As System.Nullable(Of Double)
	
	Private _idEquipoAsignado As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnrendimientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnrendimientoChanged()
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento", DbType:="Float")>  _
	Public Property rendimiento() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento
		End Get
		Set
			If (Me._rendimiento.Equals(value) = false) Then
				Me.OnrendimientoChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento = value
				Me.SendPropertyChanged("rendimiento")
				Me.OnrendimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipoAsignado", DbType:="Int")>  _
	Public Property idEquipoAsignado() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipoAsignado
		End Get
		Set
			If (Me._idEquipoAsignado.Equals(value) = false) Then
				Me.OnidEquipoAsignadoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipoAsignado = value
				Me.SendPropertyChanged("idEquipoAsignado")
				Me.OnidEquipoAsignadoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class cfdiPendienteCancelar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _idCfdi As Integer
	
	Private _cfdi As EntityRef(Of cfdi)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnidCfdiChanging(value As Integer)
    End Sub
    Partial Private Sub OnidCfdiChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cfdi = CType(Nothing, EntityRef(Of cfdi))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idCfdi", DbType:="Int NOT NULL")>  _
	Public Property idCfdi() As Integer
		Get
			Return Me._idCfdi
		End Get
		Set
			If ((Me._idCfdi = value)  _
						= false) Then
				If Me._cfdi.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidCfdiChanging(value)
				Me.SendPropertyChanging
				Me._idCfdi = value
				Me.SendPropertyChanged("idCfdi")
				Me.OnidCfdiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cfdi_cfdiPendienteCancelar", Storage:="_cfdi", ThisKey:="idCfdi", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property cfdi() As cfdi
		Get
			Return Me._cfdi.Entity
		End Get
		Set
			Dim previousValue As cfdi = Me._cfdi.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cfdi.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cfdi.Entity = Nothing
					previousValue.cfdiPendienteCancelars.Remove(Me)
				End If
				Me._cfdi.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cfdiPendienteCancelars.Add(Me)
					Me._idCfdi = value.id
				Else
					Me._idCfdi = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cfdi")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class recorridoEquipo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tipoTrayecto As Integer
	
	Private _grupo As Integer
	
	Private _idEquipoAsignado As Integer
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntipoTrayectoChanging(value As Integer)
    End Sub
    Partial Private Sub OntipoTrayectoChanged()
    End Sub
    Partial Private Sub OngrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OngrupoChanged()
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipoTrayecto", DbType:="Int NOT NULL")>  _
	Public Property tipoTrayecto() As Integer
		Get
			Return Me._tipoTrayecto
		End Get
		Set
			If ((Me._tipoTrayecto = value)  _
						= false) Then
				Me.OntipoTrayectoChanging(value)
				Me.SendPropertyChanging
				Me._tipoTrayecto = value
				Me.SendPropertyChanged("tipoTrayecto")
				Me.OntipoTrayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grupo", DbType:="Int NOT NULL")>  _
	Public Property grupo() As Integer
		Get
			Return Me._grupo
		End Get
		Set
			If ((Me._grupo = value)  _
						= false) Then
				Me.OngrupoChanging(value)
				Me.SendPropertyChanging
				Me._grupo = value
				Me.SendPropertyChanged("grupo")
				Me.OngrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipoAsignado", DbType:="Int NOT NULL")>  _
	Public Property idEquipoAsignado() As Integer
		Get
			Return Me._idEquipoAsignado
		End Get
		Set
			If ((Me._idEquipoAsignado = value)  _
						= false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEquipoAsignadoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipoAsignado = value
				Me.SendPropertyChanged("idEquipoAsignado")
				Me.OnidEquipoAsignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recorridoEquipo", Storage:="_equipo_asignado", ThisKey:="idEquipoAsignado", OtherKey:="id_equipo_asignado", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.recorridoEquipos.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recorridoEquipos.Add(Me)
					Me._idEquipoAsignado = value.id_equipo_asignado
				Else
					Me._idEquipoAsignado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="recorridoEquipo")>  _
Partial Public Class recorridoEquipo1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _tipoTrayecto As Integer
	
	Private _grupo As Integer
	
	Private _idEquipoAsignado As Integer
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OntipoTrayectoChanging(value As Integer)
    End Sub
    Partial Private Sub OntipoTrayectoChanged()
    End Sub
    Partial Private Sub OngrupoChanging(value As Integer)
    End Sub
    Partial Private Sub OngrupoChanged()
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipoTrayecto", DbType:="Int NOT NULL")>  _
	Public Property tipoTrayecto() As Integer
		Get
			Return Me._tipoTrayecto
		End Get
		Set
			If ((Me._tipoTrayecto = value)  _
						= false) Then
				Me.OntipoTrayectoChanging(value)
				Me.SendPropertyChanging
				Me._tipoTrayecto = value
				Me.SendPropertyChanged("tipoTrayecto")
				Me.OntipoTrayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grupo", DbType:="Int NOT NULL")>  _
	Public Property grupo() As Integer
		Get
			Return Me._grupo
		End Get
		Set
			If ((Me._grupo = value)  _
						= false) Then
				Me.OngrupoChanging(value)
				Me.SendPropertyChanging
				Me._grupo = value
				Me.SendPropertyChanged("grupo")
				Me.OngrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipoAsignado", DbType:="Int NOT NULL")>  _
	Public Property idEquipoAsignado() As Integer
		Get
			Return Me._idEquipoAsignado
		End Get
		Set
			If ((Me._idEquipoAsignado = value)  _
						= false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEquipoAsignadoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipoAsignado = value
				Me.SendPropertyChanged("idEquipoAsignado")
				Me.OnidEquipoAsignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recorridoEquipo1", Storage:="_equipo_asignado", ThisKey:="idEquipoAsignado", OtherKey:="id_equipo_asignado", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.recorridoEquipo1s.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recorridoEquipo1s.Add(Me)
					Me._idEquipoAsignado = value.id_equipo_asignado
				Else
					Me._idEquipoAsignado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class fallasSinReporte
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _idEquipo As System.Nullable(Of Integer)
	
	Private _idReparacion As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnidEquipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoChanged()
    End Sub
    Partial Private Sub OnidReparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidReparacionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipo", DbType:="Int")>  _
	Public Property idEquipo() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipo
		End Get
		Set
			If (Me._idEquipo.Equals(value) = false) Then
				Me.OnidEquipoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipo = value
				Me.SendPropertyChanged("idEquipo")
				Me.OnidEquipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReparacion", DbType:="Int")>  _
	Public Property idReparacion() As System.Nullable(Of Integer)
		Get
			Return Me._idReparacion
		End Get
		Set
			If (Me._idReparacion.Equals(value) = false) Then
				Me.OnidReparacionChanging(value)
				Me.SendPropertyChanging
				Me._idReparacion = value
				Me.SendPropertyChanged("idReparacion")
				Me.OnidReparacionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="reparaciones")>  _
Partial Public Class reparacione1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idReparacion As Integer
	
	Private _odometro As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _lugar As String
	
	Private _comentarios As String
	
	Private _costo As System.Nullable(Of Decimal)
	
	Private _tipo_reparacion As System.Nullable(Of Integer)
	
	Private _idEquipo As System.Nullable(Of Integer)
	
	Private _idReporte As System.Nullable(Of Integer)
	
	Private _preventivos As EntitySet(Of preventivo)
	
	Private _Tipo_reparacion1 As EntityRef(Of Tipo_reparacion)
	
	Private _reportes_falla As EntityRef(Of reportes_falla)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidReparacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnidReparacionChanged()
    End Sub
    Partial Private Sub OnodometroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnodometroChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnlugarChanging(value As String)
    End Sub
    Partial Private Sub OnlugarChanged()
    End Sub
    Partial Private Sub OncomentariosChanging(value As String)
    End Sub
    Partial Private Sub OncomentariosChanged()
    End Sub
    Partial Private Sub OncostoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncostoChanged()
    End Sub
    Partial Private Sub Ontipo_reparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_reparacionChanged()
    End Sub
    Partial Private Sub OnidEquipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoChanged()
    End Sub
    Partial Private Sub OnidReporteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidReporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._preventivos = New EntitySet(Of preventivo)(AddressOf Me.attach_preventivos, AddressOf Me.detach_preventivos)
		Me._Tipo_reparacion1 = CType(Nothing, EntityRef(Of Tipo_reparacion))
		Me._reportes_falla = CType(Nothing, EntityRef(Of reportes_falla))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReparacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idReparacion() As Integer
		Get
			Return Me._idReparacion
		End Get
		Set
			If ((Me._idReparacion = value)  _
						= false) Then
				Me.OnidReparacionChanging(value)
				Me.SendPropertyChanging
				Me._idReparacion = value
				Me.SendPropertyChanged("idReparacion")
				Me.OnidReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_odometro", DbType:="Int")>  _
	Public Property odometro() As System.Nullable(Of Integer)
		Get
			Return Me._odometro
		End Get
		Set
			If (Me._odometro.Equals(value) = false) Then
				Me.OnodometroChanging(value)
				Me.SendPropertyChanging
				Me._odometro = value
				Me.SendPropertyChanged("odometro")
				Me.OnodometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lugar", DbType:="VarChar(50)")>  _
	Public Property lugar() As String
		Get
			Return Me._lugar
		End Get
		Set
			If (String.Equals(Me._lugar, value) = false) Then
				Me.OnlugarChanging(value)
				Me.SendPropertyChanging
				Me._lugar = value
				Me.SendPropertyChanged("lugar")
				Me.OnlugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comentarios", DbType:="NVarChar(MAX)")>  _
	Public Property comentarios() As String
		Get
			Return Me._comentarios
		End Get
		Set
			If (String.Equals(Me._comentarios, value) = false) Then
				Me.OncomentariosChanging(value)
				Me.SendPropertyChanging
				Me._comentarios = value
				Me.SendPropertyChanged("comentarios")
				Me.OncomentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costo", DbType:="Money")>  _
	Public Property costo() As System.Nullable(Of Decimal)
		Get
			Return Me._costo
		End Get
		Set
			If (Me._costo.Equals(value) = false) Then
				Me.OncostoChanging(value)
				Me.SendPropertyChanging
				Me._costo = value
				Me.SendPropertyChanged("costo")
				Me.OncostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_reparacion", DbType:="Int")>  _
	Public Property tipo_reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_reparacion
		End Get
		Set
			If (Me._tipo_reparacion.Equals(value) = false) Then
				If Me._Tipo_reparacion1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_reparacionChanging(value)
				Me.SendPropertyChanging
				Me._tipo_reparacion = value
				Me.SendPropertyChanged("tipo_reparacion")
				Me.Ontipo_reparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipo", DbType:="Int")>  _
	Public Property idEquipo() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipo
		End Get
		Set
			If (Me._idEquipo.Equals(value) = false) Then
				Me.OnidEquipoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipo = value
				Me.SendPropertyChanged("idEquipo")
				Me.OnidEquipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReporte", DbType:="Int")>  _
	Public Property idReporte() As System.Nullable(Of Integer)
		Get
			Return Me._idReporte
		End Get
		Set
			If (Me._idReporte.Equals(value) = false) Then
				If Me._reportes_falla.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidReporteChanging(value)
				Me.SendPropertyChanging
				Me._idReporte = value
				Me.SendPropertyChanged("idReporte")
				Me.OnidReporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reparacione1_preventivo", Storage:="_preventivos", ThisKey:="idReparacion", OtherKey:="id_reparacion")>  _
	Public Property preventivos() As EntitySet(Of preventivo)
		Get
			Return Me._preventivos
		End Get
		Set
			Me._preventivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_reparacione1", Storage:="_Tipo_reparacion1", ThisKey:="tipo_reparacion", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Tipo_reparacion1() As Tipo_reparacion
		Get
			Return Me._Tipo_reparacion1.Entity
		End Get
		Set
			Dim previousValue As Tipo_reparacion = Me._Tipo_reparacion1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipo_reparacion1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipo_reparacion1.Entity = Nothing
					previousValue.reparacione1s.Remove(Me)
				End If
				Me._Tipo_reparacion1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.reparacione1s.Add(Me)
					Me._tipo_reparacion = value.id
				Else
					Me._tipo_reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tipo_reparacion1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reportes_falla_reparacione1", Storage:="_reportes_falla", ThisKey:="idReporte", OtherKey:="ReporteId", IsForeignKey:=true)>  _
	Public Property reportes_falla() As reportes_falla
		Get
			Return Me._reportes_falla.Entity
		End Get
		Set
			Dim previousValue As reportes_falla = Me._reportes_falla.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._reportes_falla.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._reportes_falla.Entity = Nothing
					previousValue.reparacione1s.Remove(Me)
				End If
				Me._reportes_falla.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.reparacione1s.Add(Me)
					Me._idReporte = value.ReporteId
				Else
					Me._idReporte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("reportes_falla")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.reparacione1 = Me
	End Sub
	
	Private Sub detach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.reparacione1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="reparaciones")>  _
Partial Public Class reparacione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idReparacion As Integer
	
	Private _odometro As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _lugar As String
	
	Private _comentarios As String
	
	Private _costo As System.Nullable(Of Decimal)
	
	Private _tipo_reparacion As System.Nullable(Of Integer)
	
	Private _idEquipo As System.Nullable(Of Integer)
	
	Private _idReporte As System.Nullable(Of Integer)
	
	Private _preventivos As EntitySet(Of preventivo)
	
	Private _Tipo_reparacion1 As EntityRef(Of Tipo_reparacion)
	
	Private _reportes_falla As EntityRef(Of reportes_falla)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidReparacionChanging(value As Integer)
    End Sub
    Partial Private Sub OnidReparacionChanged()
    End Sub
    Partial Private Sub OnodometroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnodometroChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnlugarChanging(value As String)
    End Sub
    Partial Private Sub OnlugarChanged()
    End Sub
    Partial Private Sub OncomentariosChanging(value As String)
    End Sub
    Partial Private Sub OncomentariosChanged()
    End Sub
    Partial Private Sub OncostoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OncostoChanged()
    End Sub
    Partial Private Sub Ontipo_reparacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ontipo_reparacionChanged()
    End Sub
    Partial Private Sub OnidEquipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoChanged()
    End Sub
    Partial Private Sub OnidReporteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidReporteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._preventivos = New EntitySet(Of preventivo)(AddressOf Me.attach_preventivos, AddressOf Me.detach_preventivos)
		Me._Tipo_reparacion1 = CType(Nothing, EntityRef(Of Tipo_reparacion))
		Me._reportes_falla = CType(Nothing, EntityRef(Of reportes_falla))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReparacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idReparacion() As Integer
		Get
			Return Me._idReparacion
		End Get
		Set
			If ((Me._idReparacion = value)  _
						= false) Then
				Me.OnidReparacionChanging(value)
				Me.SendPropertyChanging
				Me._idReparacion = value
				Me.SendPropertyChanged("idReparacion")
				Me.OnidReparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_odometro", DbType:="Int")>  _
	Public Property odometro() As System.Nullable(Of Integer)
		Get
			Return Me._odometro
		End Get
		Set
			If (Me._odometro.Equals(value) = false) Then
				Me.OnodometroChanging(value)
				Me.SendPropertyChanging
				Me._odometro = value
				Me.SendPropertyChanged("odometro")
				Me.OnodometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lugar", DbType:="VarChar(50)")>  _
	Public Property lugar() As String
		Get
			Return Me._lugar
		End Get
		Set
			If (String.Equals(Me._lugar, value) = false) Then
				Me.OnlugarChanging(value)
				Me.SendPropertyChanging
				Me._lugar = value
				Me.SendPropertyChanged("lugar")
				Me.OnlugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comentarios", DbType:="NVarChar(MAX)")>  _
	Public Property comentarios() As String
		Get
			Return Me._comentarios
		End Get
		Set
			If (String.Equals(Me._comentarios, value) = false) Then
				Me.OncomentariosChanging(value)
				Me.SendPropertyChanging
				Me._comentarios = value
				Me.SendPropertyChanged("comentarios")
				Me.OncomentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costo", DbType:="Money")>  _
	Public Property costo() As System.Nullable(Of Decimal)
		Get
			Return Me._costo
		End Get
		Set
			If (Me._costo.Equals(value) = false) Then
				Me.OncostoChanging(value)
				Me.SendPropertyChanging
				Me._costo = value
				Me.SendPropertyChanged("costo")
				Me.OncostoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_reparacion", DbType:="Int")>  _
	Public Property tipo_reparacion() As System.Nullable(Of Integer)
		Get
			Return Me._tipo_reparacion
		End Get
		Set
			If (Me._tipo_reparacion.Equals(value) = false) Then
				If Me._Tipo_reparacion1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontipo_reparacionChanging(value)
				Me.SendPropertyChanging
				Me._tipo_reparacion = value
				Me.SendPropertyChanged("tipo_reparacion")
				Me.Ontipo_reparacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipo", DbType:="Int")>  _
	Public Property idEquipo() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipo
		End Get
		Set
			If (Me._idEquipo.Equals(value) = false) Then
				Me.OnidEquipoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipo = value
				Me.SendPropertyChanged("idEquipo")
				Me.OnidEquipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idReporte", DbType:="Int")>  _
	Public Property idReporte() As System.Nullable(Of Integer)
		Get
			Return Me._idReporte
		End Get
		Set
			If (Me._idReporte.Equals(value) = false) Then
				If Me._reportes_falla.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidReporteChanging(value)
				Me.SendPropertyChanging
				Me._idReporte = value
				Me.SendPropertyChanged("idReporte")
				Me.OnidReporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reparacione_preventivo", Storage:="_preventivos", ThisKey:="idReparacion", OtherKey:="id_reparacion")>  _
	Public Property preventivos() As EntitySet(Of preventivo)
		Get
			Return Me._preventivos
		End Get
		Set
			Me._preventivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tipo_reparacion_reparacione", Storage:="_Tipo_reparacion1", ThisKey:="tipo_reparacion", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Tipo_reparacion1() As Tipo_reparacion
		Get
			Return Me._Tipo_reparacion1.Entity
		End Get
		Set
			Dim previousValue As Tipo_reparacion = Me._Tipo_reparacion1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tipo_reparacion1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tipo_reparacion1.Entity = Nothing
					previousValue.reparaciones.Remove(Me)
				End If
				Me._Tipo_reparacion1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.reparaciones.Add(Me)
					Me._tipo_reparacion = value.id
				Else
					Me._tipo_reparacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Tipo_reparacion1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reportes_falla_reparacione", Storage:="_reportes_falla", ThisKey:="idReporte", OtherKey:="ReporteId", IsForeignKey:=true)>  _
	Public Property reportes_falla() As reportes_falla
		Get
			Return Me._reportes_falla.Entity
		End Get
		Set
			Dim previousValue As reportes_falla = Me._reportes_falla.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._reportes_falla.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._reportes_falla.Entity = Nothing
					previousValue.reparaciones.Remove(Me)
				End If
				Me._reportes_falla.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.reparaciones.Add(Me)
					Me._idReporte = value.ReporteId
				Else
					Me._idReporte = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("reportes_falla")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.reparacione = Me
	End Sub
	
	Private Sub detach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.reparacione = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="empresas")>  _
Partial Public Class empresa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_empresa As Integer
	
	Private _nombre As String
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _id_tipo_empresa As System.Nullable(Of Integer)
	
	Private _fecha_alta As System.Nullable(Of Date)
	
	Private _frecuente As System.Nullable(Of Boolean)
	
	Private _contactos As EntitySet(Of contacto)
	
	Private _detalle_arrivos As EntitySet(Of detalle_arrivo)
	
	Private _tarifas_choferes As EntitySet(Of tarifas_chofere)
	
	Private _tarifas_choferes1 As EntitySet(Of tarifas_chofere)
	
	Private _precios As EntitySet(Of precio)
	
	Private _notificacionesPersonalizadas As EntitySet(Of notificacionesPersonalizada)
	
	Private _proveedores_pagos As EntitySet(Of proveedores_pago)
	
	Private _datos_facturacions As EntitySet(Of datos_facturacion)
	
	Private _precios_cajas As EntitySet(Of precios_caja)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onid_tipo_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_empresaChanged()
    End Sub
    Partial Private Sub Onfecha_altaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_altaChanged()
    End Sub
    Partial Private Sub OnfrecuenteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnfrecuenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._contactos = New EntitySet(Of contacto)(AddressOf Me.attach_contactos, AddressOf Me.detach_contactos)
		Me._detalle_arrivos = New EntitySet(Of detalle_arrivo)(AddressOf Me.attach_detalle_arrivos, AddressOf Me.detach_detalle_arrivos)
		Me._tarifas_choferes = New EntitySet(Of tarifas_chofere)(AddressOf Me.attach_tarifas_choferes, AddressOf Me.detach_tarifas_choferes)
		Me._tarifas_choferes1 = New EntitySet(Of tarifas_chofere)(AddressOf Me.attach_tarifas_choferes1, AddressOf Me.detach_tarifas_choferes1)
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		Me._notificacionesPersonalizadas = New EntitySet(Of notificacionesPersonalizada)(AddressOf Me.attach_notificacionesPersonalizadas, AddressOf Me.detach_notificacionesPersonalizadas)
		Me._proveedores_pagos = New EntitySet(Of proveedores_pago)(AddressOf Me.attach_proveedores_pagos, AddressOf Me.detach_proveedores_pagos)
		Me._datos_facturacions = New EntitySet(Of datos_facturacion)(AddressOf Me.attach_datos_facturacions, AddressOf Me.detach_datos_facturacions)
		Me._precios_cajas = New EntitySet(Of precios_caja)(AddressOf Me.attach_precios_cajas, AddressOf Me.detach_precios_cajas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_empresa() As Integer
		Get
			Return Me._id_empresa
		End Get
		Set
			If ((Me._id_empresa = value)  _
						= false) Then
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="NVarChar(255)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_empresa", DbType:="Int")>  _
	Public Property id_tipo_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_empresa
		End Get
		Set
			If (Me._id_tipo_empresa.Equals(value) = false) Then
				Me.Onid_tipo_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_empresa = value
				Me.SendPropertyChanged("id_tipo_empresa")
				Me.Onid_tipo_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_alta", DbType:="SmallDateTime")>  _
	Public Property fecha_alta() As System.Nullable(Of Date)
		Get
			Return Me._fecha_alta
		End Get
		Set
			If (Me._fecha_alta.Equals(value) = false) Then
				Me.Onfecha_altaChanging(value)
				Me.SendPropertyChanging
				Me._fecha_alta = value
				Me.SendPropertyChanged("fecha_alta")
				Me.Onfecha_altaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_frecuente", DbType:="Bit")>  _
	Public Property frecuente() As System.Nullable(Of Boolean)
		Get
			Return Me._frecuente
		End Get
		Set
			If (Me._frecuente.Equals(value) = false) Then
				Me.OnfrecuenteChanging(value)
				Me.SendPropertyChanging
				Me._frecuente = value
				Me.SendPropertyChanged("frecuente")
				Me.OnfrecuenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_contacto", Storage:="_contactos", ThisKey:="id_empresa", OtherKey:="id_empresa")>  _
	Public Property contactos() As EntitySet(Of contacto)
		Get
			Return Me._contactos
		End Get
		Set
			Me._contactos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_detalle_arrivo", Storage:="_detalle_arrivos", ThisKey:="id_empresa", OtherKey:="id_empresa")>  _
	Public Property detalle_arrivos() As EntitySet(Of detalle_arrivo)
		Get
			Return Me._detalle_arrivos
		End Get
		Set
			Me._detalle_arrivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_tarifas_chofere", Storage:="_tarifas_choferes", ThisKey:="id_empresa", OtherKey:="id_cliente")>  _
	Public Property tarifas_choferes() As EntitySet(Of tarifas_chofere)
		Get
			Return Me._tarifas_choferes
		End Get
		Set
			Me._tarifas_choferes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_tarifas_chofere1", Storage:="_tarifas_choferes1", ThisKey:="id_empresa", OtherKey:="id_cliente")>  _
	Public Property tarifas_choferes1() As EntitySet(Of tarifas_chofere)
		Get
			Return Me._tarifas_choferes1
		End Get
		Set
			Me._tarifas_choferes1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_precio", Storage:="_precios", ThisKey:="id_empresa", OtherKey:="id_empresa")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_notificacionesPersonalizada", Storage:="_notificacionesPersonalizadas", ThisKey:="id_empresa", OtherKey:="EmpresaId")>  _
	Public Property notificacionesPersonalizadas() As EntitySet(Of notificacionesPersonalizada)
		Get
			Return Me._notificacionesPersonalizadas
		End Get
		Set
			Me._notificacionesPersonalizadas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_proveedores_pago", Storage:="_proveedores_pagos", ThisKey:="id_empresa", OtherKey:="id_proveedor")>  _
	Public Property proveedores_pagos() As EntitySet(Of proveedores_pago)
		Get
			Return Me._proveedores_pagos
		End Get
		Set
			Me._proveedores_pagos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_datos_facturacion", Storage:="_datos_facturacions", ThisKey:="id_empresa", OtherKey:="id_empresa")>  _
	Public Property datos_facturacions() As EntitySet(Of datos_facturacion)
		Get
			Return Me._datos_facturacions
		End Get
		Set
			Me._datos_facturacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_precios_caja", Storage:="_precios_cajas", ThisKey:="id_empresa", OtherKey:="id_cliente")>  _
	Public Property precios_cajas() As EntitySet(Of precios_caja)
		Get
			Return Me._precios_cajas
		End Get
		Set
			Me._precios_cajas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_contactos(ByVal entity As contacto)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_contactos(ByVal entity As contacto)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_detalle_arrivos(ByVal entity As detalle_arrivo)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_detalle_arrivos(ByVal entity As detalle_arrivo)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_tarifas_choferes(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_tarifas_choferes1(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.empresa1 = Me
	End Sub
	
	Private Sub detach_tarifas_choferes1(ByVal entity As tarifas_chofere)
		Me.SendPropertyChanging
		entity.empresa1 = Nothing
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_notificacionesPersonalizadas(ByVal entity As notificacionesPersonalizada)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_notificacionesPersonalizadas(ByVal entity As notificacionesPersonalizada)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_datos_facturacions(ByVal entity As datos_facturacion)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_datos_facturacions(ByVal entity As datos_facturacion)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
	
	Private Sub attach_precios_cajas(ByVal entity As precios_caja)
		Me.SendPropertyChanging
		entity.empresa = Me
	End Sub
	
	Private Sub detach_precios_cajas(ByVal entity As precios_caja)
		Me.SendPropertyChanging
		entity.empresa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="rendimientos")>  _
Partial Public Class rendimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idRendimiento As Integer
	
	Private _lts As System.Nullable(Of Double)
	
	Private _kms As System.Nullable(Of Integer)
	
	Private _rendimiento As System.Nullable(Of Double)
	
	Private _idEquipoAsignado As System.Nullable(Of Integer)
	
	Private _grupo As System.Nullable(Of Integer)
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidRendimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnidRendimientoChanged()
    End Sub
    Partial Private Sub OnltsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnltsChanged()
    End Sub
    Partial Private Sub OnkmsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnkmsChanged()
    End Sub
    Partial Private Sub OnrendimientoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnrendimientoChanged()
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanged()
    End Sub
    Partial Private Sub OngrupoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OngrupoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idRendimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idRendimiento() As Integer
		Get
			Return Me._idRendimiento
		End Get
		Set
			If ((Me._idRendimiento = value)  _
						= false) Then
				Me.OnidRendimientoChanging(value)
				Me.SendPropertyChanging
				Me._idRendimiento = value
				Me.SendPropertyChanged("idRendimiento")
				Me.OnidRendimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lts", DbType:="Float")>  _
	Public Property lts() As System.Nullable(Of Double)
		Get
			Return Me._lts
		End Get
		Set
			If (Me._lts.Equals(value) = false) Then
				Me.OnltsChanging(value)
				Me.SendPropertyChanging
				Me._lts = value
				Me.SendPropertyChanged("lts")
				Me.OnltsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_kms", DbType:="Int")>  _
	Public Property kms() As System.Nullable(Of Integer)
		Get
			Return Me._kms
		End Get
		Set
			If (Me._kms.Equals(value) = false) Then
				Me.OnkmsChanging(value)
				Me.SendPropertyChanging
				Me._kms = value
				Me.SendPropertyChanged("kms")
				Me.OnkmsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento", DbType:="Float")>  _
	Public Property rendimiento() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento
		End Get
		Set
			If (Me._rendimiento.Equals(value) = false) Then
				Me.OnrendimientoChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento = value
				Me.SendPropertyChanged("rendimiento")
				Me.OnrendimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipoAsignado", DbType:="Int")>  _
	Public Property idEquipoAsignado() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipoAsignado
		End Get
		Set
			If (Me._idEquipoAsignado.Equals(value) = false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEquipoAsignadoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipoAsignado = value
				Me.SendPropertyChanged("idEquipoAsignado")
				Me.OnidEquipoAsignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grupo", DbType:="Int")>  _
	Public Property grupo() As System.Nullable(Of Integer)
		Get
			Return Me._grupo
		End Get
		Set
			If (Me._grupo.Equals(value) = false) Then
				Me.OngrupoChanging(value)
				Me.SendPropertyChanging
				Me._grupo = value
				Me.SendPropertyChanged("grupo")
				Me.OngrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_rendimiento", Storage:="_equipo_asignado", ThisKey:="idEquipoAsignado", OtherKey:="id_equipo_asignado", IsForeignKey:=true)>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.rendimientos.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.rendimientos.Add(Me)
					Me._idEquipoAsignado = value.id_equipo_asignado
				Else
					Me._idEquipoAsignado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="facturasOtros")>  _
Partial Public Class facturasOtro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _concepto As String
	
	Private _idFactura As System.Nullable(Of Integer)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnconceptoChanging(value As String)
    End Sub
    Partial Private Sub OnconceptoChanged()
    End Sub
    Partial Private Sub OnidFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFacturaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_concepto", DbType:="NVarChar(MAX)")>  _
	Public Property concepto() As String
		Get
			Return Me._concepto
		End Get
		Set
			If (String.Equals(Me._concepto, value) = false) Then
				Me.OnconceptoChanging(value)
				Me.SendPropertyChanging
				Me._concepto = value
				Me.SendPropertyChanged("concepto")
				Me.OnconceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFactura", DbType:="Int")>  _
	Public Property idFactura() As System.Nullable(Of Integer)
		Get
			Return Me._idFactura
		End Get
		Set
			If (Me._idFactura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFacturaChanging(value)
				Me.SendPropertyChanging
				Me._idFactura = value
				Me.SendPropertyChanged("idFactura")
				Me.OnidFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturasOtro", Storage:="_factura", ThisKey:="idFactura", OtherKey:="id_factura", IsForeignKey:=true)>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.facturasOtros.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturasOtros.Add(Me)
					Me._idFactura = value.id_factura
				Else
					Me._idFactura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class proveedores_pago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_pago As Integer
	
	Private _id_gasto As System.Nullable(Of Integer)
	
	Private _fecha_programacion_pago As System.Nullable(Of Date)
	
	Private _fecha_pago As System.Nullable(Of Date)
	
	Private _id_proveedor As System.Nullable(Of Integer)
	
	Private _id_cuenta As System.Nullable(Of Integer)
	
	Private _referencia As String
	
	Private _conta_cuenta As EntityRef(Of conta_cuenta)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _gasto As EntityRef(Of gasto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_pagoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_pagoChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    Partial Private Sub Onfecha_programacion_pagoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_programacion_pagoChanged()
    End Sub
    Partial Private Sub Onfecha_pagoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_pagoChanged()
    End Sub
    Partial Private Sub Onid_proveedorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_proveedorChanged()
    End Sub
    Partial Private Sub Onid_cuentaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_cuentaChanged()
    End Sub
    Partial Private Sub OnreferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnreferenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._conta_cuenta = CType(Nothing, EntityRef(Of conta_cuenta))
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._gasto = CType(Nothing, EntityRef(Of gasto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_pago", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_pago() As Integer
		Get
			Return Me._id_pago
		End Get
		Set
			If ((Me._id_pago = value)  _
						= false) Then
				Me.Onid_pagoChanging(value)
				Me.SendPropertyChanging
				Me._id_pago = value
				Me.SendPropertyChanged("id_pago")
				Me.Onid_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", DbType:="Int")>  _
	Public Property id_gasto() As System.Nullable(Of Integer)
		Get
			Return Me._id_gasto
		End Get
		Set
			If (Me._id_gasto.Equals(value) = false) Then
				If Me._gasto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_programacion_pago", DbType:="SmallDateTime")>  _
	Public Property fecha_programacion_pago() As System.Nullable(Of Date)
		Get
			Return Me._fecha_programacion_pago
		End Get
		Set
			If (Me._fecha_programacion_pago.Equals(value) = false) Then
				Me.Onfecha_programacion_pagoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_programacion_pago = value
				Me.SendPropertyChanged("fecha_programacion_pago")
				Me.Onfecha_programacion_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_pago", DbType:="SmallDateTime")>  _
	Public Property fecha_pago() As System.Nullable(Of Date)
		Get
			Return Me._fecha_pago
		End Get
		Set
			If (Me._fecha_pago.Equals(value) = false) Then
				Me.Onfecha_pagoChanging(value)
				Me.SendPropertyChanging
				Me._fecha_pago = value
				Me.SendPropertyChanged("fecha_pago")
				Me.Onfecha_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_proveedor", DbType:="Int")>  _
	Public Property id_proveedor() As System.Nullable(Of Integer)
		Get
			Return Me._id_proveedor
		End Get
		Set
			If (Me._id_proveedor.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_proveedorChanging(value)
				Me.SendPropertyChanging
				Me._id_proveedor = value
				Me.SendPropertyChanged("id_proveedor")
				Me.Onid_proveedorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cuenta", DbType:="Int")>  _
	Public Property id_cuenta() As System.Nullable(Of Integer)
		Get
			Return Me._id_cuenta
		End Get
		Set
			If (Me._id_cuenta.Equals(value) = false) Then
				If Me._conta_cuenta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_cuentaChanging(value)
				Me.SendPropertyChanging
				Me._id_cuenta = value
				Me.SendPropertyChanged("id_cuenta")
				Me.Onid_cuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencia", DbType:="NVarChar(50)")>  _
	Public Property referencia() As String
		Get
			Return Me._referencia
		End Get
		Set
			If (String.Equals(Me._referencia, value) = false) Then
				Me.OnreferenciaChanging(value)
				Me.SendPropertyChanging
				Me._referencia = value
				Me.SendPropertyChanged("referencia")
				Me.OnreferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="conta_cuenta_proveedores_pago", Storage:="_conta_cuenta", ThisKey:="id_cuenta", OtherKey:="id_cuenta", IsForeignKey:=true)>  _
	Public Property conta_cuenta() As conta_cuenta
		Get
			Return Me._conta_cuenta.Entity
		End Get
		Set
			Dim previousValue As conta_cuenta = Me._conta_cuenta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._conta_cuenta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._conta_cuenta.Entity = Nothing
					previousValue.proveedores_pagos.Remove(Me)
				End If
				Me._conta_cuenta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.proveedores_pagos.Add(Me)
					Me._id_cuenta = value.id_cuenta
				Else
					Me._id_cuenta = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("conta_cuenta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_proveedores_pago", Storage:="_empresa", ThisKey:="id_proveedor", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.proveedores_pagos.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.proveedores_pagos.Add(Me)
					Me._id_proveedor = value.id_empresa
				Else
					Me._id_proveedor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_proveedores_pago", Storage:="_gasto", ThisKey:="id_gasto", OtherKey:="id_gasto", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property gasto() As gasto
		Get
			Return Me._gasto.Entity
		End Get
		Set
			Dim previousValue As gasto = Me._gasto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gasto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gasto.Entity = Nothing
					previousValue.proveedores_pagos.Remove(Me)
				End If
				Me._gasto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.proveedores_pagos.Add(Me)
					Me._id_gasto = value.id_gasto
				Else
					Me._id_gasto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gasto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="gastos")>  _
Partial Public Class gasto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cantidad As System.Nullable(Of Double)
	
	Private _id_forma_pago As System.Nullable(Of Integer)
	
	Private _id_moneda As System.Nullable(Of Integer)
	
	Private _descripcion As String
	
	Private _id_concepto As System.Nullable(Of Integer)
	
	Private _iva As System.Nullable(Of Double)
	
	Private _id_gasto As Integer
	
	Private _id_lote As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _total As System.Nullable(Of Double)
	
	Private _pendiente As System.Nullable(Of Decimal)
	
	Private _comprobantes_fiscales As EntitySet(Of comprobantes_fiscale)
	
	Private _recargas_externas As EntitySet(Of recargas_externa)
	
	Private _liquidaciones As EntitySet(Of liquidacione)
	
	Private _gastos_reparacions As EntitySet(Of gastos_reparacion)
	
	Private _proveedores_pagos As EntitySet(Of proveedores_pago)
	
	Private _formas_pago As EntityRef(Of formas_pago)
	
	Private _lote_aprobacion As EntityRef(Of lote_aprobacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncantidadChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OncantidadChanged()
    End Sub
    Partial Private Sub Onid_forma_pagoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_forma_pagoChanged()
    End Sub
    Partial Private Sub Onid_monedaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_monedaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    Partial Private Sub Onid_conceptoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_conceptoChanged()
    End Sub
    Partial Private Sub OnivaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnivaChanged()
    End Sub
    Partial Private Sub Onid_gastoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_gastoChanged()
    End Sub
    Partial Private Sub Onid_loteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_loteChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    Partial Private Sub OnpendienteChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpendienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._comprobantes_fiscales = New EntitySet(Of comprobantes_fiscale)(AddressOf Me.attach_comprobantes_fiscales, AddressOf Me.detach_comprobantes_fiscales)
		Me._recargas_externas = New EntitySet(Of recargas_externa)(AddressOf Me.attach_recargas_externas, AddressOf Me.detach_recargas_externas)
		Me._liquidaciones = New EntitySet(Of liquidacione)(AddressOf Me.attach_liquidaciones, AddressOf Me.detach_liquidaciones)
		Me._gastos_reparacions = New EntitySet(Of gastos_reparacion)(AddressOf Me.attach_gastos_reparacions, AddressOf Me.detach_gastos_reparacions)
		Me._proveedores_pagos = New EntitySet(Of proveedores_pago)(AddressOf Me.attach_proveedores_pagos, AddressOf Me.detach_proveedores_pagos)
		Me._formas_pago = CType(Nothing, EntityRef(Of formas_pago))
		Me._lote_aprobacion = CType(Nothing, EntityRef(Of lote_aprobacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cantidad", DbType:="Float")>  _
	Public Property cantidad() As System.Nullable(Of Double)
		Get
			Return Me._cantidad
		End Get
		Set
			If (Me._cantidad.Equals(value) = false) Then
				Me.OncantidadChanging(value)
				Me.SendPropertyChanging
				Me._cantidad = value
				Me.SendPropertyChanged("cantidad")
				Me.OncantidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_forma_pago", DbType:="Int")>  _
	Public Property id_forma_pago() As System.Nullable(Of Integer)
		Get
			Return Me._id_forma_pago
		End Get
		Set
			If (Me._id_forma_pago.Equals(value) = false) Then
				If Me._formas_pago.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_forma_pagoChanging(value)
				Me.SendPropertyChanging
				Me._id_forma_pago = value
				Me.SendPropertyChanged("id_forma_pago")
				Me.Onid_forma_pagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_moneda", DbType:="Int")>  _
	Public Property id_moneda() As System.Nullable(Of Integer)
		Get
			Return Me._id_moneda
		End Get
		Set
			If (Me._id_moneda.Equals(value) = false) Then
				Me.Onid_monedaChanging(value)
				Me.SendPropertyChanging
				Me._id_moneda = value
				Me.SendPropertyChanged("id_moneda")
				Me.Onid_monedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="NVarChar(MAX)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_concepto", DbType:="Int")>  _
	Public Property id_concepto() As System.Nullable(Of Integer)
		Get
			Return Me._id_concepto
		End Get
		Set
			If (Me._id_concepto.Equals(value) = false) Then
				Me.Onid_conceptoChanging(value)
				Me.SendPropertyChanging
				Me._id_concepto = value
				Me.SendPropertyChanged("id_concepto")
				Me.Onid_conceptoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iva", DbType:="Float")>  _
	Public Property iva() As System.Nullable(Of Double)
		Get
			Return Me._iva
		End Get
		Set
			If (Me._iva.Equals(value) = false) Then
				Me.OnivaChanging(value)
				Me.SendPropertyChanging
				Me._iva = value
				Me.SendPropertyChanged("iva")
				Me.OnivaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_gasto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_gasto() As Integer
		Get
			Return Me._id_gasto
		End Get
		Set
			If ((Me._id_gasto = value)  _
						= false) Then
				Me.Onid_gastoChanging(value)
				Me.SendPropertyChanging
				Me._id_gasto = value
				Me.SendPropertyChanged("id_gasto")
				Me.Onid_gastoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lote", DbType:="Int")>  _
	Public Property id_lote() As System.Nullable(Of Integer)
		Get
			Return Me._id_lote
		End Get
		Set
			If (Me._id_lote.Equals(value) = false) Then
				If Me._lote_aprobacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_loteChanging(value)
				Me.SendPropertyChanging
				Me._id_lote = value
				Me.SendPropertyChanged("id_lote")
				Me.Onid_loteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Float")>  _
	Public Property total() As System.Nullable(Of Double)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pendiente", DbType:="Money")>  _
	Public Property pendiente() As System.Nullable(Of Decimal)
		Get
			Return Me._pendiente
		End Get
		Set
			If (Me._pendiente.Equals(value) = false) Then
				Me.OnpendienteChanging(value)
				Me.SendPropertyChanging
				Me._pendiente = value
				Me.SendPropertyChanged("pendiente")
				Me.OnpendienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_comprobantes_fiscale", Storage:="_comprobantes_fiscales", ThisKey:="id_gasto", OtherKey:="id_gasto")>  _
	Public Property comprobantes_fiscales() As EntitySet(Of comprobantes_fiscale)
		Get
			Return Me._comprobantes_fiscales
		End Get
		Set
			Me._comprobantes_fiscales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_recargas_externa", Storage:="_recargas_externas", ThisKey:="id_gasto", OtherKey:="id_gasto")>  _
	Public Property recargas_externas() As EntitySet(Of recargas_externa)
		Get
			Return Me._recargas_externas
		End Get
		Set
			Me._recargas_externas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_liquidacione", Storage:="_liquidaciones", ThisKey:="id_gasto", OtherKey:="id_gasto")>  _
	Public Property liquidaciones() As EntitySet(Of liquidacione)
		Get
			Return Me._liquidaciones
		End Get
		Set
			Me._liquidaciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_gastos_reparacion", Storage:="_gastos_reparacions", ThisKey:="id_gasto", OtherKey:="id_gasto")>  _
	Public Property gastos_reparacions() As EntitySet(Of gastos_reparacion)
		Get
			Return Me._gastos_reparacions
		End Get
		Set
			Me._gastos_reparacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="gasto_proveedores_pago", Storage:="_proveedores_pagos", ThisKey:="id_gasto", OtherKey:="id_gasto")>  _
	Public Property proveedores_pagos() As EntitySet(Of proveedores_pago)
		Get
			Return Me._proveedores_pagos
		End Get
		Set
			Me._proveedores_pagos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="formas_pago_gasto", Storage:="_formas_pago", ThisKey:="id_forma_pago", OtherKey:="id_forma_pago", IsForeignKey:=true)>  _
	Public Property formas_pago() As formas_pago
		Get
			Return Me._formas_pago.Entity
		End Get
		Set
			Dim previousValue As formas_pago = Me._formas_pago.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._formas_pago.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._formas_pago.Entity = Nothing
					previousValue.gastos.Remove(Me)
				End If
				Me._formas_pago.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.gastos.Add(Me)
					Me._id_forma_pago = value.id_forma_pago
				Else
					Me._id_forma_pago = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("formas_pago")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lote_aprobacion_gasto", Storage:="_lote_aprobacion", ThisKey:="id_lote", OtherKey:="id_lote", IsForeignKey:=true)>  _
	Public Property lote_aprobacion() As lote_aprobacion
		Get
			Return Me._lote_aprobacion.Entity
		End Get
		Set
			Dim previousValue As lote_aprobacion = Me._lote_aprobacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._lote_aprobacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._lote_aprobacion.Entity = Nothing
					previousValue.gastos.Remove(Me)
				End If
				Me._lote_aprobacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.gastos.Add(Me)
					Me._id_lote = value.id_lote
				Else
					Me._id_lote = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("lote_aprobacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_comprobantes_fiscales(ByVal entity As comprobantes_fiscale)
		Me.SendPropertyChanging
		entity.gasto = Me
	End Sub
	
	Private Sub detach_comprobantes_fiscales(ByVal entity As comprobantes_fiscale)
		Me.SendPropertyChanging
		entity.gasto = Nothing
	End Sub
	
	Private Sub attach_recargas_externas(ByVal entity As recargas_externa)
		Me.SendPropertyChanging
		entity.gasto = Me
	End Sub
	
	Private Sub detach_recargas_externas(ByVal entity As recargas_externa)
		Me.SendPropertyChanging
		entity.gasto = Nothing
	End Sub
	
	Private Sub attach_liquidaciones(ByVal entity As liquidacione)
		Me.SendPropertyChanging
		entity.gasto = Me
	End Sub
	
	Private Sub detach_liquidaciones(ByVal entity As liquidacione)
		Me.SendPropertyChanging
		entity.gasto = Nothing
	End Sub
	
	Private Sub attach_gastos_reparacions(ByVal entity As gastos_reparacion)
		Me.SendPropertyChanging
		entity.gasto = Me
	End Sub
	
	Private Sub detach_gastos_reparacions(ByVal entity As gastos_reparacion)
		Me.SendPropertyChanging
		entity.gasto = Nothing
	End Sub
	
	Private Sub attach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.gasto = Me
	End Sub
	
	Private Sub detach_proveedores_pagos(ByVal entity As proveedores_pago)
		Me.SendPropertyChanging
		entity.gasto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="reportes_fallas")>  _
Partial Public Class reportes_falla
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ReporteId As Integer
	
	Private _falla As String
	
	Private _salida As System.Nullable(Of Boolean)
	
	Private _idEquipo As System.Nullable(Of Integer)
	
	Private _idOrden As System.Nullable(Of Integer)
	
	Private _idChofer As System.Nullable(Of Integer)
	
	Private _idEstatus As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _reparacione1s As EntitySet(Of reparacione1)
	
	Private _reparaciones As EntitySet(Of reparacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnReporteIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnReporteIdChanged()
    End Sub
    Partial Private Sub OnfallaChanging(value As String)
    End Sub
    Partial Private Sub OnfallaChanged()
    End Sub
    Partial Private Sub OnsalidaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnsalidaChanged()
    End Sub
    Partial Private Sub OnidEquipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoChanged()
    End Sub
    Partial Private Sub OnidOrdenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidOrdenChanged()
    End Sub
    Partial Private Sub OnidChoferChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidChoferChanged()
    End Sub
    Partial Private Sub OnidEstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEstatusChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._reparacione1s = New EntitySet(Of reparacione1)(AddressOf Me.attach_reparacione1s, AddressOf Me.detach_reparacione1s)
		Me._reparaciones = New EntitySet(Of reparacione)(AddressOf Me.attach_reparaciones, AddressOf Me.detach_reparaciones)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReporteId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ReporteId() As Integer
		Get
			Return Me._ReporteId
		End Get
		Set
			If ((Me._ReporteId = value)  _
						= false) Then
				Me.OnReporteIdChanging(value)
				Me.SendPropertyChanging
				Me._ReporteId = value
				Me.SendPropertyChanged("ReporteId")
				Me.OnReporteIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_falla", DbType:="NVarChar(500)")>  _
	Public Property falla() As String
		Get
			Return Me._falla
		End Get
		Set
			If (String.Equals(Me._falla, value) = false) Then
				Me.OnfallaChanging(value)
				Me.SendPropertyChanging
				Me._falla = value
				Me.SendPropertyChanged("falla")
				Me.OnfallaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salida", DbType:="Bit")>  _
	Public Property salida() As System.Nullable(Of Boolean)
		Get
			Return Me._salida
		End Get
		Set
			If (Me._salida.Equals(value) = false) Then
				Me.OnsalidaChanging(value)
				Me.SendPropertyChanging
				Me._salida = value
				Me.SendPropertyChanged("salida")
				Me.OnsalidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipo", DbType:="Int")>  _
	Public Property idEquipo() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipo
		End Get
		Set
			If (Me._idEquipo.Equals(value) = false) Then
				Me.OnidEquipoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipo = value
				Me.SendPropertyChanged("idEquipo")
				Me.OnidEquipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idOrden", DbType:="Int")>  _
	Public Property idOrden() As System.Nullable(Of Integer)
		Get
			Return Me._idOrden
		End Get
		Set
			If (Me._idOrden.Equals(value) = false) Then
				Me.OnidOrdenChanging(value)
				Me.SendPropertyChanging
				Me._idOrden = value
				Me.SendPropertyChanged("idOrden")
				Me.OnidOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idChofer", DbType:="Int")>  _
	Public Property idChofer() As System.Nullable(Of Integer)
		Get
			Return Me._idChofer
		End Get
		Set
			If (Me._idChofer.Equals(value) = false) Then
				Me.OnidChoferChanging(value)
				Me.SendPropertyChanging
				Me._idChofer = value
				Me.SendPropertyChanged("idChofer")
				Me.OnidChoferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstatus", DbType:="Int")>  _
	Public Property idEstatus() As System.Nullable(Of Integer)
		Get
			Return Me._idEstatus
		End Get
		Set
			If (Me._idEstatus.Equals(value) = false) Then
				Me.OnidEstatusChanging(value)
				Me.SendPropertyChanging
				Me._idEstatus = value
				Me.SendPropertyChanged("idEstatus")
				Me.OnidEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reportes_falla_reparacione1", Storage:="_reparacione1s", ThisKey:="ReporteId", OtherKey:="idReporte")>  _
	Public Property reparacione1s() As EntitySet(Of reparacione1)
		Get
			Return Me._reparacione1s
		End Get
		Set
			Me._reparacione1s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="reportes_falla_reparacione", Storage:="_reparaciones", ThisKey:="ReporteId", OtherKey:="idReporte")>  _
	Public Property reparaciones() As EntitySet(Of reparacione)
		Get
			Return Me._reparaciones
		End Get
		Set
			Me._reparaciones.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_reparacione1s(ByVal entity As reparacione1)
		Me.SendPropertyChanging
		entity.reportes_falla = Me
	End Sub
	
	Private Sub detach_reparacione1s(ByVal entity As reparacione1)
		Me.SendPropertyChanging
		entity.reportes_falla = Nothing
	End Sub
	
	Private Sub attach_reparaciones(ByVal entity As reparacione)
		Me.SendPropertyChanging
		entity.reportes_falla = Me
	End Sub
	
	Private Sub detach_reparaciones(ByVal entity As reparacione)
		Me.SendPropertyChanging
		entity.reportes_falla = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class datos_facturacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_dato As Integer
	
	Private _razon_social As String
	
	Private _direccion As String
	
	Private _calle As String
	
	Private _noExterior As String
	
	Private _colonia As String
	
	Private _municipio As String
	
	Private _estado As String
	
	Private _c_postal As String
	
	Private _telefono As String
	
	Private _rfc As String
	
	Private _id_empresa As System.Nullable(Of Integer)
	
	Private _tipo_cambio As System.Nullable(Of Double)
	
	Private _retencion As System.Nullable(Of Boolean)
	
	Private _pais As String
	
	Private _idEstatus As System.Nullable(Of Integer)
	
	Private _diasCredito As System.Nullable(Of Integer)
	
	Private _ContactosCFDIs As EntitySet(Of ContactosCFDI)
	
	Private _facturas As EntitySet(Of factura)
	
	Private _empresa As EntityRef(Of empresa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_datoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_datoChanged()
    End Sub
    Partial Private Sub Onrazon_socialChanging(value As String)
    End Sub
    Partial Private Sub Onrazon_socialChanged()
    End Sub
    Partial Private Sub OndireccionChanging(value As String)
    End Sub
    Partial Private Sub OndireccionChanged()
    End Sub
    Partial Private Sub OncalleChanging(value As String)
    End Sub
    Partial Private Sub OncalleChanged()
    End Sub
    Partial Private Sub OnnoExteriorChanging(value As String)
    End Sub
    Partial Private Sub OnnoExteriorChanged()
    End Sub
    Partial Private Sub OncoloniaChanging(value As String)
    End Sub
    Partial Private Sub OncoloniaChanged()
    End Sub
    Partial Private Sub OnmunicipioChanging(value As String)
    End Sub
    Partial Private Sub OnmunicipioChanged()
    End Sub
    Partial Private Sub OnestadoChanging(value As String)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub Onc_postalChanging(value As String)
    End Sub
    Partial Private Sub Onc_postalChanged()
    End Sub
    Partial Private Sub OntelefonoChanging(value As String)
    End Sub
    Partial Private Sub OntelefonoChanged()
    End Sub
    Partial Private Sub OnrfcChanging(value As String)
    End Sub
    Partial Private Sub OnrfcChanged()
    End Sub
    Partial Private Sub Onid_empresaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_empresaChanged()
    End Sub
    Partial Private Sub Ontipo_cambioChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Ontipo_cambioChanged()
    End Sub
    Partial Private Sub OnretencionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnretencionChanged()
    End Sub
    Partial Private Sub OnpaisChanging(value As String)
    End Sub
    Partial Private Sub OnpaisChanged()
    End Sub
    Partial Private Sub OnidEstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEstatusChanged()
    End Sub
    Partial Private Sub OndiasCreditoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndiasCreditoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContactosCFDIs = New EntitySet(Of ContactosCFDI)(AddressOf Me.attach_ContactosCFDIs, AddressOf Me.detach_ContactosCFDIs)
		Me._facturas = New EntitySet(Of factura)(AddressOf Me.attach_facturas, AddressOf Me.detach_facturas)
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_dato", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_dato() As Integer
		Get
			Return Me._id_dato
		End Get
		Set
			If ((Me._id_dato = value)  _
						= false) Then
				Me.Onid_datoChanging(value)
				Me.SendPropertyChanging
				Me._id_dato = value
				Me.SendPropertyChanged("id_dato")
				Me.Onid_datoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_razon_social", DbType:="NVarChar(250)")>  _
	Public Property razon_social() As String
		Get
			Return Me._razon_social
		End Get
		Set
			If (String.Equals(Me._razon_social, value) = false) Then
				Me.Onrazon_socialChanging(value)
				Me.SendPropertyChanging
				Me._razon_social = value
				Me.SendPropertyChanged("razon_social")
				Me.Onrazon_socialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion", DbType:="NVarChar(250)")>  _
	Public Property direccion() As String
		Get
			Return Me._direccion
		End Get
		Set
			If (String.Equals(Me._direccion, value) = false) Then
				Me.OndireccionChanging(value)
				Me.SendPropertyChanging
				Me._direccion = value
				Me.SendPropertyChanged("direccion")
				Me.OndireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_calle", DbType:="NVarChar(250)")>  _
	Public Property calle() As String
		Get
			Return Me._calle
		End Get
		Set
			If (String.Equals(Me._calle, value) = false) Then
				Me.OncalleChanging(value)
				Me.SendPropertyChanging
				Me._calle = value
				Me.SendPropertyChanged("calle")
				Me.OncalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_noExterior", DbType:="NVarChar(50)")>  _
	Public Property noExterior() As String
		Get
			Return Me._noExterior
		End Get
		Set
			If (String.Equals(Me._noExterior, value) = false) Then
				Me.OnnoExteriorChanging(value)
				Me.SendPropertyChanging
				Me._noExterior = value
				Me.SendPropertyChanged("noExterior")
				Me.OnnoExteriorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_colonia", DbType:="NVarChar(250)")>  _
	Public Property colonia() As String
		Get
			Return Me._colonia
		End Get
		Set
			If (String.Equals(Me._colonia, value) = false) Then
				Me.OncoloniaChanging(value)
				Me.SendPropertyChanging
				Me._colonia = value
				Me.SendPropertyChanged("colonia")
				Me.OncoloniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_municipio", DbType:="NVarChar(250)")>  _
	Public Property municipio() As String
		Get
			Return Me._municipio
		End Get
		Set
			If (String.Equals(Me._municipio, value) = false) Then
				Me.OnmunicipioChanging(value)
				Me.SendPropertyChanging
				Me._municipio = value
				Me.SendPropertyChanged("municipio")
				Me.OnmunicipioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="NVarChar(250)")>  _
	Public Property estado() As String
		Get
			Return Me._estado
		End Get
		Set
			If (String.Equals(Me._estado, value) = false) Then
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_c_postal", DbType:="NVarChar(5)")>  _
	Public Property c_postal() As String
		Get
			Return Me._c_postal
		End Get
		Set
			If (String.Equals(Me._c_postal, value) = false) Then
				Me.Onc_postalChanging(value)
				Me.SendPropertyChanging
				Me._c_postal = value
				Me.SendPropertyChanged("c_postal")
				Me.Onc_postalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono", DbType:="NVarChar(15)")>  _
	Public Property telefono() As String
		Get
			Return Me._telefono
		End Get
		Set
			If (String.Equals(Me._telefono, value) = false) Then
				Me.OntelefonoChanging(value)
				Me.SendPropertyChanging
				Me._telefono = value
				Me.SendPropertyChanged("telefono")
				Me.OntelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rfc", DbType:="NVarChar(15)")>  _
	Public Property rfc() As String
		Get
			Return Me._rfc
		End Get
		Set
			If (String.Equals(Me._rfc, value) = false) Then
				Me.OnrfcChanging(value)
				Me.SendPropertyChanging
				Me._rfc = value
				Me.SendPropertyChanged("rfc")
				Me.OnrfcChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_empresa", DbType:="Int")>  _
	Public Property id_empresa() As System.Nullable(Of Integer)
		Get
			Return Me._id_empresa
		End Get
		Set
			If (Me._id_empresa.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_empresaChanging(value)
				Me.SendPropertyChanging
				Me._id_empresa = value
				Me.SendPropertyChanged("id_empresa")
				Me.Onid_empresaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cambio", DbType:="Float")>  _
	Public Property tipo_cambio() As System.Nullable(Of Double)
		Get
			Return Me._tipo_cambio
		End Get
		Set
			If (Me._tipo_cambio.Equals(value) = false) Then
				Me.Ontipo_cambioChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cambio = value
				Me.SendPropertyChanged("tipo_cambio")
				Me.Ontipo_cambioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retencion", DbType:="Bit")>  _
	Public Property retencion() As System.Nullable(Of Boolean)
		Get
			Return Me._retencion
		End Get
		Set
			If (Me._retencion.Equals(value) = false) Then
				Me.OnretencionChanging(value)
				Me.SendPropertyChanging
				Me._retencion = value
				Me.SendPropertyChanged("retencion")
				Me.OnretencionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pais", DbType:="NVarChar(50)")>  _
	Public Property pais() As String
		Get
			Return Me._pais
		End Get
		Set
			If (String.Equals(Me._pais, value) = false) Then
				Me.OnpaisChanging(value)
				Me.SendPropertyChanging
				Me._pais = value
				Me.SendPropertyChanged("pais")
				Me.OnpaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstatus", DbType:="Int")>  _
	Public Property idEstatus() As System.Nullable(Of Integer)
		Get
			Return Me._idEstatus
		End Get
		Set
			If (Me._idEstatus.Equals(value) = false) Then
				Me.OnidEstatusChanging(value)
				Me.SendPropertyChanging
				Me._idEstatus = value
				Me.SendPropertyChanged("idEstatus")
				Me.OnidEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diasCredito", DbType:="Int")>  _
	Public Property diasCredito() As System.Nullable(Of Integer)
		Get
			Return Me._diasCredito
		End Get
		Set
			If (Me._diasCredito.Equals(value) = false) Then
				Me.OndiasCreditoChanging(value)
				Me.SendPropertyChanging
				Me._diasCredito = value
				Me.SendPropertyChanged("diasCredito")
				Me.OndiasCreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="datos_facturacion_ContactosCFDI", Storage:="_ContactosCFDIs", ThisKey:="id_dato", OtherKey:="idDatoFacturacion")>  _
	Public Property ContactosCFDIs() As EntitySet(Of ContactosCFDI)
		Get
			Return Me._ContactosCFDIs
		End Get
		Set
			Me._ContactosCFDIs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="datos_facturacion_factura", Storage:="_facturas", ThisKey:="id_dato", OtherKey:="id_dato_facturacion")>  _
	Public Property facturas() As EntitySet(Of factura)
		Get
			Return Me._facturas
		End Get
		Set
			Me._facturas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_datos_facturacion", Storage:="_empresa", ThisKey:="id_empresa", OtherKey:="id_empresa", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.datos_facturacions.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.datos_facturacions.Add(Me)
					Me._id_empresa = value.id_empresa
				Else
					Me._id_empresa = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContactosCFDIs(ByVal entity As ContactosCFDI)
		Me.SendPropertyChanging
		entity.datos_facturacion = Me
	End Sub
	
	Private Sub detach_ContactosCFDIs(ByVal entity As ContactosCFDI)
		Me.SendPropertyChanging
		entity.datos_facturacion = Nothing
	End Sub
	
	Private Sub attach_facturas(ByVal entity As factura)
		Me.SendPropertyChanging
		entity.datos_facturacion = Me
	End Sub
	
	Private Sub detach_facturas(ByVal entity As factura)
		Me.SendPropertyChanging
		entity.datos_facturacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class cfdi
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _folioFiscal As String
	
	Private _serie As String
	
	Private _idFactura As System.Nullable(Of Integer)
	
	Private _enviadoA As String
	
	Private _cfdiPendienteCancelars As EntitySet(Of cfdiPendienteCancelar)
	
	Private _factura As EntityRef(Of factura)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnfolioFiscalChanging(value As String)
    End Sub
    Partial Private Sub OnfolioFiscalChanged()
    End Sub
    Partial Private Sub OnserieChanging(value As String)
    End Sub
    Partial Private Sub OnserieChanged()
    End Sub
    Partial Private Sub OnidFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFacturaChanged()
    End Sub
    Partial Private Sub OnenviadoAChanging(value As String)
    End Sub
    Partial Private Sub OnenviadoAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cfdiPendienteCancelars = New EntitySet(Of cfdiPendienteCancelar)(AddressOf Me.attach_cfdiPendienteCancelars, AddressOf Me.detach_cfdiPendienteCancelars)
		Me._factura = CType(Nothing, EntityRef(Of factura))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folioFiscal", DbType:="NVarChar(40)")>  _
	Public Property folioFiscal() As String
		Get
			Return Me._folioFiscal
		End Get
		Set
			If (String.Equals(Me._folioFiscal, value) = false) Then
				Me.OnfolioFiscalChanging(value)
				Me.SendPropertyChanging
				Me._folioFiscal = value
				Me.SendPropertyChanged("folioFiscal")
				Me.OnfolioFiscalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serie", DbType:="NVarChar(4)")>  _
	Public Property serie() As String
		Get
			Return Me._serie
		End Get
		Set
			If (String.Equals(Me._serie, value) = false) Then
				Me.OnserieChanging(value)
				Me.SendPropertyChanging
				Me._serie = value
				Me.SendPropertyChanged("serie")
				Me.OnserieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFactura", DbType:="Int")>  _
	Public Property idFactura() As System.Nullable(Of Integer)
		Get
			Return Me._idFactura
		End Get
		Set
			If (Me._idFactura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFacturaChanging(value)
				Me.SendPropertyChanging
				Me._idFactura = value
				Me.SendPropertyChanged("idFactura")
				Me.OnidFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enviadoA", DbType:="NVarChar(250)")>  _
	Public Property enviadoA() As String
		Get
			Return Me._enviadoA
		End Get
		Set
			If (String.Equals(Me._enviadoA, value) = false) Then
				Me.OnenviadoAChanging(value)
				Me.SendPropertyChanging
				Me._enviadoA = value
				Me.SendPropertyChanged("enviadoA")
				Me.OnenviadoAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cfdi_cfdiPendienteCancelar", Storage:="_cfdiPendienteCancelars", ThisKey:="id", OtherKey:="idCfdi")>  _
	Public Property cfdiPendienteCancelars() As EntitySet(Of cfdiPendienteCancelar)
		Get
			Return Me._cfdiPendienteCancelars
		End Get
		Set
			Me._cfdiPendienteCancelars.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_cfdi", Storage:="_factura", ThisKey:="idFactura", OtherKey:="id_factura", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.cfdis.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cfdis.Add(Me)
					Me._idFactura = value.id_factura
				Else
					Me._idFactura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cfdiPendienteCancelars(ByVal entity As cfdiPendienteCancelar)
		Me.SendPropertyChanging
		entity.cfdi = Me
	End Sub
	
	Private Sub detach_cfdiPendienteCancelars(ByVal entity As cfdiPendienteCancelar)
		Me.SendPropertyChanging
		entity.cfdi = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="trayectos_asignados")>  _
Partial Public Class trayectos_asignado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_trayecto_asignado As Integer
	
	Private _id_trayecto As System.Nullable(Of Integer)
	
	Private _EquipoAsignadoId As System.Nullable(Of Integer)
	
	Private _idEstatus As System.Nullable(Of Integer)
	
	Private _inicio As System.Nullable(Of Date)
	
	Private _fin As System.Nullable(Of Date)
	
	Private _llave_trayecto As EntityRef(Of llave_trayecto)
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_trayecto_asignadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_trayecto_asignadoChanged()
    End Sub
    Partial Private Sub Onid_trayectoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_trayectoChanged()
    End Sub
    Partial Private Sub OnEquipoAsignadoIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEquipoAsignadoIdChanged()
    End Sub
    Partial Private Sub OnidEstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEstatusChanged()
    End Sub
    Partial Private Sub OninicioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OninicioChanged()
    End Sub
    Partial Private Sub OnfinChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfinChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._llave_trayecto = CType(Nothing, EntityRef(Of llave_trayecto))
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto_asignado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_trayecto_asignado() As Integer
		Get
			Return Me._id_trayecto_asignado
		End Get
		Set
			If ((Me._id_trayecto_asignado = value)  _
						= false) Then
				Me.Onid_trayecto_asignadoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto_asignado = value
				Me.SendPropertyChanged("id_trayecto_asignado")
				Me.Onid_trayecto_asignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_trayecto", DbType:="Int")>  _
	Public Property id_trayecto() As System.Nullable(Of Integer)
		Get
			Return Me._id_trayecto
		End Get
		Set
			If (Me._id_trayecto.Equals(value) = false) Then
				If Me._llave_trayecto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_trayectoChanging(value)
				Me.SendPropertyChanging
				Me._id_trayecto = value
				Me.SendPropertyChanged("id_trayecto")
				Me.Onid_trayectoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EquipoAsignadoId", DbType:="Int")>  _
	Public Property EquipoAsignadoId() As System.Nullable(Of Integer)
		Get
			Return Me._EquipoAsignadoId
		End Get
		Set
			If (Me._EquipoAsignadoId.Equals(value) = false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEquipoAsignadoIdChanging(value)
				Me.SendPropertyChanging
				Me._EquipoAsignadoId = value
				Me.SendPropertyChanged("EquipoAsignadoId")
				Me.OnEquipoAsignadoIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstatus", DbType:="Int")>  _
	Public Property idEstatus() As System.Nullable(Of Integer)
		Get
			Return Me._idEstatus
		End Get
		Set
			If (Me._idEstatus.Equals(value) = false) Then
				Me.OnidEstatusChanging(value)
				Me.SendPropertyChanging
				Me._idEstatus = value
				Me.SendPropertyChanged("idEstatus")
				Me.OnidEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inicio", DbType:="SmallDateTime")>  _
	Public Property inicio() As System.Nullable(Of Date)
		Get
			Return Me._inicio
		End Get
		Set
			If (Me._inicio.Equals(value) = false) Then
				Me.OninicioChanging(value)
				Me.SendPropertyChanging
				Me._inicio = value
				Me.SendPropertyChanged("inicio")
				Me.OninicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fin", DbType:="SmallDateTime")>  _
	Public Property fin() As System.Nullable(Of Date)
		Get
			Return Me._fin
		End Get
		Set
			If (Me._fin.Equals(value) = false) Then
				Me.OnfinChanging(value)
				Me.SendPropertyChanging
				Me._fin = value
				Me.SendPropertyChanged("fin")
				Me.OnfinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="llave_trayecto_trayectos_asignado", Storage:="_llave_trayecto", ThisKey:="id_trayecto", OtherKey:="id_trayecto", IsForeignKey:=true)>  _
	Public Property llave_trayecto() As llave_trayecto
		Get
			Return Me._llave_trayecto.Entity
		End Get
		Set
			Dim previousValue As llave_trayecto = Me._llave_trayecto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._llave_trayecto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._llave_trayecto.Entity = Nothing
					previousValue.trayectos_asignados.Remove(Me)
				End If
				Me._llave_trayecto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayectos_asignados.Add(Me)
					Me._id_trayecto = value.id_trayecto
				Else
					Me._id_trayecto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("llave_trayecto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_trayectos_asignado", Storage:="_equipo_asignado", ThisKey:="EquipoAsignadoId", OtherKey:="id_equipo_asignado", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.trayectos_asignados.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.trayectos_asignados.Add(Me)
					Me._EquipoAsignadoId = value.id_equipo_asignado
				Else
					Me._EquipoAsignadoId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class configuracion_cotizador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_configuracion As Integer
	
	Private _precio_diesel As System.Nullable(Of Double)
	
	Private _costo_kilometro As System.Nullable(Of Double)
	
	Private _porcentaje_chofer As System.Nullable(Of Integer)
	
	Private _rendimiento_tracto As System.Nullable(Of Double)
	
	Private _rendimiento_rabon As System.Nullable(Of Double)
	
	Private _rendimiento_pickup As System.Nullable(Of Double)
	
	Private _manejo_rabon As System.Nullable(Of Double)
	
	Private _manejo_pickup As System.Nullable(Of Double)
	
	Private _factor_retorno As System.Nullable(Of Double)
	
	Private _meses_vigencia As System.Nullable(Of Integer)
	
	Private _rendimiento_Plataforma As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_configuracionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_configuracionChanged()
    End Sub
    Partial Private Sub Onprecio_dieselChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onprecio_dieselChanged()
    End Sub
    Partial Private Sub Oncosto_kilometroChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Oncosto_kilometroChanged()
    End Sub
    Partial Private Sub Onporcentaje_choferChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onporcentaje_choferChanged()
    End Sub
    Partial Private Sub Onrendimiento_tractoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onrendimiento_tractoChanged()
    End Sub
    Partial Private Sub Onrendimiento_rabonChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onrendimiento_rabonChanged()
    End Sub
    Partial Private Sub Onrendimiento_pickupChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onrendimiento_pickupChanged()
    End Sub
    Partial Private Sub Onmanejo_rabonChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onmanejo_rabonChanged()
    End Sub
    Partial Private Sub Onmanejo_pickupChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onmanejo_pickupChanged()
    End Sub
    Partial Private Sub Onfactor_retornoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onfactor_retornoChanged()
    End Sub
    Partial Private Sub Onmeses_vigenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onmeses_vigenciaChanged()
    End Sub
    Partial Private Sub Onrendimiento_PlataformaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub Onrendimiento_PlataformaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_configuracion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_configuracion() As Integer
		Get
			Return Me._id_configuracion
		End Get
		Set
			If ((Me._id_configuracion = value)  _
						= false) Then
				Me.Onid_configuracionChanging(value)
				Me.SendPropertyChanging
				Me._id_configuracion = value
				Me.SendPropertyChanged("id_configuracion")
				Me.Onid_configuracionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precio_diesel", DbType:="Float")>  _
	Public Property precio_diesel() As System.Nullable(Of Double)
		Get
			Return Me._precio_diesel
		End Get
		Set
			If (Me._precio_diesel.Equals(value) = false) Then
				Me.Onprecio_dieselChanging(value)
				Me.SendPropertyChanging
				Me._precio_diesel = value
				Me.SendPropertyChanged("precio_diesel")
				Me.Onprecio_dieselChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_costo_kilometro", DbType:="Float")>  _
	Public Property costo_kilometro() As System.Nullable(Of Double)
		Get
			Return Me._costo_kilometro
		End Get
		Set
			If (Me._costo_kilometro.Equals(value) = false) Then
				Me.Oncosto_kilometroChanging(value)
				Me.SendPropertyChanging
				Me._costo_kilometro = value
				Me.SendPropertyChanged("costo_kilometro")
				Me.Oncosto_kilometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_porcentaje_chofer", DbType:="Int")>  _
	Public Property porcentaje_chofer() As System.Nullable(Of Integer)
		Get
			Return Me._porcentaje_chofer
		End Get
		Set
			If (Me._porcentaje_chofer.Equals(value) = false) Then
				Me.Onporcentaje_choferChanging(value)
				Me.SendPropertyChanging
				Me._porcentaje_chofer = value
				Me.SendPropertyChanged("porcentaje_chofer")
				Me.Onporcentaje_choferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento_tracto", DbType:="Float")>  _
	Public Property rendimiento_tracto() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento_tracto
		End Get
		Set
			If (Me._rendimiento_tracto.Equals(value) = false) Then
				Me.Onrendimiento_tractoChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento_tracto = value
				Me.SendPropertyChanged("rendimiento_tracto")
				Me.Onrendimiento_tractoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento_rabon", DbType:="Float")>  _
	Public Property rendimiento_rabon() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento_rabon
		End Get
		Set
			If (Me._rendimiento_rabon.Equals(value) = false) Then
				Me.Onrendimiento_rabonChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento_rabon = value
				Me.SendPropertyChanged("rendimiento_rabon")
				Me.Onrendimiento_rabonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento_pickup", DbType:="Float")>  _
	Public Property rendimiento_pickup() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento_pickup
		End Get
		Set
			If (Me._rendimiento_pickup.Equals(value) = false) Then
				Me.Onrendimiento_pickupChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento_pickup = value
				Me.SendPropertyChanged("rendimiento_pickup")
				Me.Onrendimiento_pickupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manejo_rabon", DbType:="Float")>  _
	Public Property manejo_rabon() As System.Nullable(Of Double)
		Get
			Return Me._manejo_rabon
		End Get
		Set
			If (Me._manejo_rabon.Equals(value) = false) Then
				Me.Onmanejo_rabonChanging(value)
				Me.SendPropertyChanging
				Me._manejo_rabon = value
				Me.SendPropertyChanged("manejo_rabon")
				Me.Onmanejo_rabonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_manejo_pickup", DbType:="Float")>  _
	Public Property manejo_pickup() As System.Nullable(Of Double)
		Get
			Return Me._manejo_pickup
		End Get
		Set
			If (Me._manejo_pickup.Equals(value) = false) Then
				Me.Onmanejo_pickupChanging(value)
				Me.SendPropertyChanging
				Me._manejo_pickup = value
				Me.SendPropertyChanged("manejo_pickup")
				Me.Onmanejo_pickupChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_factor_retorno", DbType:="Float")>  _
	Public Property factor_retorno() As System.Nullable(Of Double)
		Get
			Return Me._factor_retorno
		End Get
		Set
			If (Me._factor_retorno.Equals(value) = false) Then
				Me.Onfactor_retornoChanging(value)
				Me.SendPropertyChanging
				Me._factor_retorno = value
				Me.SendPropertyChanged("factor_retorno")
				Me.Onfactor_retornoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_meses_vigencia", DbType:="Int")>  _
	Public Property meses_vigencia() As System.Nullable(Of Integer)
		Get
			Return Me._meses_vigencia
		End Get
		Set
			If (Me._meses_vigencia.Equals(value) = false) Then
				Me.Onmeses_vigenciaChanging(value)
				Me.SendPropertyChanging
				Me._meses_vigencia = value
				Me.SendPropertyChanged("meses_vigencia")
				Me.Onmeses_vigenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rendimiento_Plataforma", DbType:="Float")>  _
	Public Property rendimiento_Plataforma() As System.Nullable(Of Double)
		Get
			Return Me._rendimiento_Plataforma
		End Get
		Set
			If (Me._rendimiento_Plataforma.Equals(value) = false) Then
				Me.Onrendimiento_PlataformaChanging(value)
				Me.SendPropertyChanging
				Me._rendimiento_Plataforma = value
				Me.SendPropertyChanged("rendimiento_Plataforma")
				Me.Onrendimiento_PlataformaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="precios_cajas")>  _
Partial Public Class precios_caja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_precio_caja As Integer
	
	Private _precioXmes As System.Nullable(Of Decimal)
	
	Private _id_cliente As System.Nullable(Of Integer)
	
	Private _id_moneda As System.Nullable(Of Integer)
	
	Private _factura_dolares As System.Nullable(Of Boolean)
	
	Private _tipo_cambio As System.Nullable(Of Decimal)
	
	Private _esXmes As System.Nullable(Of Boolean)
	
	Private _precioDiario As System.Nullable(Of Decimal)
	
	Private _orden_cajas As EntitySet(Of orden_caja)
	
	Private _empresa As EntityRef(Of empresa)
	
	Private _tipos_moneda As EntityRef(Of tipos_moneda)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_precio_cajaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_precio_cajaChanged()
    End Sub
    Partial Private Sub OnprecioXmesChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnprecioXmesChanged()
    End Sub
    Partial Private Sub Onid_clienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_clienteChanged()
    End Sub
    Partial Private Sub Onid_monedaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_monedaChanged()
    End Sub
    Partial Private Sub Onfactura_dolaresChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfactura_dolaresChanged()
    End Sub
    Partial Private Sub Ontipo_cambioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Ontipo_cambioChanged()
    End Sub
    Partial Private Sub OnesXmesChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnesXmesChanged()
    End Sub
    Partial Private Sub OnprecioDiarioChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnprecioDiarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orden_cajas = New EntitySet(Of orden_caja)(AddressOf Me.attach_orden_cajas, AddressOf Me.detach_orden_cajas)
		Me._empresa = CType(Nothing, EntityRef(Of empresa))
		Me._tipos_moneda = CType(Nothing, EntityRef(Of tipos_moneda))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_precio_caja", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_precio_caja() As Integer
		Get
			Return Me._id_precio_caja
		End Get
		Set
			If ((Me._id_precio_caja = value)  _
						= false) Then
				Me.Onid_precio_cajaChanging(value)
				Me.SendPropertyChanging
				Me._id_precio_caja = value
				Me.SendPropertyChanged("id_precio_caja")
				Me.Onid_precio_cajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precioXmes", DbType:="Money")>  _
	Public Property precioXmes() As System.Nullable(Of Decimal)
		Get
			Return Me._precioXmes
		End Get
		Set
			If (Me._precioXmes.Equals(value) = false) Then
				Me.OnprecioXmesChanging(value)
				Me.SendPropertyChanging
				Me._precioXmes = value
				Me.SendPropertyChanged("precioXmes")
				Me.OnprecioXmesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cliente", DbType:="Int")>  _
	Public Property id_cliente() As System.Nullable(Of Integer)
		Get
			Return Me._id_cliente
		End Get
		Set
			If (Me._id_cliente.Equals(value) = false) Then
				If Me._empresa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_clienteChanging(value)
				Me.SendPropertyChanging
				Me._id_cliente = value
				Me.SendPropertyChanged("id_cliente")
				Me.Onid_clienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_moneda", DbType:="Int")>  _
	Public Property id_moneda() As System.Nullable(Of Integer)
		Get
			Return Me._id_moneda
		End Get
		Set
			If (Me._id_moneda.Equals(value) = false) Then
				If Me._tipos_moneda.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_monedaChanging(value)
				Me.SendPropertyChanging
				Me._id_moneda = value
				Me.SendPropertyChanged("id_moneda")
				Me.Onid_monedaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_factura_dolares", DbType:="Bit")>  _
	Public Property factura_dolares() As System.Nullable(Of Boolean)
		Get
			Return Me._factura_dolares
		End Get
		Set
			If (Me._factura_dolares.Equals(value) = false) Then
				Me.Onfactura_dolaresChanging(value)
				Me.SendPropertyChanging
				Me._factura_dolares = value
				Me.SendPropertyChanged("factura_dolares")
				Me.Onfactura_dolaresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_cambio", DbType:="Money")>  _
	Public Property tipo_cambio() As System.Nullable(Of Decimal)
		Get
			Return Me._tipo_cambio
		End Get
		Set
			If (Me._tipo_cambio.Equals(value) = false) Then
				Me.Ontipo_cambioChanging(value)
				Me.SendPropertyChanging
				Me._tipo_cambio = value
				Me.SendPropertyChanged("tipo_cambio")
				Me.Ontipo_cambioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_esXmes", DbType:="Bit")>  _
	Public Property esXmes() As System.Nullable(Of Boolean)
		Get
			Return Me._esXmes
		End Get
		Set
			If (Me._esXmes.Equals(value) = false) Then
				Me.OnesXmesChanging(value)
				Me.SendPropertyChanging
				Me._esXmes = value
				Me.SendPropertyChanged("esXmes")
				Me.OnesXmesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_precioDiario", DbType:="Decimal(18,4)")>  _
	Public Property precioDiario() As System.Nullable(Of Decimal)
		Get
			Return Me._precioDiario
		End Get
		Set
			If (Me._precioDiario.Equals(value) = false) Then
				Me.OnprecioDiarioChanging(value)
				Me.SendPropertyChanging
				Me._precioDiario = value
				Me.SendPropertyChanged("precioDiario")
				Me.OnprecioDiarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precios_caja_orden_caja", Storage:="_orden_cajas", ThisKey:="id_precio_caja", OtherKey:="id_precio")>  _
	Public Property orden_cajas() As EntitySet(Of orden_caja)
		Get
			Return Me._orden_cajas
		End Get
		Set
			Me._orden_cajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empresa_precios_caja", Storage:="_empresa", ThisKey:="id_cliente", OtherKey:="id_empresa", IsForeignKey:=true)>  _
	Public Property empresa() As empresa
		Get
			Return Me._empresa.Entity
		End Get
		Set
			Dim previousValue As empresa = Me._empresa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empresa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empresa.Entity = Nothing
					previousValue.precios_cajas.Remove(Me)
				End If
				Me._empresa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios_cajas.Add(Me)
					Me._id_cliente = value.id_empresa
				Else
					Me._id_cliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empresa")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipos_moneda_precios_caja", Storage:="_tipos_moneda", ThisKey:="id_moneda", OtherKey:="id_moneda", IsForeignKey:=true)>  _
	Public Property tipos_moneda() As tipos_moneda
		Get
			Return Me._tipos_moneda.Entity
		End Get
		Set
			Dim previousValue As tipos_moneda = Me._tipos_moneda.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipos_moneda.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipos_moneda.Entity = Nothing
					previousValue.precios_cajas.Remove(Me)
				End If
				Me._tipos_moneda.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.precios_cajas.Add(Me)
					Me._id_moneda = value.id_moneda
				Else
					Me._id_moneda = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipos_moneda")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_orden_cajas(ByVal entity As orden_caja)
		Me.SendPropertyChanging
		entity.precios_caja = Me
	End Sub
	
	Private Sub detach_orden_cajas(ByVal entity As orden_caja)
		Me.SendPropertyChanging
		entity.precios_caja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class notasCredito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _importe As System.Nullable(Of Double)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _folio As System.Nullable(Of Integer)
	
	Private _iva As System.Nullable(Of Double)
	
	Private _retencion As System.Nullable(Of Double)
	
	Private _total As System.Nullable(Of Double)
	
	Private _cancelada As System.Nullable(Of Boolean)
	
	Private _facturadaDolares As System.Nullable(Of Boolean)
	
	Private _folioFiscal As String
	
	Private _serie As String
	
	Private _enviadoA As String
	
	Private _facturasConCreditos As EntitySet(Of facturasConCredito)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnimporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnimporteChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnfolioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfolioChanged()
    End Sub
    Partial Private Sub OnivaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnivaChanged()
    End Sub
    Partial Private Sub OnretencionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnretencionChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    Partial Private Sub OncanceladaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OncanceladaChanged()
    End Sub
    Partial Private Sub OnfacturadaDolaresChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnfacturadaDolaresChanged()
    End Sub
    Partial Private Sub OnfolioFiscalChanging(value As String)
    End Sub
    Partial Private Sub OnfolioFiscalChanged()
    End Sub
    Partial Private Sub OnserieChanging(value As String)
    End Sub
    Partial Private Sub OnserieChanged()
    End Sub
    Partial Private Sub OnenviadoAChanging(value As String)
    End Sub
    Partial Private Sub OnenviadoAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._facturasConCreditos = New EntitySet(Of facturasConCredito)(AddressOf Me.attach_facturasConCreditos, AddressOf Me.detach_facturasConCreditos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importe", DbType:="Float")>  _
	Public Property importe() As System.Nullable(Of Double)
		Get
			Return Me._importe
		End Get
		Set
			If (Me._importe.Equals(value) = false) Then
				Me.OnimporteChanging(value)
				Me.SendPropertyChanging
				Me._importe = value
				Me.SendPropertyChanged("importe")
				Me.OnimporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="Date")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folio", DbType:="Int")>  _
	Public Property folio() As System.Nullable(Of Integer)
		Get
			Return Me._folio
		End Get
		Set
			If (Me._folio.Equals(value) = false) Then
				Me.OnfolioChanging(value)
				Me.SendPropertyChanging
				Me._folio = value
				Me.SendPropertyChanged("folio")
				Me.OnfolioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iva", DbType:="Float")>  _
	Public Property iva() As System.Nullable(Of Double)
		Get
			Return Me._iva
		End Get
		Set
			If (Me._iva.Equals(value) = false) Then
				Me.OnivaChanging(value)
				Me.SendPropertyChanging
				Me._iva = value
				Me.SendPropertyChanged("iva")
				Me.OnivaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retencion", DbType:="Float")>  _
	Public Property retencion() As System.Nullable(Of Double)
		Get
			Return Me._retencion
		End Get
		Set
			If (Me._retencion.Equals(value) = false) Then
				Me.OnretencionChanging(value)
				Me.SendPropertyChanging
				Me._retencion = value
				Me.SendPropertyChanged("retencion")
				Me.OnretencionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Float")>  _
	Public Property total() As System.Nullable(Of Double)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cancelada", DbType:="Bit")>  _
	Public Property cancelada() As System.Nullable(Of Boolean)
		Get
			Return Me._cancelada
		End Get
		Set
			If (Me._cancelada.Equals(value) = false) Then
				Me.OncanceladaChanging(value)
				Me.SendPropertyChanging
				Me._cancelada = value
				Me.SendPropertyChanged("cancelada")
				Me.OncanceladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facturadaDolares", DbType:="Bit")>  _
	Public Property facturadaDolares() As System.Nullable(Of Boolean)
		Get
			Return Me._facturadaDolares
		End Get
		Set
			If (Me._facturadaDolares.Equals(value) = false) Then
				Me.OnfacturadaDolaresChanging(value)
				Me.SendPropertyChanging
				Me._facturadaDolares = value
				Me.SendPropertyChanged("facturadaDolares")
				Me.OnfacturadaDolaresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folioFiscal", DbType:="NVarChar(50)")>  _
	Public Property folioFiscal() As String
		Get
			Return Me._folioFiscal
		End Get
		Set
			If (String.Equals(Me._folioFiscal, value) = false) Then
				Me.OnfolioFiscalChanging(value)
				Me.SendPropertyChanging
				Me._folioFiscal = value
				Me.SendPropertyChanged("folioFiscal")
				Me.OnfolioFiscalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serie", DbType:="NVarChar(4)")>  _
	Public Property serie() As String
		Get
			Return Me._serie
		End Get
		Set
			If (String.Equals(Me._serie, value) = false) Then
				Me.OnserieChanging(value)
				Me.SendPropertyChanging
				Me._serie = value
				Me.SendPropertyChanged("serie")
				Me.OnserieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enviadoA", DbType:="NVarChar(250)")>  _
	Public Property enviadoA() As String
		Get
			Return Me._enviadoA
		End Get
		Set
			If (String.Equals(Me._enviadoA, value) = false) Then
				Me.OnenviadoAChanging(value)
				Me.SendPropertyChanging
				Me._enviadoA = value
				Me.SendPropertyChanged("enviadoA")
				Me.OnenviadoAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="notasCredito_facturasConCredito", Storage:="_facturasConCreditos", ThisKey:="id", OtherKey:="idNota")>  _
	Public Property facturasConCreditos() As EntitySet(Of facturasConCredito)
		Get
			Return Me._facturasConCreditos
		End Get
		Set
			Me._facturasConCreditos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_facturasConCreditos(ByVal entity As facturasConCredito)
		Me.SendPropertyChanging
		entity.notasCredito = Me
	End Sub
	
	Private Sub detach_facturasConCreditos(ByVal entity As facturasConCredito)
		Me.SendPropertyChanging
		entity.notasCredito = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="facturas")>  _
Partial Public Class factura
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_factura As Integer
	
	Private _folio As System.Nullable(Of Integer)
	
	Private _importe As System.Nullable(Of Double)
	
	Private _iva As System.Nullable(Of Double)
	
	Private _retencion As System.Nullable(Of Double)
	
	Private _total As System.Nullable(Of Double)
	
	Private _Cancelada As System.Nullable(Of Boolean)
	
	Private _id_dato_facturacion As System.Nullable(Of Integer)
	
	Private _facturada_dolares As System.Nullable(Of Boolean)
	
	Private _Contrarecibo As System.Nullable(Of Boolean)
	
	Private _facturaAmericana As System.Nullable(Of Boolean)
	
	Private _saldo As System.Nullable(Of Double)
	
	Private _facturacions As EntitySet(Of facturacion)
	
	Private _fechas_facturacions As EntitySet(Of fechas_facturacion)
	
	Private _tipo_cambios As EntitySet(Of tipo_cambio)
	
	Private _facturas_cajas As EntitySet(Of facturas_caja)
	
	Private _contrarecibos As EntitySet(Of contrarecibo)
	
	Private _facturasOtros As EntitySet(Of facturasOtro)
	
	Private _cfdis As EntitySet(Of cfdi)
	
	Private _facturasConCreditos As EntitySet(Of facturasConCredito)
	
	Private _datos_facturacion As EntityRef(Of datos_facturacion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_facturaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_facturaChanged()
    End Sub
    Partial Private Sub OnfolioChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnfolioChanged()
    End Sub
    Partial Private Sub OnimporteChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnimporteChanged()
    End Sub
    Partial Private Sub OnivaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnivaChanged()
    End Sub
    Partial Private Sub OnretencionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnretencionChanged()
    End Sub
    Partial Private Sub OntotalChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OntotalChanged()
    End Sub
    Partial Private Sub OnCanceladaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCanceladaChanged()
    End Sub
    Partial Private Sub Onid_dato_facturacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_dato_facturacionChanged()
    End Sub
    Partial Private Sub Onfacturada_dolaresChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onfacturada_dolaresChanged()
    End Sub
    Partial Private Sub OnContrareciboChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnContrareciboChanged()
    End Sub
    Partial Private Sub OnfacturaAmericanaChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnfacturaAmericanaChanged()
    End Sub
    Partial Private Sub OnsaldoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnsaldoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._facturacions = New EntitySet(Of facturacion)(AddressOf Me.attach_facturacions, AddressOf Me.detach_facturacions)
		Me._fechas_facturacions = New EntitySet(Of fechas_facturacion)(AddressOf Me.attach_fechas_facturacions, AddressOf Me.detach_fechas_facturacions)
		Me._tipo_cambios = New EntitySet(Of tipo_cambio)(AddressOf Me.attach_tipo_cambios, AddressOf Me.detach_tipo_cambios)
		Me._facturas_cajas = New EntitySet(Of facturas_caja)(AddressOf Me.attach_facturas_cajas, AddressOf Me.detach_facturas_cajas)
		Me._contrarecibos = New EntitySet(Of contrarecibo)(AddressOf Me.attach_contrarecibos, AddressOf Me.detach_contrarecibos)
		Me._facturasOtros = New EntitySet(Of facturasOtro)(AddressOf Me.attach_facturasOtros, AddressOf Me.detach_facturasOtros)
		Me._cfdis = New EntitySet(Of cfdi)(AddressOf Me.attach_cfdis, AddressOf Me.detach_cfdis)
		Me._facturasConCreditos = New EntitySet(Of facturasConCredito)(AddressOf Me.attach_facturasConCreditos, AddressOf Me.detach_facturasConCreditos)
		Me._datos_facturacion = CType(Nothing, EntityRef(Of datos_facturacion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_factura", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_factura() As Integer
		Get
			Return Me._id_factura
		End Get
		Set
			If ((Me._id_factura = value)  _
						= false) Then
				Me.Onid_facturaChanging(value)
				Me.SendPropertyChanging
				Me._id_factura = value
				Me.SendPropertyChanged("id_factura")
				Me.Onid_facturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_folio", DbType:="Int")>  _
	Public Property folio() As System.Nullable(Of Integer)
		Get
			Return Me._folio
		End Get
		Set
			If (Me._folio.Equals(value) = false) Then
				Me.OnfolioChanging(value)
				Me.SendPropertyChanging
				Me._folio = value
				Me.SendPropertyChanged("folio")
				Me.OnfolioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importe", DbType:="Float")>  _
	Public Property importe() As System.Nullable(Of Double)
		Get
			Return Me._importe
		End Get
		Set
			If (Me._importe.Equals(value) = false) Then
				Me.OnimporteChanging(value)
				Me.SendPropertyChanging
				Me._importe = value
				Me.SendPropertyChanged("importe")
				Me.OnimporteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_iva", DbType:="Float")>  _
	Public Property iva() As System.Nullable(Of Double)
		Get
			Return Me._iva
		End Get
		Set
			If (Me._iva.Equals(value) = false) Then
				Me.OnivaChanging(value)
				Me.SendPropertyChanging
				Me._iva = value
				Me.SendPropertyChanged("iva")
				Me.OnivaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_retencion", DbType:="Float")>  _
	Public Property retencion() As System.Nullable(Of Double)
		Get
			Return Me._retencion
		End Get
		Set
			If (Me._retencion.Equals(value) = false) Then
				Me.OnretencionChanging(value)
				Me.SendPropertyChanging
				Me._retencion = value
				Me.SendPropertyChanged("retencion")
				Me.OnretencionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_total", DbType:="Float")>  _
	Public Property total() As System.Nullable(Of Double)
		Get
			Return Me._total
		End Get
		Set
			If (Me._total.Equals(value) = false) Then
				Me.OntotalChanging(value)
				Me.SendPropertyChanging
				Me._total = value
				Me.SendPropertyChanged("total")
				Me.OntotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cancelada", DbType:="Bit")>  _
	Public Property Cancelada() As System.Nullable(Of Boolean)
		Get
			Return Me._Cancelada
		End Get
		Set
			If (Me._Cancelada.Equals(value) = false) Then
				Me.OnCanceladaChanging(value)
				Me.SendPropertyChanging
				Me._Cancelada = value
				Me.SendPropertyChanged("Cancelada")
				Me.OnCanceladaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_dato_facturacion", DbType:="Int")>  _
	Public Property id_dato_facturacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_dato_facturacion
		End Get
		Set
			If (Me._id_dato_facturacion.Equals(value) = false) Then
				If Me._datos_facturacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_dato_facturacionChanging(value)
				Me.SendPropertyChanging
				Me._id_dato_facturacion = value
				Me.SendPropertyChanged("id_dato_facturacion")
				Me.Onid_dato_facturacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facturada_dolares", DbType:="Bit")>  _
	Public Property facturada_dolares() As System.Nullable(Of Boolean)
		Get
			Return Me._facturada_dolares
		End Get
		Set
			If (Me._facturada_dolares.Equals(value) = false) Then
				Me.Onfacturada_dolaresChanging(value)
				Me.SendPropertyChanging
				Me._facturada_dolares = value
				Me.SendPropertyChanged("facturada_dolares")
				Me.Onfacturada_dolaresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contrarecibo", DbType:="Bit")>  _
	Public Property Contrarecibo() As System.Nullable(Of Boolean)
		Get
			Return Me._Contrarecibo
		End Get
		Set
			If (Me._Contrarecibo.Equals(value) = false) Then
				Me.OnContrareciboChanging(value)
				Me.SendPropertyChanging
				Me._Contrarecibo = value
				Me.SendPropertyChanged("Contrarecibo")
				Me.OnContrareciboChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facturaAmericana", DbType:="Bit")>  _
	Public Property facturaAmericana() As System.Nullable(Of Boolean)
		Get
			Return Me._facturaAmericana
		End Get
		Set
			If (Me._facturaAmericana.Equals(value) = false) Then
				Me.OnfacturaAmericanaChanging(value)
				Me.SendPropertyChanging
				Me._facturaAmericana = value
				Me.SendPropertyChanged("facturaAmericana")
				Me.OnfacturaAmericanaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_saldo", DbType:="Float")>  _
	Public Property saldo() As System.Nullable(Of Double)
		Get
			Return Me._saldo
		End Get
		Set
			If (Me._saldo.Equals(value) = false) Then
				Me.OnsaldoChanging(value)
				Me.SendPropertyChanging
				Me._saldo = value
				Me.SendPropertyChanged("saldo")
				Me.OnsaldoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturacion", Storage:="_facturacions", ThisKey:="id_factura", OtherKey:="id_factura")>  _
	Public Property facturacions() As EntitySet(Of facturacion)
		Get
			Return Me._facturacions
		End Get
		Set
			Me._facturacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_fechas_facturacion", Storage:="_fechas_facturacions", ThisKey:="id_factura", OtherKey:="id_factura")>  _
	Public Property fechas_facturacions() As EntitySet(Of fechas_facturacion)
		Get
			Return Me._fechas_facturacions
		End Get
		Set
			Me._fechas_facturacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_tipo_cambio", Storage:="_tipo_cambios", ThisKey:="id_factura", OtherKey:="id_factura")>  _
	Public Property tipo_cambios() As EntitySet(Of tipo_cambio)
		Get
			Return Me._tipo_cambios
		End Get
		Set
			Me._tipo_cambios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturas_caja", Storage:="_facturas_cajas", ThisKey:="id_factura", OtherKey:="id_factura")>  _
	Public Property facturas_cajas() As EntitySet(Of facturas_caja)
		Get
			Return Me._facturas_cajas
		End Get
		Set
			Me._facturas_cajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_contrarecibo", Storage:="_contrarecibos", ThisKey:="id_factura", OtherKey:="id_factura")>  _
	Public Property contrarecibos() As EntitySet(Of contrarecibo)
		Get
			Return Me._contrarecibos
		End Get
		Set
			Me._contrarecibos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturasOtro", Storage:="_facturasOtros", ThisKey:="id_factura", OtherKey:="idFactura")>  _
	Public Property facturasOtros() As EntitySet(Of facturasOtro)
		Get
			Return Me._facturasOtros
		End Get
		Set
			Me._facturasOtros.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_cfdi", Storage:="_cfdis", ThisKey:="id_factura", OtherKey:="idFactura")>  _
	Public Property cfdis() As EntitySet(Of cfdi)
		Get
			Return Me._cfdis
		End Get
		Set
			Me._cfdis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturasConCredito", Storage:="_facturasConCreditos", ThisKey:="id_factura", OtherKey:="idFactura")>  _
	Public Property facturasConCreditos() As EntitySet(Of facturasConCredito)
		Get
			Return Me._facturasConCreditos
		End Get
		Set
			Me._facturasConCreditos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="datos_facturacion_factura", Storage:="_datos_facturacion", ThisKey:="id_dato_facturacion", OtherKey:="id_dato", IsForeignKey:=true)>  _
	Public Property datos_facturacion() As datos_facturacion
		Get
			Return Me._datos_facturacion.Entity
		End Get
		Set
			Dim previousValue As datos_facturacion = Me._datos_facturacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._datos_facturacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._datos_facturacion.Entity = Nothing
					previousValue.facturas.Remove(Me)
				End If
				Me._datos_facturacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturas.Add(Me)
					Me._id_dato_facturacion = value.id_dato
				Else
					Me._id_dato_facturacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("datos_facturacion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_facturacions(ByVal entity As facturacion)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_facturacions(ByVal entity As facturacion)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_fechas_facturacions(ByVal entity As fechas_facturacion)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_fechas_facturacions(ByVal entity As fechas_facturacion)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_tipo_cambios(ByVal entity As tipo_cambio)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_tipo_cambios(ByVal entity As tipo_cambio)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_facturas_cajas(ByVal entity As facturas_caja)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_facturas_cajas(ByVal entity As facturas_caja)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_contrarecibos(ByVal entity As contrarecibo)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_contrarecibos(ByVal entity As contrarecibo)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_facturasOtros(ByVal entity As facturasOtro)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_facturasOtros(ByVal entity As facturasOtro)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_cfdis(ByVal entity As cfdi)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_cfdis(ByVal entity As cfdi)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
	
	Private Sub attach_facturasConCreditos(ByVal entity As facturasConCredito)
		Me.SendPropertyChanging
		entity.factura = Me
	End Sub
	
	Private Sub detach_facturasConCreditos(ByVal entity As facturasConCredito)
		Me.SendPropertyChanging
		entity.factura = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class facturasConCredito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _idFactura As System.Nullable(Of Integer)
	
	Private _idNota As System.Nullable(Of Integer)
	
	Private _factura As EntityRef(Of factura)
	
	Private _notasCredito As EntityRef(Of notasCredito)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnidFacturaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidFacturaChanged()
    End Sub
    Partial Private Sub OnidNotaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidNotaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._factura = CType(Nothing, EntityRef(Of factura))
		Me._notasCredito = CType(Nothing, EntityRef(Of notasCredito))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idFactura", DbType:="Int")>  _
	Public Property idFactura() As System.Nullable(Of Integer)
		Get
			Return Me._idFactura
		End Get
		Set
			If (Me._idFactura.Equals(value) = false) Then
				If Me._factura.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidFacturaChanging(value)
				Me.SendPropertyChanging
				Me._idFactura = value
				Me.SendPropertyChanged("idFactura")
				Me.OnidFacturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idNota", DbType:="Int")>  _
	Public Property idNota() As System.Nullable(Of Integer)
		Get
			Return Me._idNota
		End Get
		Set
			If (Me._idNota.Equals(value) = false) Then
				If Me._notasCredito.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidNotaChanging(value)
				Me.SendPropertyChanging
				Me._idNota = value
				Me.SendPropertyChanged("idNota")
				Me.OnidNotaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="factura_facturasConCredito", Storage:="_factura", ThisKey:="idFactura", OtherKey:="id_factura", IsForeignKey:=true)>  _
	Public Property factura() As factura
		Get
			Return Me._factura.Entity
		End Get
		Set
			Dim previousValue As factura = Me._factura.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._factura.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._factura.Entity = Nothing
					previousValue.facturasConCreditos.Remove(Me)
				End If
				Me._factura.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturasConCreditos.Add(Me)
					Me._idFactura = value.id_factura
				Else
					Me._idFactura = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("factura")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="notasCredito_facturasConCredito", Storage:="_notasCredito", ThisKey:="idNota", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property notasCredito() As notasCredito
		Get
			Return Me._notasCredito.Entity
		End Get
		Set
			Dim previousValue As notasCredito = Me._notasCredito.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._notasCredito.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._notasCredito.Entity = Nothing
					previousValue.facturasConCreditos.Remove(Me)
				End If
				Me._notasCredito.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.facturasConCreditos.Add(Me)
					Me._idNota = value.id
				Else
					Me._idNota = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("notasCredito")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class equipo_operacion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_equipo As Integer
	
	Private _economico As String
	
	Private _placa As String
	
	Private _id_marca As System.Nullable(Of Integer)
	
	Private _serie As String
	
	Private _id_tipo_equipo As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _ano As String
	
	Private _idBase As System.Nullable(Of Integer)
	
	Private _enBase As System.Nullable(Of Boolean)
	
	Private _localero As System.Nullable(Of Boolean)
	
	Private _orden_cajas As EntitySet(Of orden_caja)
	
	Private _programacion_servicios As EntitySet(Of programacion_servicio)
	
	Private _preventivos As EntitySet(Of preventivo)
	
	Private _equipo_asignados As EntitySet(Of equipo_asignado)
	
	Private _marca As EntityRef(Of marca)
	
	Private _tipo_equipo As EntityRef(Of tipo_equipo)
	
	Private _ubicacione As EntityRef(Of ubicacione)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub OneconomicoChanging(value As String)
    End Sub
    Partial Private Sub OneconomicoChanged()
    End Sub
    Partial Private Sub OnplacaChanging(value As String)
    End Sub
    Partial Private Sub OnplacaChanged()
    End Sub
    Partial Private Sub Onid_marcaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_marcaChanged()
    End Sub
    Partial Private Sub OnserieChanging(value As String)
    End Sub
    Partial Private Sub OnserieChanged()
    End Sub
    Partial Private Sub Onid_tipo_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_equipoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub OnanoChanging(value As String)
    End Sub
    Partial Private Sub OnanoChanged()
    End Sub
    Partial Private Sub OnidBaseChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidBaseChanged()
    End Sub
    Partial Private Sub OnenBaseChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnenBaseChanged()
    End Sub
    Partial Private Sub OnlocaleroChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnlocaleroChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._orden_cajas = New EntitySet(Of orden_caja)(AddressOf Me.attach_orden_cajas, AddressOf Me.detach_orden_cajas)
		Me._programacion_servicios = New EntitySet(Of programacion_servicio)(AddressOf Me.attach_programacion_servicios, AddressOf Me.detach_programacion_servicios)
		Me._preventivos = New EntitySet(Of preventivo)(AddressOf Me.attach_preventivos, AddressOf Me.detach_preventivos)
		Me._equipo_asignados = New EntitySet(Of equipo_asignado)(AddressOf Me.attach_equipo_asignados, AddressOf Me.detach_equipo_asignados)
		Me._marca = CType(Nothing, EntityRef(Of marca))
		Me._tipo_equipo = CType(Nothing, EntityRef(Of tipo_equipo))
		Me._ubicacione = CType(Nothing, EntityRef(Of ubicacione))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_equipo() As Integer
		Get
			Return Me._id_equipo
		End Get
		Set
			If ((Me._id_equipo = value)  _
						= false) Then
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_economico", DbType:="NVarChar(15)")>  _
	Public Property economico() As String
		Get
			Return Me._economico
		End Get
		Set
			If (String.Equals(Me._economico, value) = false) Then
				Me.OneconomicoChanging(value)
				Me.SendPropertyChanging
				Me._economico = value
				Me.SendPropertyChanged("economico")
				Me.OneconomicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_placa", DbType:="NVarChar(50)")>  _
	Public Property placa() As String
		Get
			Return Me._placa
		End Get
		Set
			If (String.Equals(Me._placa, value) = false) Then
				Me.OnplacaChanging(value)
				Me.SendPropertyChanging
				Me._placa = value
				Me.SendPropertyChanged("placa")
				Me.OnplacaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_marca", DbType:="Int")>  _
	Public Property id_marca() As System.Nullable(Of Integer)
		Get
			Return Me._id_marca
		End Get
		Set
			If (Me._id_marca.Equals(value) = false) Then
				If Me._marca.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_marcaChanging(value)
				Me.SendPropertyChanging
				Me._id_marca = value
				Me.SendPropertyChanged("id_marca")
				Me.Onid_marcaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serie", DbType:="NVarChar(50)")>  _
	Public Property serie() As String
		Get
			Return Me._serie
		End Get
		Set
			If (String.Equals(Me._serie, value) = false) Then
				Me.OnserieChanging(value)
				Me.SendPropertyChanging
				Me._serie = value
				Me.SendPropertyChanged("serie")
				Me.OnserieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_equipo", DbType:="Int")>  _
	Public Property id_tipo_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_equipo
		End Get
		Set
			If (Me._id_tipo_equipo.Equals(value) = false) Then
				If Me._tipo_equipo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_equipo = value
				Me.SendPropertyChanged("id_tipo_equipo")
				Me.Onid_tipo_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ano", DbType:="NVarChar(5)")>  _
	Public Property ano() As String
		Get
			Return Me._ano
		End Get
		Set
			If (String.Equals(Me._ano, value) = false) Then
				Me.OnanoChanging(value)
				Me.SendPropertyChanging
				Me._ano = value
				Me.SendPropertyChanged("ano")
				Me.OnanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idBase", DbType:="Int")>  _
	Public Property idBase() As System.Nullable(Of Integer)
		Get
			Return Me._idBase
		End Get
		Set
			If (Me._idBase.Equals(value) = false) Then
				If Me._ubicacione.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidBaseChanging(value)
				Me.SendPropertyChanging
				Me._idBase = value
				Me.SendPropertyChanged("idBase")
				Me.OnidBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enBase", DbType:="Bit")>  _
	Public Property enBase() As System.Nullable(Of Boolean)
		Get
			Return Me._enBase
		End Get
		Set
			If (Me._enBase.Equals(value) = false) Then
				Me.OnenBaseChanging(value)
				Me.SendPropertyChanging
				Me._enBase = value
				Me.SendPropertyChanged("enBase")
				Me.OnenBaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_localero", DbType:="Bit")>  _
	Public Property localero() As System.Nullable(Of Boolean)
		Get
			Return Me._localero
		End Get
		Set
			If (Me._localero.Equals(value) = false) Then
				Me.OnlocaleroChanging(value)
				Me.SendPropertyChanging
				Me._localero = value
				Me.SendPropertyChanged("localero")
				Me.OnlocaleroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_orden_caja", Storage:="_orden_cajas", ThisKey:="id_equipo", OtherKey:="id_equipo")>  _
	Public Property orden_cajas() As EntitySet(Of orden_caja)
		Get
			Return Me._orden_cajas
		End Get
		Set
			Me._orden_cajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_programacion_servicio", Storage:="_programacion_servicios", ThisKey:="id_equipo", OtherKey:="id_equipo")>  _
	Public Property programacion_servicios() As EntitySet(Of programacion_servicio)
		Get
			Return Me._programacion_servicios
		End Get
		Set
			Me._programacion_servicios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_preventivo", Storage:="_preventivos", ThisKey:="id_equipo", OtherKey:="id_equipo")>  _
	Public Property preventivos() As EntitySet(Of preventivo)
		Get
			Return Me._preventivos
		End Get
		Set
			Me._preventivos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_equipo_asignado", Storage:="_equipo_asignados", ThisKey:="id_equipo", OtherKey:="id_equipo")>  _
	Public Property equipo_asignados() As EntitySet(Of equipo_asignado)
		Get
			Return Me._equipo_asignados
		End Get
		Set
			Me._equipo_asignados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="marca_equipo_operacion", Storage:="_marca", ThisKey:="id_marca", OtherKey:="id_marca", IsForeignKey:=true)>  _
	Public Property marca() As marca
		Get
			Return Me._marca.Entity
		End Get
		Set
			Dim previousValue As marca = Me._marca.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._marca.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._marca.Entity = Nothing
					previousValue.equipo_operacions.Remove(Me)
				End If
				Me._marca.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_operacions.Add(Me)
					Me._id_marca = value.id_marca
				Else
					Me._id_marca = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("marca")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_equipo_equipo_operacion", Storage:="_tipo_equipo", ThisKey:="id_tipo_equipo", OtherKey:="id_tipo_equipo", IsForeignKey:=true)>  _
	Public Property tipo_equipo() As tipo_equipo
		Get
			Return Me._tipo_equipo.Entity
		End Get
		Set
			Dim previousValue As tipo_equipo = Me._tipo_equipo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_equipo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_equipo.Entity = Nothing
					previousValue.equipo_operacions.Remove(Me)
				End If
				Me._tipo_equipo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_operacions.Add(Me)
					Me._id_tipo_equipo = value.id_tipo_equipo
				Else
					Me._id_tipo_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_equipo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ubicacione_equipo_operacion", Storage:="_ubicacione", ThisKey:="idBase", OtherKey:="id_principal", IsForeignKey:=true)>  _
	Public Property ubicacione() As ubicacione
		Get
			Return Me._ubicacione.Entity
		End Get
		Set
			Dim previousValue As ubicacione = Me._ubicacione.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ubicacione.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ubicacione.Entity = Nothing
					previousValue.equipo_operacions.Remove(Me)
				End If
				Me._ubicacione.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_operacions.Add(Me)
					Me._idBase = value.id_principal
				Else
					Me._idBase = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ubicacione")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_orden_cajas(ByVal entity As orden_caja)
		Me.SendPropertyChanging
		entity.equipo_operacion = Me
	End Sub
	
	Private Sub detach_orden_cajas(ByVal entity As orden_caja)
		Me.SendPropertyChanging
		entity.equipo_operacion = Nothing
	End Sub
	
	Private Sub attach_programacion_servicios(ByVal entity As programacion_servicio)
		Me.SendPropertyChanging
		entity.equipo_operacion = Me
	End Sub
	
	Private Sub detach_programacion_servicios(ByVal entity As programacion_servicio)
		Me.SendPropertyChanging
		entity.equipo_operacion = Nothing
	End Sub
	
	Private Sub attach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.equipo_operacion = Me
	End Sub
	
	Private Sub detach_preventivos(ByVal entity As preventivo)
		Me.SendPropertyChanging
		entity.equipo_operacion = Nothing
	End Sub
	
	Private Sub attach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.equipo_operacion = Me
	End Sub
	
	Private Sub detach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.equipo_operacion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Cajas")>  _
Partial Public Class Caja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CajaId As Integer
	
	Private _economico As String
	
	Private _placa As String
	
	Private _marcaId As System.Nullable(Of Integer)
	
	Private _serie As String
	
	Private _tipoCaja As System.Nullable(Of Integer)
	
	Private _estatusId As System.Nullable(Of Integer)
	
	Private _ano As System.Nullable(Of Integer)
	
	Private _cajaAsignadas As EntitySet(Of cajaAsignada)
	
	Private _datos_cajas As EntitySet(Of datos_caja)
	
	Private _marca As EntityRef(Of marca)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCajaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCajaIdChanged()
    End Sub
    Partial Private Sub OneconomicoChanging(value As String)
    End Sub
    Partial Private Sub OneconomicoChanged()
    End Sub
    Partial Private Sub OnplacaChanging(value As String)
    End Sub
    Partial Private Sub OnplacaChanged()
    End Sub
    Partial Private Sub OnmarcaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnmarcaIdChanged()
    End Sub
    Partial Private Sub OnserieChanging(value As String)
    End Sub
    Partial Private Sub OnserieChanged()
    End Sub
    Partial Private Sub OntipoCajaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OntipoCajaChanged()
    End Sub
    Partial Private Sub OnestatusIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnestatusIdChanged()
    End Sub
    Partial Private Sub OnanoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnanoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cajaAsignadas = New EntitySet(Of cajaAsignada)(AddressOf Me.attach_cajaAsignadas, AddressOf Me.detach_cajaAsignadas)
		Me._datos_cajas = New EntitySet(Of datos_caja)(AddressOf Me.attach_datos_cajas, AddressOf Me.detach_datos_cajas)
		Me._marca = CType(Nothing, EntityRef(Of marca))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CajaId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CajaId() As Integer
		Get
			Return Me._CajaId
		End Get
		Set
			If ((Me._CajaId = value)  _
						= false) Then
				Me.OnCajaIdChanging(value)
				Me.SendPropertyChanging
				Me._CajaId = value
				Me.SendPropertyChanged("CajaId")
				Me.OnCajaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_economico", DbType:="NVarChar(15)")>  _
	Public Property economico() As String
		Get
			Return Me._economico
		End Get
		Set
			If (String.Equals(Me._economico, value) = false) Then
				Me.OneconomicoChanging(value)
				Me.SendPropertyChanging
				Me._economico = value
				Me.SendPropertyChanged("economico")
				Me.OneconomicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_placa", DbType:="NVarChar(15)")>  _
	Public Property placa() As String
		Get
			Return Me._placa
		End Get
		Set
			If (String.Equals(Me._placa, value) = false) Then
				Me.OnplacaChanging(value)
				Me.SendPropertyChanging
				Me._placa = value
				Me.SendPropertyChanged("placa")
				Me.OnplacaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_marcaId", DbType:="Int")>  _
	Public Property marcaId() As System.Nullable(Of Integer)
		Get
			Return Me._marcaId
		End Get
		Set
			If (Me._marcaId.Equals(value) = false) Then
				If Me._marca.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnmarcaIdChanging(value)
				Me.SendPropertyChanging
				Me._marcaId = value
				Me.SendPropertyChanged("marcaId")
				Me.OnmarcaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_serie", DbType:="NVarChar(25)")>  _
	Public Property serie() As String
		Get
			Return Me._serie
		End Get
		Set
			If (String.Equals(Me._serie, value) = false) Then
				Me.OnserieChanging(value)
				Me.SendPropertyChanging
				Me._serie = value
				Me.SendPropertyChanged("serie")
				Me.OnserieChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipoCaja", DbType:="Int")>  _
	Public Property tipoCaja() As System.Nullable(Of Integer)
		Get
			Return Me._tipoCaja
		End Get
		Set
			If (Me._tipoCaja.Equals(value) = false) Then
				Me.OntipoCajaChanging(value)
				Me.SendPropertyChanging
				Me._tipoCaja = value
				Me.SendPropertyChanged("tipoCaja")
				Me.OntipoCajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estatusId", DbType:="Int")>  _
	Public Property estatusId() As System.Nullable(Of Integer)
		Get
			Return Me._estatusId
		End Get
		Set
			If (Me._estatusId.Equals(value) = false) Then
				Me.OnestatusIdChanging(value)
				Me.SendPropertyChanging
				Me._estatusId = value
				Me.SendPropertyChanged("estatusId")
				Me.OnestatusIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ano", DbType:="Int")>  _
	Public Property ano() As System.Nullable(Of Integer)
		Get
			Return Me._ano
		End Get
		Set
			If (Me._ano.Equals(value) = false) Then
				Me.OnanoChanging(value)
				Me.SendPropertyChanging
				Me._ano = value
				Me.SendPropertyChanged("ano")
				Me.OnanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caja_cajaAsignada", Storage:="_cajaAsignadas", ThisKey:="CajaId", OtherKey:="CajaId")>  _
	Public Property cajaAsignadas() As EntitySet(Of cajaAsignada)
		Get
			Return Me._cajaAsignadas
		End Get
		Set
			Me._cajaAsignadas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caja_datos_caja", Storage:="_datos_cajas", ThisKey:="CajaId", OtherKey:="id_equipo")>  _
	Public Property datos_cajas() As EntitySet(Of datos_caja)
		Get
			Return Me._datos_cajas
		End Get
		Set
			Me._datos_cajas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="marca_Caja", Storage:="_marca", ThisKey:="marcaId", OtherKey:="id_marca", IsForeignKey:=true)>  _
	Public Property marca() As marca
		Get
			Return Me._marca.Entity
		End Get
		Set
			Dim previousValue As marca = Me._marca.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._marca.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._marca.Entity = Nothing
					previousValue.Cajas.Remove(Me)
				End If
				Me._marca.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cajas.Add(Me)
					Me._marcaId = value.id_marca
				Else
					Me._marcaId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("marca")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cajaAsignadas(ByVal entity As cajaAsignada)
		Me.SendPropertyChanging
		entity.Caja = Me
	End Sub
	
	Private Sub detach_cajaAsignadas(ByVal entity As cajaAsignada)
		Me.SendPropertyChanging
		entity.Caja = Nothing
	End Sub
	
	Private Sub attach_datos_cajas(ByVal entity As datos_caja)
		Me.SendPropertyChanging
		entity.Caja = Me
	End Sub
	
	Private Sub detach_datos_cajas(ByVal entity As datos_caja)
		Me.SendPropertyChanging
		entity.Caja = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute()>  _
Partial Public Class datos_caja
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_dato_caja As Integer
	
	Private _pies As String
	
	Private _id_tipo_uso As System.Nullable(Of Integer)
	
	Private _id_cruce As System.Nullable(Of Boolean)
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _Caja As EntityRef(Of Caja)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_dato_cajaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_dato_cajaChanged()
    End Sub
    Partial Private Sub OnpiesChanging(value As String)
    End Sub
    Partial Private Sub OnpiesChanged()
    End Sub
    Partial Private Sub Onid_tipo_usoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_usoChanged()
    End Sub
    Partial Private Sub Onid_cruceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub Onid_cruceChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Caja = CType(Nothing, EntityRef(Of Caja))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_dato_caja", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_dato_caja() As Integer
		Get
			Return Me._id_dato_caja
		End Get
		Set
			If ((Me._id_dato_caja = value)  _
						= false) Then
				Me.Onid_dato_cajaChanging(value)
				Me.SendPropertyChanging
				Me._id_dato_caja = value
				Me.SendPropertyChanged("id_dato_caja")
				Me.Onid_dato_cajaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pies", DbType:="NVarChar(2)")>  _
	Public Property pies() As String
		Get
			Return Me._pies
		End Get
		Set
			If (String.Equals(Me._pies, value) = false) Then
				Me.OnpiesChanging(value)
				Me.SendPropertyChanging
				Me._pies = value
				Me.SendPropertyChanged("pies")
				Me.OnpiesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_uso", DbType:="Int")>  _
	Public Property id_tipo_uso() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_uso
		End Get
		Set
			If (Me._id_tipo_uso.Equals(value) = false) Then
				Me.Onid_tipo_usoChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_uso = value
				Me.SendPropertyChanged("id_tipo_uso")
				Me.Onid_tipo_usoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cruce", DbType:="Bit")>  _
	Public Property id_cruce() As System.Nullable(Of Boolean)
		Get
			Return Me._id_cruce
		End Get
		Set
			If (Me._id_cruce.Equals(value) = false) Then
				Me.Onid_cruceChanging(value)
				Me.SendPropertyChanging
				Me._id_cruce = value
				Me.SendPropertyChanged("id_cruce")
				Me.Onid_cruceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				If Me._Caja.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Caja_datos_caja", Storage:="_Caja", ThisKey:="id_equipo", OtherKey:="CajaId", IsForeignKey:=true)>  _
	Public Property Caja() As Caja
		Get
			Return Me._Caja.Entity
		End Get
		Set
			Dim previousValue As Caja = Me._Caja.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Caja.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Caja.Entity = Nothing
					previousValue.datos_cajas.Remove(Me)
				End If
				Me._Caja.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.datos_cajas.Add(Me)
					Me._id_equipo = value.CajaId
				Else
					Me._id_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Caja")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.llegadaDestinos")>  _
Partial Public Class llegadaDestino
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _idLLegada As Integer
	
	Private _idArrivo As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _idViaje As System.Nullable(Of Integer)
	
	Private _diferencia As System.Nullable(Of Integer)
	
	Private _fechaReal As System.Nullable(Of Date)
	
	Private _detalle_arrivo As EntityRef(Of detalle_arrivo)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidLLegadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidLLegadaChanged()
    End Sub
    Partial Private Sub OnidArrivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidArrivoChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidViajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidViajeChanged()
    End Sub
    Partial Private Sub OndiferenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndiferenciaChanged()
    End Sub
    Partial Private Sub OnfechaRealChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaRealChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._detalle_arrivo = CType(Nothing, EntityRef(Of detalle_arrivo))
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idLLegada", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property idLLegada() As Integer
		Get
			Return Me._idLLegada
		End Get
		Set
			If ((Me._idLLegada = value)  _
						= false) Then
				Me.OnidLLegadaChanging(value)
				Me.SendPropertyChanging
				Me._idLLegada = value
				Me.SendPropertyChanged("idLLegada")
				Me.OnidLLegadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idArrivo", DbType:="Int")>  _
	Public Property idArrivo() As System.Nullable(Of Integer)
		Get
			Return Me._idArrivo
		End Get
		Set
			If (Me._idArrivo.Equals(value) = false) Then
				If Me._detalle_arrivo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidArrivoChanging(value)
				Me.SendPropertyChanging
				Me._idArrivo = value
				Me.SendPropertyChanged("idArrivo")
				Me.OnidArrivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="SmallDateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idViaje", DbType:="Int")>  _
	Public Property idViaje() As System.Nullable(Of Integer)
		Get
			Return Me._idViaje
		End Get
		Set
			If (Me._idViaje.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidViajeChanging(value)
				Me.SendPropertyChanging
				Me._idViaje = value
				Me.SendPropertyChanged("idViaje")
				Me.OnidViajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_diferencia", DbType:="Int")>  _
	Public Property diferencia() As System.Nullable(Of Integer)
		Get
			Return Me._diferencia
		End Get
		Set
			If (Me._diferencia.Equals(value) = false) Then
				Me.OndiferenciaChanging(value)
				Me.SendPropertyChanging
				Me._diferencia = value
				Me.SendPropertyChanged("diferencia")
				Me.OndiferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaReal", DbType:="SmallDateTime")>  _
	Public Property fechaReal() As System.Nullable(Of Date)
		Get
			Return Me._fechaReal
		End Get
		Set
			If (Me._fechaReal.Equals(value) = false) Then
				Me.OnfechaRealChanging(value)
				Me.SendPropertyChanging
				Me._fechaReal = value
				Me.SendPropertyChanged("fechaReal")
				Me.OnfechaRealChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="detalle_arrivo_llegadaDestino", Storage:="_detalle_arrivo", ThisKey:="idArrivo", OtherKey:="id_detalle", IsForeignKey:=true)>  _
	Public Property detalle_arrivo() As detalle_arrivo
		Get
			Return Me._detalle_arrivo.Entity
		End Get
		Set
			Dim previousValue As detalle_arrivo = Me._detalle_arrivo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._detalle_arrivo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._detalle_arrivo.Entity = Nothing
					previousValue.llegadaDestinos.Remove(Me)
				End If
				Me._detalle_arrivo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.llegadaDestinos.Add(Me)
					Me._idArrivo = value.id_detalle
				Else
					Me._idArrivo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("detalle_arrivo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_llegadaDestino", Storage:="_viaje", ThisKey:="idViaje", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.llegadaDestinos.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.llegadaDestinos.Add(Me)
					Me._idViaje = value.id_viaje
				Else
					Me._idViaje = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.equipo_asignado")>  _
Partial Public Class equipo_asignado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_equipo_asignado As Integer
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _idEmpleado As System.Nullable(Of Integer)
	
	Private _ViajeId As System.Nullable(Of Integer)
	
	Private _cajaAsignadas As EntitySet(Of cajaAsignada)
	
	Private _recorridoEquipos As EntitySet(Of recorridoEquipo)
	
	Private _recorridoEquipo1s As EntitySet(Of recorridoEquipo1)
	
	Private _rendimientos As EntitySet(Of rendimiento)
	
	Private _trayectos_asignados As EntitySet(Of trayectos_asignado)
	
	Private _recargas_combustibles As EntitySet(Of recargas_combustible)
	
	Private _empleado As EntityRef(Of empleado)
	
	Private _equipo_operacion As EntityRef(Of equipo_operacion)
	
	Private _viaje As EntityRef(Of viaje)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_equipo_asignadoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_equipo_asignadoChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub OnidEmpleadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEmpleadoChanged()
    End Sub
    Partial Private Sub OnViajeIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnViajeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cajaAsignadas = New EntitySet(Of cajaAsignada)(AddressOf Me.attach_cajaAsignadas, AddressOf Me.detach_cajaAsignadas)
		Me._recorridoEquipos = New EntitySet(Of recorridoEquipo)(AddressOf Me.attach_recorridoEquipos, AddressOf Me.detach_recorridoEquipos)
		Me._recorridoEquipo1s = New EntitySet(Of recorridoEquipo1)(AddressOf Me.attach_recorridoEquipo1s, AddressOf Me.detach_recorridoEquipo1s)
		Me._rendimientos = New EntitySet(Of rendimiento)(AddressOf Me.attach_rendimientos, AddressOf Me.detach_rendimientos)
		Me._trayectos_asignados = New EntitySet(Of trayectos_asignado)(AddressOf Me.attach_trayectos_asignados, AddressOf Me.detach_trayectos_asignados)
		Me._recargas_combustibles = New EntitySet(Of recargas_combustible)(AddressOf Me.attach_recargas_combustibles, AddressOf Me.detach_recargas_combustibles)
		Me._empleado = CType(Nothing, EntityRef(Of empleado))
		Me._equipo_operacion = CType(Nothing, EntityRef(Of equipo_operacion))
		Me._viaje = CType(Nothing, EntityRef(Of viaje))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo_asignado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_equipo_asignado() As Integer
		Get
			Return Me._id_equipo_asignado
		End Get
		Set
			If ((Me._id_equipo_asignado = value)  _
						= false) Then
				Me.Onid_equipo_asignadoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo_asignado = value
				Me.SendPropertyChanged("id_equipo_asignado")
				Me.Onid_equipo_asignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				If Me._equipo_operacion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEmpleado", DbType:="Int")>  _
	Public Property idEmpleado() As System.Nullable(Of Integer)
		Get
			Return Me._idEmpleado
		End Get
		Set
			If (Me._idEmpleado.Equals(value) = false) Then
				If Me._empleado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEmpleadoChanging(value)
				Me.SendPropertyChanging
				Me._idEmpleado = value
				Me.SendPropertyChanged("idEmpleado")
				Me.OnidEmpleadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ViajeId", DbType:="Int")>  _
	Public Property ViajeId() As System.Nullable(Of Integer)
		Get
			Return Me._ViajeId
		End Get
		Set
			If (Me._ViajeId.Equals(value) = false) Then
				If Me._viaje.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnViajeIdChanging(value)
				Me.SendPropertyChanging
				Me._ViajeId = value
				Me.SendPropertyChanged("ViajeId")
				Me.OnViajeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_cajaAsignada", Storage:="_cajaAsignadas", ThisKey:="id_equipo_asignado", OtherKey:="EquipoAsignadoId")>  _
	Public Property cajaAsignadas() As EntitySet(Of cajaAsignada)
		Get
			Return Me._cajaAsignadas
		End Get
		Set
			Me._cajaAsignadas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recorridoEquipo", Storage:="_recorridoEquipos", ThisKey:="id_equipo_asignado", OtherKey:="idEquipoAsignado")>  _
	Public Property recorridoEquipos() As EntitySet(Of recorridoEquipo)
		Get
			Return Me._recorridoEquipos
		End Get
		Set
			Me._recorridoEquipos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recorridoEquipo1", Storage:="_recorridoEquipo1s", ThisKey:="id_equipo_asignado", OtherKey:="idEquipoAsignado")>  _
	Public Property recorridoEquipo1s() As EntitySet(Of recorridoEquipo1)
		Get
			Return Me._recorridoEquipo1s
		End Get
		Set
			Me._recorridoEquipo1s.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_rendimiento", Storage:="_rendimientos", ThisKey:="id_equipo_asignado", OtherKey:="idEquipoAsignado")>  _
	Public Property rendimientos() As EntitySet(Of rendimiento)
		Get
			Return Me._rendimientos
		End Get
		Set
			Me._rendimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_trayectos_asignado", Storage:="_trayectos_asignados", ThisKey:="id_equipo_asignado", OtherKey:="EquipoAsignadoId")>  _
	Public Property trayectos_asignados() As EntitySet(Of trayectos_asignado)
		Get
			Return Me._trayectos_asignados
		End Get
		Set
			Me._trayectos_asignados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recargas_combustible", Storage:="_recargas_combustibles", ThisKey:="id_equipo_asignado", OtherKey:="idEquipoAsignado")>  _
	Public Property recargas_combustibles() As EntitySet(Of recargas_combustible)
		Get
			Return Me._recargas_combustibles
		End Get
		Set
			Me._recargas_combustibles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="empleado_equipo_asignado", Storage:="_empleado", ThisKey:="idEmpleado", OtherKey:="id_empleado", IsForeignKey:=true)>  _
	Public Property empleado() As empleado
		Get
			Return Me._empleado.Entity
		End Get
		Set
			Dim previousValue As empleado = Me._empleado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._empleado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._empleado.Entity = Nothing
					previousValue.equipo_asignados.Remove(Me)
				End If
				Me._empleado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_asignados.Add(Me)
					Me._idEmpleado = value.id_empleado
				Else
					Me._idEmpleado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("empleado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_operacion_equipo_asignado", Storage:="_equipo_operacion", ThisKey:="id_equipo", OtherKey:="id_equipo", IsForeignKey:=true)>  _
	Public Property equipo_operacion() As equipo_operacion
		Get
			Return Me._equipo_operacion.Entity
		End Get
		Set
			Dim previousValue As equipo_operacion = Me._equipo_operacion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_operacion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_operacion.Entity = Nothing
					previousValue.equipo_asignados.Remove(Me)
				End If
				Me._equipo_operacion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_asignados.Add(Me)
					Me._id_equipo = value.id_equipo
				Else
					Me._id_equipo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_operacion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_equipo_asignado", Storage:="_viaje", ThisKey:="ViajeId", OtherKey:="id_viaje", IsForeignKey:=true)>  _
	Public Property viaje() As viaje
		Get
			Return Me._viaje.Entity
		End Get
		Set
			Dim previousValue As viaje = Me._viaje.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._viaje.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._viaje.Entity = Nothing
					previousValue.equipo_asignados.Remove(Me)
				End If
				Me._viaje.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.equipo_asignados.Add(Me)
					Me._ViajeId = value.id_viaje
				Else
					Me._ViajeId = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("viaje")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_cajaAsignadas(ByVal entity As cajaAsignada)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_cajaAsignadas(ByVal entity As cajaAsignada)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
	
	Private Sub attach_recorridoEquipos(ByVal entity As recorridoEquipo)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_recorridoEquipos(ByVal entity As recorridoEquipo)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
	
	Private Sub attach_recorridoEquipo1s(ByVal entity As recorridoEquipo1)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_recorridoEquipo1s(ByVal entity As recorridoEquipo1)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
	
	Private Sub attach_rendimientos(ByVal entity As rendimiento)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_rendimientos(ByVal entity As rendimiento)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
	
	Private Sub attach_trayectos_asignados(ByVal entity As trayectos_asignado)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_trayectos_asignados(ByVal entity As trayectos_asignado)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
	
	Private Sub attach_recargas_combustibles(ByVal entity As recargas_combustible)
		Me.SendPropertyChanging
		entity.equipo_asignado = Me
	End Sub
	
	Private Sub detach_recargas_combustibles(ByVal entity As recargas_combustible)
		Me.SendPropertyChanging
		entity.equipo_asignado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cotizaciones")>  _
Partial Public Class cotizacione
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_cotizacion As Integer
	
	Private _id_contacto As System.Nullable(Of Integer)
	
	Private _vigencia As System.Nullable(Of Date)
	
	Private _ano As System.Nullable(Of Integer)
	
	Private _consecutivo As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _fecha_realizacion As System.Nullable(Of Date)
	
	Private _fechaCaducidadPrecio As System.Nullable(Of Date)
	
	Private _enviadoA As String
	
	Private _solicitudCotizacions As EntitySet(Of solicitudCotizacion)
	
	Private _precios As EntitySet(Of precio)
	
	Private _contacto As EntityRef(Of contacto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_cotizacionChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_cotizacionChanged()
    End Sub
    Partial Private Sub Onid_contactoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_contactoChanged()
    End Sub
    Partial Private Sub OnvigenciaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnvigenciaChanged()
    End Sub
    Partial Private Sub OnanoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnanoChanged()
    End Sub
    Partial Private Sub OnconsecutivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnconsecutivoChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onfecha_realizacionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_realizacionChanged()
    End Sub
    Partial Private Sub OnfechaCaducidadPrecioChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaCaducidadPrecioChanged()
    End Sub
    Partial Private Sub OnenviadoAChanging(value As String)
    End Sub
    Partial Private Sub OnenviadoAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._solicitudCotizacions = New EntitySet(Of solicitudCotizacion)(AddressOf Me.attach_solicitudCotizacions, AddressOf Me.detach_solicitudCotizacions)
		Me._precios = New EntitySet(Of precio)(AddressOf Me.attach_precios, AddressOf Me.detach_precios)
		Me._contacto = CType(Nothing, EntityRef(Of contacto))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_cotizacion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_cotizacion() As Integer
		Get
			Return Me._id_cotizacion
		End Get
		Set
			If ((Me._id_cotizacion = value)  _
						= false) Then
				Me.Onid_cotizacionChanging(value)
				Me.SendPropertyChanging
				Me._id_cotizacion = value
				Me.SendPropertyChanged("id_cotizacion")
				Me.Onid_cotizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_contacto", DbType:="Int")>  _
	Public Property id_contacto() As System.Nullable(Of Integer)
		Get
			Return Me._id_contacto
		End Get
		Set
			If (Me._id_contacto.Equals(value) = false) Then
				If Me._contacto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_contactoChanging(value)
				Me.SendPropertyChanging
				Me._id_contacto = value
				Me.SendPropertyChanged("id_contacto")
				Me.Onid_contactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vigencia", DbType:="SmallDateTime")>  _
	Public Property vigencia() As System.Nullable(Of Date)
		Get
			Return Me._vigencia
		End Get
		Set
			If (Me._vigencia.Equals(value) = false) Then
				Me.OnvigenciaChanging(value)
				Me.SendPropertyChanging
				Me._vigencia = value
				Me.SendPropertyChanged("vigencia")
				Me.OnvigenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ano", DbType:="Int")>  _
	Public Property ano() As System.Nullable(Of Integer)
		Get
			Return Me._ano
		End Get
		Set
			If (Me._ano.Equals(value) = false) Then
				Me.OnanoChanging(value)
				Me.SendPropertyChanging
				Me._ano = value
				Me.SendPropertyChanged("ano")
				Me.OnanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_consecutivo", DbType:="Int")>  _
	Public Property consecutivo() As System.Nullable(Of Integer)
		Get
			Return Me._consecutivo
		End Get
		Set
			If (Me._consecutivo.Equals(value) = false) Then
				Me.OnconsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._consecutivo = value
				Me.SendPropertyChanged("consecutivo")
				Me.OnconsecutivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha_realizacion", DbType:="SmallDateTime")>  _
	Public Property fecha_realizacion() As System.Nullable(Of Date)
		Get
			Return Me._fecha_realizacion
		End Get
		Set
			If (Me._fecha_realizacion.Equals(value) = false) Then
				Me.Onfecha_realizacionChanging(value)
				Me.SendPropertyChanging
				Me._fecha_realizacion = value
				Me.SendPropertyChanged("fecha_realizacion")
				Me.Onfecha_realizacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaCaducidadPrecio", DbType:="SmallDateTime")>  _
	Public Property fechaCaducidadPrecio() As System.Nullable(Of Date)
		Get
			Return Me._fechaCaducidadPrecio
		End Get
		Set
			If (Me._fechaCaducidadPrecio.Equals(value) = false) Then
				Me.OnfechaCaducidadPrecioChanging(value)
				Me.SendPropertyChanging
				Me._fechaCaducidadPrecio = value
				Me.SendPropertyChanged("fechaCaducidadPrecio")
				Me.OnfechaCaducidadPrecioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enviadoA", DbType:="NVarChar(MAX)")>  _
	Public Property enviadoA() As String
		Get
			Return Me._enviadoA
		End Get
		Set
			If (String.Equals(Me._enviadoA, value) = false) Then
				Me.OnenviadoAChanging(value)
				Me.SendPropertyChanging
				Me._enviadoA = value
				Me.SendPropertyChanged("enviadoA")
				Me.OnenviadoAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cotizacione_solicitudCotizacion", Storage:="_solicitudCotizacions", ThisKey:="id_cotizacion", OtherKey:="idCotizacion")>  _
	Public Property solicitudCotizacions() As EntitySet(Of solicitudCotizacion)
		Get
			Return Me._solicitudCotizacions
		End Get
		Set
			Me._solicitudCotizacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cotizacione_precio", Storage:="_precios", ThisKey:="id_cotizacion", OtherKey:="id_cotizacion")>  _
	Public Property precios() As EntitySet(Of precio)
		Get
			Return Me._precios
		End Get
		Set
			Me._precios.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_cotizacione", Storage:="_contacto", ThisKey:="id_contacto", OtherKey:="id_contacto", IsForeignKey:=true)>  _
	Public Property contacto() As contacto
		Get
			Return Me._contacto.Entity
		End Get
		Set
			Dim previousValue As contacto = Me._contacto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._contacto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._contacto.Entity = Nothing
					previousValue.cotizaciones.Remove(Me)
				End If
				Me._contacto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cotizaciones.Add(Me)
					Me._id_contacto = value.id_contacto
				Else
					Me._id_contacto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("contacto")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_solicitudCotizacions(ByVal entity As solicitudCotizacion)
		Me.SendPropertyChanging
		entity.cotizacione = Me
	End Sub
	
	Private Sub detach_solicitudCotizacions(ByVal entity As solicitudCotizacion)
		Me.SendPropertyChanging
		entity.cotizacione = Nothing
	End Sub
	
	Private Sub attach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.cotizacione = Me
	End Sub
	
	Private Sub detach_precios(ByVal entity As precio)
		Me.SendPropertyChanging
		entity.cotizacione = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.recargas_combustible")>  _
Partial Public Class recargas_combustible
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_recarga As Integer
	
	Private _id_lugar As System.Nullable(Of Integer)
	
	Private _lts As System.Nullable(Of Double)
	
	Private _id_equipo As System.Nullable(Of Integer)
	
	Private _id_chofer As System.Nullable(Of Integer)
	
	Private _idEquipoAsignado As System.Nullable(Of Integer)
	
	Private _grupo As System.Nullable(Of Integer)
	
	Private _recargaSinOrden As System.Nullable(Of Boolean)
	
	Private _monto As System.Nullable(Of Double)
	
	Private _ticket As String
	
	Private _odometro As System.Nullable(Of Integer)
	
	Private _fechaRecarga As System.Nullable(Of Date)
	
	Private _responsable As String
	
	Private _idUso As System.Nullable(Of Integer)
	
    Private _en_galones As Boolean

    Private _recargas_internas As EntitySet(Of recargas_interna)
	
	Private _recargas_externas As EntitySet(Of recargas_externa)
	
	Private _equipo_asignado As EntityRef(Of equipo_asignado)
	
	Private _lugares_recarga As EntityRef(Of lugares_recarga)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_recargaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_recargaChanged()
    End Sub
    Partial Private Sub Onid_lugarChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_lugarChanged()
    End Sub
    Partial Private Sub OnltsChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnltsChanged()
    End Sub
    Partial Private Sub Onid_equipoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_equipoChanged()
    End Sub
    Partial Private Sub Onid_choferChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_choferChanged()
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEquipoAsignadoChanged()
    End Sub
    Partial Private Sub OngrupoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OngrupoChanged()
    End Sub
    Partial Private Sub OnrecargaSinOrdenChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnrecargaSinOrdenChanged()
    End Sub
    Partial Private Sub OnmontoChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnmontoChanged()
    End Sub
    Partial Private Sub OnticketChanging(value As String)
    End Sub
    Partial Private Sub OnticketChanged()
    End Sub
    Partial Private Sub OnodometroChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnodometroChanged()
    End Sub
    Partial Private Sub OnfechaRecargaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaRecargaChanged()
    End Sub
    Partial Private Sub OnresponsableChanging(value As String)
    End Sub
    Partial Private Sub OnresponsableChanged()
    End Sub
    Partial Private Sub OnidUsoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidUsoChanged()
    End Sub
    Partial Private Sub Onen_galonesChanging(value As Boolean)
    End Sub
    Partial Private Sub Onen_galonesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._recargas_internas = New EntitySet(Of recargas_interna)(AddressOf Me.attach_recargas_internas, AddressOf Me.detach_recargas_internas)
		Me._recargas_externas = New EntitySet(Of recargas_externa)(AddressOf Me.attach_recargas_externas, AddressOf Me.detach_recargas_externas)
		Me._equipo_asignado = CType(Nothing, EntityRef(Of equipo_asignado))
		Me._lugares_recarga = CType(Nothing, EntityRef(Of lugares_recarga))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_recarga", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_recarga() As Integer
		Get
			Return Me._id_recarga
		End Get
		Set
			If ((Me._id_recarga = value)  _
						= false) Then
				Me.Onid_recargaChanging(value)
				Me.SendPropertyChanging
				Me._id_recarga = value
				Me.SendPropertyChanged("id_recarga")
				Me.Onid_recargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lugar", DbType:="Int")>  _
	Public Property id_lugar() As System.Nullable(Of Integer)
		Get
			Return Me._id_lugar
		End Get
		Set
			If (Me._id_lugar.Equals(value) = false) Then
				If Me._lugares_recarga.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_lugarChanging(value)
				Me.SendPropertyChanging
				Me._id_lugar = value
				Me.SendPropertyChanged("id_lugar")
				Me.Onid_lugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lts", DbType:="Float")>  _
	Public Property lts() As System.Nullable(Of Double)
		Get
			Return Me._lts
		End Get
		Set
			If (Me._lts.Equals(value) = false) Then
				Me.OnltsChanging(value)
				Me.SendPropertyChanging
				Me._lts = value
				Me.SendPropertyChanged("lts")
				Me.OnltsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_equipo", DbType:="Int")>  _
	Public Property id_equipo() As System.Nullable(Of Integer)
		Get
			Return Me._id_equipo
		End Get
		Set
			If (Me._id_equipo.Equals(value) = false) Then
				Me.Onid_equipoChanging(value)
				Me.SendPropertyChanging
				Me._id_equipo = value
				Me.SendPropertyChanged("id_equipo")
				Me.Onid_equipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_chofer", DbType:="Int")>  _
	Public Property id_chofer() As System.Nullable(Of Integer)
		Get
			Return Me._id_chofer
		End Get
		Set
			If (Me._id_chofer.Equals(value) = false) Then
				Me.Onid_choferChanging(value)
				Me.SendPropertyChanging
				Me._id_chofer = value
				Me.SendPropertyChanged("id_chofer")
				Me.Onid_choferChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEquipoAsignado", DbType:="Int")>  _
	Public Property idEquipoAsignado() As System.Nullable(Of Integer)
		Get
			Return Me._idEquipoAsignado
		End Get
		Set
			If (Me._idEquipoAsignado.Equals(value) = false) Then
				If Me._equipo_asignado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnidEquipoAsignadoChanging(value)
				Me.SendPropertyChanging
				Me._idEquipoAsignado = value
				Me.SendPropertyChanged("idEquipoAsignado")
				Me.OnidEquipoAsignadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grupo", DbType:="Int")>  _
	Public Property grupo() As System.Nullable(Of Integer)
		Get
			Return Me._grupo
		End Get
		Set
			If (Me._grupo.Equals(value) = false) Then
				Me.OngrupoChanging(value)
				Me.SendPropertyChanging
				Me._grupo = value
				Me.SendPropertyChanged("grupo")
				Me.OngrupoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recargaSinOrden", DbType:="Bit")>  _
	Public Property recargaSinOrden() As System.Nullable(Of Boolean)
		Get
			Return Me._recargaSinOrden
		End Get
		Set
			If (Me._recargaSinOrden.Equals(value) = false) Then
				Me.OnrecargaSinOrdenChanging(value)
				Me.SendPropertyChanging
				Me._recargaSinOrden = value
				Me.SendPropertyChanged("recargaSinOrden")
				Me.OnrecargaSinOrdenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_monto", DbType:="Float")>  _
	Public Property monto() As System.Nullable(Of Double)
		Get
			Return Me._monto
		End Get
		Set
			If (Me._monto.Equals(value) = false) Then
				Me.OnmontoChanging(value)
				Me.SendPropertyChanging
				Me._monto = value
				Me.SendPropertyChanged("monto")
				Me.OnmontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ticket", DbType:="NVarChar(50)")>  _
	Public Property ticket() As String
		Get
			Return Me._ticket
		End Get
		Set
			If (String.Equals(Me._ticket, value) = false) Then
				Me.OnticketChanging(value)
				Me.SendPropertyChanging
				Me._ticket = value
				Me.SendPropertyChanged("ticket")
				Me.OnticketChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_odometro", DbType:="Int")>  _
	Public Property odometro() As System.Nullable(Of Integer)
		Get
			Return Me._odometro
		End Get
		Set
			If (Me._odometro.Equals(value) = false) Then
				Me.OnodometroChanging(value)
				Me.SendPropertyChanging
				Me._odometro = value
				Me.SendPropertyChanged("odometro")
				Me.OnodometroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaRecarga", DbType:="DateTime")>  _
	Public Property fechaRecarga() As System.Nullable(Of Date)
		Get
			Return Me._fechaRecarga
		End Get
		Set
			If (Me._fechaRecarga.Equals(value) = false) Then
				Me.OnfechaRecargaChanging(value)
				Me.SendPropertyChanging
				Me._fechaRecarga = value
				Me.SendPropertyChanged("fechaRecarga")
				Me.OnfechaRecargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_responsable", DbType:="NVarChar(250)")>  _
	Public Property responsable() As String
		Get
			Return Me._responsable
		End Get
		Set
			If (String.Equals(Me._responsable, value) = false) Then
				Me.OnresponsableChanging(value)
				Me.SendPropertyChanging
				Me._responsable = value
				Me.SendPropertyChanged("responsable")
				Me.OnresponsableChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idUso", DbType:="Int")>  _
	Public Property idUso() As System.Nullable(Of Integer)
		Get
			Return Me._idUso
		End Get
		Set
			If (Me._idUso.Equals(value) = false) Then
				Me.OnidUsoChanging(value)
				Me.SendPropertyChanging
				Me._idUso = value
				Me.SendPropertyChanged("idUso")
				Me.OnidUsoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_en_galones", DbType:="Bit NOT NULL")>  _
	Public Property en_galones() As Boolean
		Get
			Return Me._en_galones
		End Get
		Set
			If ((Me._en_galones = value)  _
						= false) Then
				Me.Onen_galonesChanging(value)
				Me.SendPropertyChanging
				Me._en_galones = value
				Me.SendPropertyChanged("en_galones")
				Me.Onen_galonesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="recargas_combustible_recargas_interna", Storage:="_recargas_internas", ThisKey:="id_recarga", OtherKey:="id_recarga")>  _
	Public Property recargas_internas() As EntitySet(Of recargas_interna)
		Get
			Return Me._recargas_internas
		End Get
		Set
			Me._recargas_internas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="recargas_combustible_recargas_externa", Storage:="_recargas_externas", ThisKey:="id_recarga", OtherKey:="id_recarga")>  _
	Public Property recargas_externas() As EntitySet(Of recargas_externa)
		Get
			Return Me._recargas_externas
		End Get
		Set
			Me._recargas_externas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="equipo_asignado_recargas_combustible", Storage:="_equipo_asignado", ThisKey:="idEquipoAsignado", OtherKey:="id_equipo_asignado", IsForeignKey:=true)>  _
	Public Property equipo_asignado() As equipo_asignado
		Get
			Return Me._equipo_asignado.Entity
		End Get
		Set
			Dim previousValue As equipo_asignado = Me._equipo_asignado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._equipo_asignado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._equipo_asignado.Entity = Nothing
					previousValue.recargas_combustibles.Remove(Me)
				End If
				Me._equipo_asignado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_combustibles.Add(Me)
					Me._idEquipoAsignado = value.id_equipo_asignado
				Else
					Me._idEquipoAsignado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("equipo_asignado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lugares_recarga_recargas_combustible", Storage:="_lugares_recarga", ThisKey:="id_lugar", OtherKey:="id_lugar", IsForeignKey:=true)>  _
	Public Property lugares_recarga() As lugares_recarga
		Get
			Return Me._lugares_recarga.Entity
		End Get
		Set
			Dim previousValue As lugares_recarga = Me._lugares_recarga.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._lugares_recarga.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._lugares_recarga.Entity = Nothing
					previousValue.recargas_combustibles.Remove(Me)
				End If
				Me._lugares_recarga.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.recargas_combustibles.Add(Me)
					Me._id_lugar = value.id_lugar
				Else
					Me._id_lugar = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("lugares_recarga")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_recargas_internas(ByVal entity As recargas_interna)
		Me.SendPropertyChanging
		entity.recargas_combustible = Me
	End Sub
	
	Private Sub detach_recargas_internas(ByVal entity As recargas_interna)
		Me.SendPropertyChanging
		entity.recargas_combustible = Nothing
	End Sub
	
	Private Sub attach_recargas_externas(ByVal entity As recargas_externa)
		Me.SendPropertyChanging
		entity.recargas_combustible = Me
	End Sub
	
	Private Sub detach_recargas_externas(ByVal entity As recargas_externa)
		Me.SendPropertyChanging
		entity.recargas_combustible = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.viajes")>  _
Partial Public Class viaje
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _num_viaje As System.Nullable(Of Integer)
	
	Private _id_status As System.Nullable(Of Integer)
	
	Private _id_contacto As System.Nullable(Of Integer)
	
	Private _id_relacion As System.Nullable(Of Integer)
	
	Private _id_orden As System.Nullable(Of Integer)
	
	Private _id_viaje As Integer
	
	Private _verificado As System.Nullable(Of Boolean)
	
	Private _facturado As System.Nullable(Of Boolean)
	
	Private _remision As System.Nullable(Of Boolean)
	
	Private _inicioReal As System.Nullable(Of Date)
	
	Private _pendienteCosteo As System.Nullable(Of Boolean)
	
	Private _optimizado As System.Nullable(Of Boolean)
	
	Private _fechaCierre As System.Nullable(Of Date)
	
	Private _observaciones As String
	
	Private _fechas_viajes As EntitySet(Of fechas_viaje)
	
	Private _facturacions As EntitySet(Of facturacion)
	
	Private _recolecciones As EntitySet(Of recoleccione)
	
	Private _seguimientos As EntitySet(Of seguimiento)
	
	Private _guias As EntitySet(Of guia)
	
	Private _margens As EntitySet(Of margen)
	
	Private _seguimientoPorRecorrers As EntitySet(Of seguimientoPorRecorrer)
	
	Private _llegadaDestinos As EntitySet(Of llegadaDestino)
	
	Private _equipo_asignados As EntitySet(Of equipo_asignado)
	
	Private _contacto As EntityRef(Of contacto)
	
	Private _Ordene As EntityRef(Of Ordene)
	
	Private _precio As EntityRef(Of precio)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onnum_viajeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onnum_viajeChanged()
    End Sub
    Partial Private Sub Onid_statusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_statusChanged()
    End Sub
    Partial Private Sub Onid_contactoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_contactoChanged()
    End Sub
    Partial Private Sub Onid_relacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_relacionChanged()
    End Sub
    Partial Private Sub Onid_ordenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_ordenChanged()
    End Sub
    Partial Private Sub Onid_viajeChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_viajeChanged()
    End Sub
    Partial Private Sub OnverificadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnverificadoChanged()
    End Sub
    Partial Private Sub OnfacturadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnfacturadoChanged()
    End Sub
    Partial Private Sub OnremisionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnremisionChanged()
    End Sub
    Partial Private Sub OninicioRealChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OninicioRealChanged()
    End Sub
    Partial Private Sub OnpendienteCosteoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnpendienteCosteoChanged()
    End Sub
    Partial Private Sub OnoptimizadoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnoptimizadoChanged()
    End Sub
    Partial Private Sub OnfechaCierreChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaCierreChanged()
    End Sub
    Partial Private Sub OnobservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._fechas_viajes = New EntitySet(Of fechas_viaje)(AddressOf Me.attach_fechas_viajes, AddressOf Me.detach_fechas_viajes)
		Me._facturacions = New EntitySet(Of facturacion)(AddressOf Me.attach_facturacions, AddressOf Me.detach_facturacions)
		Me._recolecciones = New EntitySet(Of recoleccione)(AddressOf Me.attach_recolecciones, AddressOf Me.detach_recolecciones)
		Me._seguimientos = New EntitySet(Of seguimiento)(AddressOf Me.attach_seguimientos, AddressOf Me.detach_seguimientos)
		Me._guias = New EntitySet(Of guia)(AddressOf Me.attach_guias, AddressOf Me.detach_guias)
		Me._margens = New EntitySet(Of margen)(AddressOf Me.attach_margens, AddressOf Me.detach_margens)
		Me._seguimientoPorRecorrers = New EntitySet(Of seguimientoPorRecorrer)(AddressOf Me.attach_seguimientoPorRecorrers, AddressOf Me.detach_seguimientoPorRecorrers)
		Me._llegadaDestinos = New EntitySet(Of llegadaDestino)(AddressOf Me.attach_llegadaDestinos, AddressOf Me.detach_llegadaDestinos)
		Me._equipo_asignados = New EntitySet(Of equipo_asignado)(AddressOf Me.attach_equipo_asignados, AddressOf Me.detach_equipo_asignados)
		Me._contacto = CType(Nothing, EntityRef(Of contacto))
		Me._Ordene = CType(Nothing, EntityRef(Of Ordene))
		Me._precio = CType(Nothing, EntityRef(Of precio))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_num_viaje", DbType:="Int")>  _
	Public Property num_viaje() As System.Nullable(Of Integer)
		Get
			Return Me._num_viaje
		End Get
		Set
			If (Me._num_viaje.Equals(value) = false) Then
				Me.Onnum_viajeChanging(value)
				Me.SendPropertyChanging
				Me._num_viaje = value
				Me.SendPropertyChanged("num_viaje")
				Me.Onnum_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_status", DbType:="Int")>  _
	Public Property id_status() As System.Nullable(Of Integer)
		Get
			Return Me._id_status
		End Get
		Set
			If (Me._id_status.Equals(value) = false) Then
				Me.Onid_statusChanging(value)
				Me.SendPropertyChanging
				Me._id_status = value
				Me.SendPropertyChanged("id_status")
				Me.Onid_statusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_contacto", DbType:="Int")>  _
	Public Property id_contacto() As System.Nullable(Of Integer)
		Get
			Return Me._id_contacto
		End Get
		Set
			If (Me._id_contacto.Equals(value) = false) Then
				If Me._contacto.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_contactoChanging(value)
				Me.SendPropertyChanging
				Me._id_contacto = value
				Me.SendPropertyChanged("id_contacto")
				Me.Onid_contactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_relacion", DbType:="Int")>  _
	Public Property id_relacion() As System.Nullable(Of Integer)
		Get
			Return Me._id_relacion
		End Get
		Set
			If (Me._id_relacion.Equals(value) = false) Then
				If Me._precio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_relacionChanging(value)
				Me.SendPropertyChanging
				Me._id_relacion = value
				Me.SendPropertyChanged("id_relacion")
				Me.Onid_relacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_orden", DbType:="Int")>  _
	Public Property id_orden() As System.Nullable(Of Integer)
		Get
			Return Me._id_orden
		End Get
		Set
			If (Me._id_orden.Equals(value) = false) Then
				If Me._Ordene.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_ordenChanging(value)
				Me.SendPropertyChanging
				Me._id_orden = value
				Me.SendPropertyChanged("id_orden")
				Me.Onid_ordenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_viaje", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_viaje() As Integer
		Get
			Return Me._id_viaje
		End Get
		Set
			If ((Me._id_viaje = value)  _
						= false) Then
				Me.Onid_viajeChanging(value)
				Me.SendPropertyChanging
				Me._id_viaje = value
				Me.SendPropertyChanged("id_viaje")
				Me.Onid_viajeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_verificado", DbType:="Bit")>  _
	Public Property verificado() As System.Nullable(Of Boolean)
		Get
			Return Me._verificado
		End Get
		Set
			If (Me._verificado.Equals(value) = false) Then
				Me.OnverificadoChanging(value)
				Me.SendPropertyChanging
				Me._verificado = value
				Me.SendPropertyChanged("verificado")
				Me.OnverificadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facturado", DbType:="Bit")>  _
	Public Property facturado() As System.Nullable(Of Boolean)
		Get
			Return Me._facturado
		End Get
		Set
			If (Me._facturado.Equals(value) = false) Then
				Me.OnfacturadoChanging(value)
				Me.SendPropertyChanging
				Me._facturado = value
				Me.SendPropertyChanged("facturado")
				Me.OnfacturadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_remision", DbType:="Bit")>  _
	Public Property remision() As System.Nullable(Of Boolean)
		Get
			Return Me._remision
		End Get
		Set
			If (Me._remision.Equals(value) = false) Then
				Me.OnremisionChanging(value)
				Me.SendPropertyChanging
				Me._remision = value
				Me.SendPropertyChanged("remision")
				Me.OnremisionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inicioReal", DbType:="SmallDateTime")>  _
	Public Property inicioReal() As System.Nullable(Of Date)
		Get
			Return Me._inicioReal
		End Get
		Set
			If (Me._inicioReal.Equals(value) = false) Then
				Me.OninicioRealChanging(value)
				Me.SendPropertyChanging
				Me._inicioReal = value
				Me.SendPropertyChanged("inicioReal")
				Me.OninicioRealChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pendienteCosteo", DbType:="Bit")>  _
	Public Property pendienteCosteo() As System.Nullable(Of Boolean)
		Get
			Return Me._pendienteCosteo
		End Get
		Set
			If (Me._pendienteCosteo.Equals(value) = false) Then
				Me.OnpendienteCosteoChanging(value)
				Me.SendPropertyChanging
				Me._pendienteCosteo = value
				Me.SendPropertyChanged("pendienteCosteo")
				Me.OnpendienteCosteoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_optimizado", DbType:="Bit")>  _
	Public Property optimizado() As System.Nullable(Of Boolean)
		Get
			Return Me._optimizado
		End Get
		Set
			If (Me._optimizado.Equals(value) = false) Then
				Me.OnoptimizadoChanging(value)
				Me.SendPropertyChanging
				Me._optimizado = value
				Me.SendPropertyChanged("optimizado")
				Me.OnoptimizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaCierre", DbType:="DateTime")>  _
	Public Property fechaCierre() As System.Nullable(Of Date)
		Get
			Return Me._fechaCierre
		End Get
		Set
			If (Me._fechaCierre.Equals(value) = false) Then
				Me.OnfechaCierreChanging(value)
				Me.SendPropertyChanging
				Me._fechaCierre = value
				Me.SendPropertyChanged("fechaCierre")
				Me.OnfechaCierreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observaciones", DbType:="VarChar(MAX)")>  _
	Public Property observaciones() As String
		Get
			Return Me._observaciones
		End Get
		Set
			If (String.Equals(Me._observaciones, value) = false) Then
				Me.OnobservacionesChanging(value)
				Me.SendPropertyChanging
				Me._observaciones = value
				Me.SendPropertyChanged("observaciones")
				Me.OnobservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_fechas_viaje", Storage:="_fechas_viajes", ThisKey:="id_viaje", OtherKey:="id_viaje")>  _
	Public Property fechas_viajes() As EntitySet(Of fechas_viaje)
		Get
			Return Me._fechas_viajes
		End Get
		Set
			Me._fechas_viajes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_facturacion", Storage:="_facturacions", ThisKey:="id_viaje", OtherKey:="id_viaje")>  _
	Public Property facturacions() As EntitySet(Of facturacion)
		Get
			Return Me._facturacions
		End Get
		Set
			Me._facturacions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_recoleccione", Storage:="_recolecciones", ThisKey:="id_viaje", OtherKey:="id_viaje")>  _
	Public Property recolecciones() As EntitySet(Of recoleccione)
		Get
			Return Me._recolecciones
		End Get
		Set
			Me._recolecciones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_seguimiento", Storage:="_seguimientos", ThisKey:="id_viaje", OtherKey:="id_viaje")>  _
	Public Property seguimientos() As EntitySet(Of seguimiento)
		Get
			Return Me._seguimientos
		End Get
		Set
			Me._seguimientos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_guia", Storage:="_guias", ThisKey:="id_viaje", OtherKey:="id_viaje")>  _
	Public Property guias() As EntitySet(Of guia)
		Get
			Return Me._guias
		End Get
		Set
			Me._guias.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_margen", Storage:="_margens", ThisKey:="id_viaje", OtherKey:="idViaje")>  _
	Public Property margens() As EntitySet(Of margen)
		Get
			Return Me._margens
		End Get
		Set
			Me._margens.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_seguimientoPorRecorrer", Storage:="_seguimientoPorRecorrers", ThisKey:="id_viaje", OtherKey:="idViaje")>  _
	Public Property seguimientoPorRecorrers() As EntitySet(Of seguimientoPorRecorrer)
		Get
			Return Me._seguimientoPorRecorrers
		End Get
		Set
			Me._seguimientoPorRecorrers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_llegadaDestino", Storage:="_llegadaDestinos", ThisKey:="id_viaje", OtherKey:="idViaje")>  _
	Public Property llegadaDestinos() As EntitySet(Of llegadaDestino)
		Get
			Return Me._llegadaDestinos
		End Get
		Set
			Me._llegadaDestinos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="viaje_equipo_asignado", Storage:="_equipo_asignados", ThisKey:="id_viaje", OtherKey:="ViajeId")>  _
	Public Property equipo_asignados() As EntitySet(Of equipo_asignado)
		Get
			Return Me._equipo_asignados
		End Get
		Set
			Me._equipo_asignados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="contacto_viaje", Storage:="_contacto", ThisKey:="id_contacto", OtherKey:="id_contacto", IsForeignKey:=true)>  _
	Public Property contacto() As contacto
		Get
			Return Me._contacto.Entity
		End Get
		Set
			Dim previousValue As contacto = Me._contacto.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._contacto.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._contacto.Entity = Nothing
					previousValue.viajes.Remove(Me)
				End If
				Me._contacto.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.viajes.Add(Me)
					Me._id_contacto = value.id_contacto
				Else
					Me._id_contacto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("contacto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Ordene_viaje", Storage:="_Ordene", ThisKey:="id_orden", OtherKey:="id_orden", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Ordene() As Ordene
		Get
			Return Me._Ordene.Entity
		End Get
		Set
			Dim previousValue As Ordene = Me._Ordene.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Ordene.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Ordene.Entity = Nothing
					previousValue.viajes.Remove(Me)
				End If
				Me._Ordene.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.viajes.Add(Me)
					Me._id_orden = value.id_orden
				Else
					Me._id_orden = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Ordene")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="precio_viaje", Storage:="_precio", ThisKey:="id_relacion", OtherKey:="id_relacion", IsForeignKey:=true)>  _
	Public Property precio() As precio
		Get
			Return Me._precio.Entity
		End Get
		Set
			Dim previousValue As precio = Me._precio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._precio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._precio.Entity = Nothing
					previousValue.viajes.Remove(Me)
				End If
				Me._precio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.viajes.Add(Me)
					Me._id_relacion = value.id_relacion
				Else
					Me._id_relacion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("precio")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_fechas_viajes(ByVal entity As fechas_viaje)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_fechas_viajes(ByVal entity As fechas_viaje)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_facturacions(ByVal entity As facturacion)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_facturacions(ByVal entity As facturacion)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_recolecciones(ByVal entity As recoleccione)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_recolecciones(ByVal entity As recoleccione)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_seguimientos(ByVal entity As seguimiento)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_seguimientos(ByVal entity As seguimiento)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_guias(ByVal entity As guia)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_guias(ByVal entity As guia)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_margens(ByVal entity As margen)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_margens(ByVal entity As margen)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_seguimientoPorRecorrers(ByVal entity As seguimientoPorRecorrer)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_seguimientoPorRecorrers(ByVal entity As seguimientoPorRecorrer)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_llegadaDestinos(ByVal entity As llegadaDestino)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_llegadaDestinos(ByVal entity As llegadaDestino)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
	
	Private Sub attach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.viaje = Me
	End Sub
	
	Private Sub detach_equipo_asignados(ByVal entity As equipo_asignado)
		Me.SendPropertyChanging
		entity.viaje = Nothing
	End Sub
End Class
