'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="tse_erp")>  _
Partial Public Class DataClasses2DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertincidente(instance As incidente)
    End Sub
  Partial Private Sub Updateincidente(instance As incidente)
    End Sub
  Partial Private Sub Deleteincidente(instance As incidente)
    End Sub
  Partial Private Sub Inserttipo_incidente(instance As tipo_incidente)
    End Sub
  Partial Private Sub Updatetipo_incidente(instance As tipo_incidente)
    End Sub
  Partial Private Sub Deletetipo_incidente(instance As tipo_incidente)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("tse_erpConnectionString2").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property parametros() As System.Data.Linq.Table(Of parametro)
		Get
			Return Me.GetTable(Of parametro)
		End Get
	End Property
	
	Public ReadOnly Property incidentes() As System.Data.Linq.Table(Of incidente)
		Get
			Return Me.GetTable(Of incidente)
		End Get
	End Property
	
	Public ReadOnly Property tipo_incidentes() As System.Data.Linq.Table(Of tipo_incidente)
		Get
			Return Me.GetTable(Of tipo_incidente)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="parametros")>  _
Partial Public Class parametro
	
	Private _variable As String
	
	Private _valor As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_variable", DbType:="NVarChar(250)")>  _
	Public Property variable() As String
		Get
			Return Me._variable
		End Get
		Set
			If (String.Equals(Me._variable, value) = false) Then
				Me._variable = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_valor", DbType:="NVarChar(50)")>  _
	Public Property valor() As String
		Get
			Return Me._valor
		End Get
		Set
			If (String.Equals(Me._valor, value) = false) Then
				Me._valor = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.incidentes")>  _
Partial Public Class incidente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _RoleId As System.Guid
	
	Private _incidente As String
	
	Private _fechaIncidente As Date
	
	Private _fechaPropuesta As System.Nullable(Of Date)
	
	Private _fechaRespuesta As System.Nullable(Of Date)
	
	Private _comentarios As String
	
	Private _idEstatus As System.Nullable(Of Integer)
	
	Private _accion As String
	
	Private _cuadrante As String
	
	Private _urgencia As System.Nullable(Of Integer)
	
	Private _importancia As System.Nullable(Of Integer)
	
	Private _estimado As System.Nullable(Of Integer)
	
	Private _id_tipo_incidente As System.Nullable(Of Integer)
	
	Private _tipo_incidente As EntityRef(Of tipo_incidente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnincidenteChanging(value As String)
    End Sub
    Partial Private Sub OnincidenteChanged()
    End Sub
    Partial Private Sub OnfechaIncidenteChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaIncidenteChanged()
    End Sub
    Partial Private Sub OnfechaPropuestaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaPropuestaChanged()
    End Sub
    Partial Private Sub OnfechaRespuestaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaRespuestaChanged()
    End Sub
    Partial Private Sub OncomentariosChanging(value As String)
    End Sub
    Partial Private Sub OncomentariosChanged()
    End Sub
    Partial Private Sub OnidEstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidEstatusChanged()
    End Sub
    Partial Private Sub OnaccionChanging(value As String)
    End Sub
    Partial Private Sub OnaccionChanged()
    End Sub
    Partial Private Sub OncuadranteChanging(value As String)
    End Sub
    Partial Private Sub OncuadranteChanged()
    End Sub
    Partial Private Sub OnurgenciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnurgenciaChanged()
    End Sub
    Partial Private Sub OnimportanciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnimportanciaChanged()
    End Sub
    Partial Private Sub OnestimadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnestimadoChanged()
    End Sub
    Partial Private Sub Onid_tipo_incidenteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_tipo_incidenteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tipo_incidente = CType(Nothing, EntityRef(Of tipo_incidente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_incidente", DbType:="NVarChar(350) NOT NULL", CanBeNull:=false)>  _
	Public Property incidente() As String
		Get
			Return Me._incidente
		End Get
		Set
			If (String.Equals(Me._incidente, value) = false) Then
				Me.OnincidenteChanging(value)
				Me.SendPropertyChanging
				Me._incidente = value
				Me.SendPropertyChanged("incidente")
				Me.OnincidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaIncidente", DbType:="DateTime NOT NULL")>  _
	Public Property fechaIncidente() As Date
		Get
			Return Me._fechaIncidente
		End Get
		Set
			If ((Me._fechaIncidente = value)  _
						= false) Then
				Me.OnfechaIncidenteChanging(value)
				Me.SendPropertyChanging
				Me._fechaIncidente = value
				Me.SendPropertyChanged("fechaIncidente")
				Me.OnfechaIncidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaPropuesta", DbType:="DateTime")>  _
	Public Property fechaPropuesta() As System.Nullable(Of Date)
		Get
			Return Me._fechaPropuesta
		End Get
		Set
			If (Me._fechaPropuesta.Equals(value) = false) Then
				Me.OnfechaPropuestaChanging(value)
				Me.SendPropertyChanging
				Me._fechaPropuesta = value
				Me.SendPropertyChanged("fechaPropuesta")
				Me.OnfechaPropuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaRespuesta", DbType:="DateTime")>  _
	Public Property fechaRespuesta() As System.Nullable(Of Date)
		Get
			Return Me._fechaRespuesta
		End Get
		Set
			If (Me._fechaRespuesta.Equals(value) = false) Then
				Me.OnfechaRespuestaChanging(value)
				Me.SendPropertyChanging
				Me._fechaRespuesta = value
				Me.SendPropertyChanged("fechaRespuesta")
				Me.OnfechaRespuestaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_comentarios", DbType:="NVarChar(MAX)")>  _
	Public Property comentarios() As String
		Get
			Return Me._comentarios
		End Get
		Set
			If (String.Equals(Me._comentarios, value) = false) Then
				Me.OncomentariosChanging(value)
				Me.SendPropertyChanging
				Me._comentarios = value
				Me.SendPropertyChanged("comentarios")
				Me.OncomentariosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_idEstatus", DbType:="Int")>  _
	Public Property idEstatus() As System.Nullable(Of Integer)
		Get
			Return Me._idEstatus
		End Get
		Set
			If (Me._idEstatus.Equals(value) = false) Then
				Me.OnidEstatusChanging(value)
				Me.SendPropertyChanging
				Me._idEstatus = value
				Me.SendPropertyChanged("idEstatus")
				Me.OnidEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accion", DbType:="NVarChar(MAX)")>  _
	Public Property accion() As String
		Get
			Return Me._accion
		End Get
		Set
			If (String.Equals(Me._accion, value) = false) Then
				Me.OnaccionChanging(value)
				Me.SendPropertyChanging
				Me._accion = value
				Me.SendPropertyChanged("accion")
				Me.OnaccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cuadrante", DbType:="VarChar(50)")>  _
	Public Property cuadrante() As String
		Get
			Return Me._cuadrante
		End Get
		Set
			If (String.Equals(Me._cuadrante, value) = false) Then
				Me.OncuadranteChanging(value)
				Me.SendPropertyChanging
				Me._cuadrante = value
				Me.SendPropertyChanged("cuadrante")
				Me.OncuadranteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_urgencia", DbType:="Int")>  _
	Public Property urgencia() As System.Nullable(Of Integer)
		Get
			Return Me._urgencia
		End Get
		Set
			If (Me._urgencia.Equals(value) = false) Then
				Me.OnurgenciaChanging(value)
				Me.SendPropertyChanging
				Me._urgencia = value
				Me.SendPropertyChanged("urgencia")
				Me.OnurgenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_importancia", DbType:="Int")>  _
	Public Property importancia() As System.Nullable(Of Integer)
		Get
			Return Me._importancia
		End Get
		Set
			If (Me._importancia.Equals(value) = false) Then
				Me.OnimportanciaChanging(value)
				Me.SendPropertyChanging
				Me._importancia = value
				Me.SendPropertyChanged("importancia")
				Me.OnimportanciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estimado", DbType:="Int")>  _
	Public Property estimado() As System.Nullable(Of Integer)
		Get
			Return Me._estimado
		End Get
		Set
			If (Me._estimado.Equals(value) = false) Then
				Me.OnestimadoChanging(value)
				Me.SendPropertyChanging
				Me._estimado = value
				Me.SendPropertyChanged("estimado")
				Me.OnestimadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_incidente", DbType:="Int")>  _
	Public Property id_tipo_incidente() As System.Nullable(Of Integer)
		Get
			Return Me._id_tipo_incidente
		End Get
		Set
			If (Me._id_tipo_incidente.Equals(value) = false) Then
				If Me._tipo_incidente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_tipo_incidenteChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_incidente = value
				Me.SendPropertyChanged("id_tipo_incidente")
				Me.Onid_tipo_incidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_incidente_incidente", Storage:="_tipo_incidente", ThisKey:="id_tipo_incidente", OtherKey:="id_tipo_incidente", IsForeignKey:=true)>  _
	Public Property tipo_incidente() As tipo_incidente
		Get
			Return Me._tipo_incidente.Entity
		End Get
		Set
			Dim previousValue As tipo_incidente = Me._tipo_incidente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tipo_incidente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tipo_incidente.Entity = Nothing
					previousValue.incidentes.Remove(Me)
				End If
				Me._tipo_incidente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.incidentes.Add(Me)
					Me._id_tipo_incidente = value.id_tipo_incidente
				Else
					Me._id_tipo_incidente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("tipo_incidente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipo_incidente")>  _
Partial Public Class tipo_incidente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_tipo_incidente As Integer
	
	Private _tipo_incidente As String
	
	Private _inactivo As System.Nullable(Of Boolean)
	
	Private _incidentes As EntitySet(Of incidente)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_tipo_incidenteChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_tipo_incidenteChanged()
    End Sub
    Partial Private Sub Ontipo_incidenteChanging(value As String)
    End Sub
    Partial Private Sub Ontipo_incidenteChanged()
    End Sub
    Partial Private Sub OninactivoChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OninactivoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._incidentes = New EntitySet(Of incidente)(AddressOf Me.attach_incidentes, AddressOf Me.detach_incidentes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_tipo_incidente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_tipo_incidente() As Integer
		Get
			Return Me._id_tipo_incidente
		End Get
		Set
			If ((Me._id_tipo_incidente = value)  _
						= false) Then
				Me.Onid_tipo_incidenteChanging(value)
				Me.SendPropertyChanging
				Me._id_tipo_incidente = value
				Me.SendPropertyChanged("id_tipo_incidente")
				Me.Onid_tipo_incidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tipo_incidente", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property tipo_incidente() As String
		Get
			Return Me._tipo_incidente
		End Get
		Set
			If (String.Equals(Me._tipo_incidente, value) = false) Then
				Me.Ontipo_incidenteChanging(value)
				Me.SendPropertyChanging
				Me._tipo_incidente = value
				Me.SendPropertyChanged("tipo_incidente")
				Me.Ontipo_incidenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_inactivo", DbType:="Bit")>  _
	Public Property inactivo() As System.Nullable(Of Boolean)
		Get
			Return Me._inactivo
		End Get
		Set
			If (Me._inactivo.Equals(value) = false) Then
				Me.OninactivoChanging(value)
				Me.SendPropertyChanging
				Me._inactivo = value
				Me.SendPropertyChanged("inactivo")
				Me.OninactivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tipo_incidente_incidente", Storage:="_incidentes", ThisKey:="id_tipo_incidente", OtherKey:="id_tipo_incidente")>  _
	Public Property incidentes() As EntitySet(Of incidente)
		Get
			Return Me._incidentes
		End Get
		Set
			Me._incidentes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_incidentes(ByVal entity As incidente)
		Me.SendPropertyChanging
		entity.tipo_incidente = Me
	End Sub
	
	Private Sub detach_incidentes(ByVal entity As incidente)
		Me.SendPropertyChanging
		entity.tipo_incidente = Nothing
	End Sub
End Class
